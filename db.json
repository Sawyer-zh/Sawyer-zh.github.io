{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/GNAME","path":"GNAME","modified":0,"renderable":0},{"_id":"source/change.php","path":"change.php","modified":0,"renderable":0},{"_id":"source/log.txt","path":"log.txt","modified":0,"renderable":0},{"_id":"source/test.php","path":"test.php","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechat-qcode.jpg","path":"images/wechat-qcode.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/img/3-2.png","path":"images/img/3-2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/img/pay_life_circle.png","path":"images/img/pay_life_circle.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/img/pay_life_circle.xml","path":"images/img/pay_life_circle.xml","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/GNAME","hash":"e9d83345451d4cca40e0fcbf8f793d43346e78f6","modified":1547371623571},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1547432526991},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1547432526991},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1547432526991},{"_id":"themes/next/.gitignore","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1547432526991},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1547432526991},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1547432526991},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1547432526991},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1547432526991},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1547432526991},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1547432526991},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1547432526991},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1547432526991},{"_id":"themes/next/_config.yml","hash":"b082623b19d135f02939ca486889b733add18ce8","modified":1547432526991},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1547432526991},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1547432526991},{"_id":"source/change.php","hash":"32174eccf8096b7bd9416937df281d50c403a110","modified":1547310385286},{"_id":"source/log.txt","hash":"547aa1eb5ec9536dafe9d823c87d20de4f64a837","modified":1547310385286},{"_id":"source/test.php","hash":"878ae5cb631336feb90899cca5fd20368cfc8eba","modified":1547310385286},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1547432526995},{"_id":"source/_posts/C基础.md","hash":"cceba4e736c5d56ceb7ac5548587ca95814a640d","modified":1547432526991},{"_id":"source/_posts/Js.md","hash":"987b1cdae1ad62a7fb7f0bd2c5d9d8caba49a4ba","modified":1547310385278},{"_id":"source/_posts/Vim.md","hash":"10395fe8122f38a1d8228fd3f31952dd70034efe","modified":1547310385282},{"_id":"source/_posts/csapp.md","hash":"60dd8b38eb3163147eeeea901d93c3f226a4abac","modified":1547310385282},{"_id":"source/_posts/dp.md","hash":"998b3c5e5ba72559f0e3e2c2f8f2261fe40daf05","modified":1547310385282},{"_id":"source/_posts/laravel事件分发.md","hash":"7ce841a7b83407696f741a1a889656eb71a6826c","modified":1547310385282},{"_id":"source/_posts/laravel相关.md","hash":"61de48fb201c2d6bc2dd575dd1566d1217fca186","modified":1547310385282},{"_id":"source/_posts/linux程序设计.md","hash":"449cf20ef26c372991aaaa0e1f781c981284b277","modified":1547433669168},{"_id":"source/_posts/laravel路由分发.md","hash":"b0eb06dace8c8884fc19c8876f2ed5677082de41","modified":1547310385286},{"_id":"source/_posts/laravel队列.md","hash":"191c82733e2f06fe542ed8050e2b00cad29ac725","modified":1547310385286},{"_id":"source/_posts/linux一些命令.md","hash":"8e55627ea6fe52247d8101c3675ebc23ff522847","modified":1547310385286},{"_id":"source/_posts/mongo.md","hash":"affd5f2ce5d4309d9101a620b10b70a5c8e7a961","modified":1547310385286},{"_id":"source/_posts/php扩展.md","hash":"da87a676a2f6b5049ca9a4fe6167a6c65f1690f5","modified":1547310385286},{"_id":"source/_posts/php文件操作.md","hash":"26b5ce2643b411d131c415ee335d2afcc070ea60","modified":1547310385286},{"_id":"source/_posts/php源码阅读.md","hash":"4534482d810281bcbfe5bdc6a2d450b442cd7764","modified":1547310385286},{"_id":"source/_posts/sql语句.md","hash":"40ee1fd2b7517bd5a090b409cbbf111da260fafd","modified":1547310385286},{"_id":"source/_posts/pipeline的理解.md","hash":"572a5d2cc117cf3fd7084e8a7110bffe06d5ea44","modified":1547310385286},{"_id":"source/_posts/小程序,app,服务端之间的通信.md","hash":"4ab7d72f544c58caee3e60f2fd1b876b0409ad95","modified":1547433637489},{"_id":"source/_posts/一些php的概念.md","hash":"6b212bd90b9ed36e9c4ee1c9715f26b38f23cf09","modified":1547310385286},{"_id":"source/_posts/一些排序算法.md","hash":"e406abe4de7ae87cf601c41f543d10c4b174ba21","modified":1547310385286},{"_id":"source/about/index.md","hash":"3295a759b4a84adf45f77b7d2d2bed1688f65581","modified":1547432857361},{"_id":"source/_posts/增长黑客.md","hash":"02bfd7c3261dd5eaeec7b742c518c0ab32dc964d","modified":1547310385286},{"_id":"source/_posts/轮询Android屏幕颜色.md","hash":"ced6da5f47645dcdd356cf87ef335ea70fb30c19","modified":1547310385286},{"_id":"source/_posts/高性能mysql.md","hash":"a8129d9b008fcfc590bc8ddb8aff5ddfd22b6816","modified":1547310385286},{"_id":"source/categories/index.md","hash":"6e3a59eb3c2eaa982174aa4c4d944dae729b8610","modified":1547310385286},{"_id":"source/tags/index.md","hash":"62dc581aaf7a8a63ba314f7f57317f02a699f7e9","modified":1547310385286},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1547432526991},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1547432526991},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1547432526991},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1547432526991},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1547432526991},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1547432526991},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1547432526991},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1547432526991},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1547432526991},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1547432526991},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1547432526991},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1547432526991},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1547432526991},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1547432526991},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1547432526991},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1547432526991},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1547432526991},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1547432526991},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1547432526991},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1547432526991},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1547432526991},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1547432526995},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1547432526995},{"_id":"themes/next/layout/index.swig","hash":"aa2b6b51464f749d31871cfef969e55dd882eb4e","modified":1547432526995},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1547432526995},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1547432526995},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1547432526995},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1547432526995},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1547432526995},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1547432526995},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1547432527031},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1547432527031},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1547432527031},{"_id":"source/_posts/git.png","hash":"917f8a4aa843d38c25a5648ce02308b9631d0aaa","modified":1547310385282},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547432527003},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1547432526991},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1547432526991},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1547432526991},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1547432526991},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1547432526991},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1547432526991},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1547432526991},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1547432526991},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5f683d63a35c4c7c259083e0993449aaca24f23c","modified":1547432526991},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1547432526991},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1547432526991},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1547432526991},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1547432526991},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1547432526991},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1547432526991},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1547432526995},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1547432526995},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1547432526995},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1547432526995},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1547432526995},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1547432526995},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1547432526995},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1547432526995},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1547432526995},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1547432526995},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1547432526995},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1547432526995},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1547432526995},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1547432526995},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1547432526995},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1547432526995},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1547432526995},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1547432526995},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1547432526995},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1547432527003},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1547432527003},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1547432527003},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547432527003},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1547432527003},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1547432527003},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1547432527003},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1547432527003},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1547432527003},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1547432527007},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1547432527007},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1547432527007},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1547432527007},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547432527007},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1547432527007},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547432527007},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1547432527007},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1547432527007},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547432527007},{"_id":"themes/next/source/images/wechat-qcode.jpg","hash":"26c6bdb9812c10dd5cc12673fac7814be73445f3","modified":1547432527007},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547432526995},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547432526995},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547432526999},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547432526999},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547432526999},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547432527003},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547432527003},{"_id":"themes/next/source/images/alipay.jpg","hash":"d03978101ef1f0cebf3df91fdab8ae1b452ebb12","modified":1547432527003},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1547432526991},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1547432526991},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1547432526991},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1547432526991},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1547432526991},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1547432526991},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1547432526991},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1547432526991},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1547432526995},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1547432526995},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1547432526995},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1547432526995},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1547432526995},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1547432526995},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1547432526995},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1547432526995},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"09ab72315d26f86cc84f7b900a422baa5f57ead4","modified":1547432526995},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1547432526995},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1547432526995},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"3164f2fb7bf5dc0f9c1cd96a818e5ff387ab19f0","modified":1547432526995},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1547432526995},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1547432526995},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1547432526995},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1547432526995},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1547432526995},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1547432526995},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1547432526995},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1547432526999},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1547432526999},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1547432526999},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1547432526999},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1547432527003},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1547432527003},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1547432527003},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1547432527003},{"_id":"themes/next/source/images/img/3-2.png","hash":"4cc3fc644c6d680cc1119c582a8ec979c0fcd81e","modified":1547310385282},{"_id":"themes/next/source/images/img/pay_life_circle.png","hash":"0bdd69fa03b65264672c8ac410614227a867c794","modified":1547310385282},{"_id":"themes/next/source/images/img/pay_life_circle.xml","hash":"8e1fed069076a4652d8be7ddf09a4c019016ddc7","modified":1547310385282},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"888a5d90df4cfd99b7bb2c1dfb0c7cfcc6c18246","modified":1547432527007},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1547432527007},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1547432527007},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1547432527007},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1547432527007},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1547432527007},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1547432527007},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1547432527007},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1547432527007},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1547432527007},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1547432527007},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1547432527007},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1547432527011},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1547432527015},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1547432527015},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1547432527015},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1547432527015},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1547432527015},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1547432527015},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1547432527015},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1547432527015},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1547432527015},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1547432527015},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1547432527015},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1547432527023},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1547432527023},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1547432527023},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1547432527023},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1547432527023},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1547432527023},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1547432527023},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1547432527023},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1547432527023},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1547432527023},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1547432527023},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1547432527023},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1547432527023},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1547432527023},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1547432527023},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1547432527023},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1547432527023},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1547432527027},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1547432527027},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1547432527027},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1547432527027},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1547432527027},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1547432527027},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1547432527027},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1547432527027},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1547432527027},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1547432527027},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1547432527027},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1547432527027},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1547432527031},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1547432527031},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1547432527031},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1547432527023},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1547432526995},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1547432526999},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1547432526999},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1547432526999},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1547432526999},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1547432526999},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1547432526999},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1547432526999},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1547432526999},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1547432526999},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1547432527003},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1547432527007},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1547432527011},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1547432527015},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1547432527015},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1547432527015},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1547432527015},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1547432527015},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1547432527015},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1547432527027},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1547432527027},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1547432527007},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1547432527011},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547432527023},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547432527023},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1547432527031},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1547432526995},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1547432526999},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1547432526999},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1547432527003},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1547432527003},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1547432527007},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1547432527007},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1547432527007},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1547432527007},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1547432527007},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1547432527011},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1547432527015},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1547432527015},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547432527019},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547432527019},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547432527023},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1547432527011},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1547432527027},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1547432527023}],"Category":[{"name":"计算机基础","_id":"cjqvpvhbk0004zbovymdyj4q6"},{"name":"数据结构与算法","_id":"cjqvpvhbx000mzbovte38tjyj"},{"name":"源码分析","_id":"cjqvpvhc0000tzbov4xy5ofpl"},{"name":"奇葩案例","_id":"cjqvpvhc6001czbov1x28qjfb"},{"name":"产品思维","_id":"cjqvpvhc9001jzboveoetgqsk"}],"Data":[],"Page":[{"title":"about","date":"2019-01-12T13:57:16.000Z","_content":"\nMy name is Hang Zhang, and Sawyer is my English name. \n\nI graduated from SWPU majoring Petroleum Engineering at 2013, and then I went further study in CUP majoring Oil and Gas Field Development Engineering. When I graduated at 2016, the price of oil was extremely low and the enterprise can't make profit while the internet industry was very popular. In this way, I chose software development Engineer as my career.\n\nI am now a PHPer in a small company, and my technology stack is LNMP. I am attracted by the spirit of freedom in open source software.\n\nHere is my contact information:\ngithub:https://github.com/Sawyer-zh\nwechat:zh--007\ne-mail:254091355@qq.com\nblog:Sawyer-zh.github.io / www.keepsunshine.cn\n\n> the ability to see the machine as more than when you were first led up to it, that you can make it more.\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-01-12 21:57:16\n---\n\nMy name is Hang Zhang, and Sawyer is my English name. \n\nI graduated from SWPU majoring Petroleum Engineering at 2013, and then I went further study in CUP majoring Oil and Gas Field Development Engineering. When I graduated at 2016, the price of oil was extremely low and the enterprise can't make profit while the internet industry was very popular. In this way, I chose software development Engineer as my career.\n\nI am now a PHPer in a small company, and my technology stack is LNMP. I am attracted by the spirit of freedom in open source software.\n\nHere is my contact information:\ngithub:https://github.com/Sawyer-zh\nwechat:zh--007\ne-mail:254091355@qq.com\nblog:Sawyer-zh.github.io / www.keepsunshine.cn\n\n> the ability to see the machine as more than when you were first led up to it, that you can make it more.\n","updated":"2019-01-14T02:27:37.361Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjqvpvhbh0001zbovc40lsh72","content":"<p>My name is Hang Zhang, and Sawyer is my English name. </p>\n<p>I graduated from SWPU majoring Petroleum Engineering at 2013, and then I went further study in CUP majoring Oil and Gas Field Development Engineering. When I graduated at 2016, the price of oil was extremely low and the enterprise can’t make profit while the internet industry was very popular. In this way, I chose software development Engineer as my career.</p>\n<p>I am now a PHPer in a small company, and my technology stack is LNMP. I am attracted by the spirit of freedom in open source software.</p>\n<p>Here is my contact information:<br>github:<a href=\"https://github.com/Sawyer-zh\" target=\"_blank\" rel=\"noopener\">https://github.com/Sawyer-zh</a><br>wechat:zh–007<br>e-mail:<a href=\"mailto:254091355@qq.com\" target=\"_blank\" rel=\"noopener\">254091355@qq.com</a><br>blog:Sawyer-zh.github.io / <a href=\"http://www.keepsunshine.cn\" target=\"_blank\" rel=\"noopener\">www.keepsunshine.cn</a></p>\n<blockquote>\n<p>the ability to see the machine as more than when you were first led up to it, that you can make it more.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>My name is Hang Zhang, and Sawyer is my English name. </p>\n<p>I graduated from SWPU majoring Petroleum Engineering at 2013, and then I went further study in CUP majoring Oil and Gas Field Development Engineering. When I graduated at 2016, the price of oil was extremely low and the enterprise can’t make profit while the internet industry was very popular. In this way, I chose software development Engineer as my career.</p>\n<p>I am now a PHPer in a small company, and my technology stack is LNMP. I am attracted by the spirit of freedom in open source software.</p>\n<p>Here is my contact information:<br>github:<a href=\"https://github.com/Sawyer-zh\" target=\"_blank\" rel=\"noopener\">https://github.com/Sawyer-zh</a><br>wechat:zh–007<br>e-mail:<a href=\"mailto:254091355@qq.com\" target=\"_blank\" rel=\"noopener\">254091355@qq.com</a><br>blog:Sawyer-zh.github.io / <a href=\"http://www.keepsunshine.cn\" target=\"_blank\" rel=\"noopener\">www.keepsunshine.cn</a></p>\n<blockquote>\n<p>the ability to see the machine as more than when you were first led up to it, that you can make it more.</p>\n</blockquote>\n"},{"title":"categories","date":"2019-01-12T14:42:40.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-01-12 22:42:40\ntype: categories\n---\n","updated":"2019-01-12T16:26:25.286Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjqvpvhbj0003zbovqzdfee8w","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-01-12T14:39:55.000Z","type":"tags","_content":"\n\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-01-12 22:39:55\ntype: tags\n---\n\n\n","updated":"2019-01-12T16:26:25.286Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjqvpvhbm0007zbovpeoqspgw","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"C基础","comments":1,"date":"2019-01-11T02:01:48.000Z","_content":"\n看php源码补充的基础知识\n<!-- more -->\n\n### 指针变量值占用多少内存\n\n首先应该明白地址空间.对于程序而言,内存被抽象成虚拟内存,每一个进程都把内存看作自己独占在使用.而地址空间就是虚拟内存大小的一个范围.而这个范围取决于字长(即我们常常说的多少位的计算机).比如32位计算机,它可以表示的地址空间为0-2<sup>32</sup>,所以对应的指针变量的值占多少内存空间呢?很显然,指针变量的值实际上就是内存的地址,而32位的地址当然需要用32位即4个字节来保存.\n\n### typedef用法(编译)\n- 为基本数据类型定义新的类型`typedef int ElementType`\n- 为结构体定义简介类型名称\n```c\ntypedef struct tagPoint{\n    double x;\n    double y;\n    double z;\n} Point;\n```\n\n\n### #ifndef等等的用法(预处理部分就完成了)\n- 简单的define定义, `#define MAX 100`:把MAX替换成100\n- 函数定义,`#define MAX(x,y) (x)>(y)?(x):(y)`:可能存在风险,因为只是简单的文本替换\n- 单行定义,如下,比如x=1\n    - `#define A(x) T_##x`:`T_1`   (`##`把宏参数与代码中的标识符连接起来,形成一个新的标识符) \n    - `#define B(x) #@x`:`'1'`  (`#@`把宏参数变成单字符,即加单引号)\n    - `#define C(x) #x`:`\"1\"`   (`#`把宏参数字符串化,加双引号)\n- 多行定义,在每一个换行的时候需要加一个`\\`.\n```c\n#define MAX(x,y) do{ \\\n    statement1; \\\n    statement2; \\\n}while(0) \n```\n- 条件编译\n```c\n#ifdef WIN32\n...\n(#else)\n...\n#endif\n```\n- 取消宏`#undef MAX`\n- 避免重复包含(`.h`文件可能被重复`include`,一般是定义这个文件名前后加下划线,中间点也变成下划线`stdio.h`)\n```c\n#ifndef _STDIO_H_\n#define _STDIO_H_\n...\n...\n#endif\n```\n\n### ___`___attribute__ ((visibility(\"default\")))_`\n\n来源于`php-src`,如下.意思就是如果设置成`hidden`就不能被`shared objects`调用\n```c\n#ifdef PHP_WIN32\n#\tifdef SAPI_EXPORTS\n#\t\tdefine SAPI_API __declspec(dllexport)\n#\telse\n#\t\tdefine SAPI_API __declspec(dllimport)\n#\tendif\n#elif defined(__GNUC__) && __GNUC__ >= 4\n#\tdefine SAPI_API __attribute__ ((visibility(\"default\")))\n#else\n#\tdefine SAPI_API\n#endif\n\nSAPI_API void sapi_startup(sapi_module_struct *sf){\n    ...\n}\n\n```\n\n> In the GNU compiler collection (GCC) environment, the term that is used for exporting is visibility. As it applies to functions and variables in a shared object, visibility refers to the ability of other shared objects to call a C/C++ function. Functions with default visibility have a global scope and can be called from other shared objects. Functions with hidden visibility have a local scope and cannot be called from other shared objects.\n\n### `__declspec()`\n```c\n#ifdef LIBZEND_EXPORTS\n#\tdefine ZEND_API __declspec(dllexport)\n#else\n#\tdefine ZEND_API __declspec(dllimport)\n#endif\n```\n### extern \"C\"\n\n作用是编译的时候使C和C++产生相同的符号.因为C++支持重载,编译时会在符号后面添上参数类型.[参见](https://blog.csdn.net/MonroeD/article/details/54880944)\n\n```c\n\n#ifdef __cplusplus\n#define BEGIN_EXTERN_C() extern \"C\" {\n#define END_EXTERN_C() }\n\n```\n","source":"_posts/C基础.md","raw":"---\ntitle: C基础\ncomments: true\ndate: 2019-01-11 10:01:48\ntags:\n- C语言\ncategories:\n- 计算机基础\n\n---\n\n看php源码补充的基础知识\n<!-- more -->\n\n### 指针变量值占用多少内存\n\n首先应该明白地址空间.对于程序而言,内存被抽象成虚拟内存,每一个进程都把内存看作自己独占在使用.而地址空间就是虚拟内存大小的一个范围.而这个范围取决于字长(即我们常常说的多少位的计算机).比如32位计算机,它可以表示的地址空间为0-2<sup>32</sup>,所以对应的指针变量的值占多少内存空间呢?很显然,指针变量的值实际上就是内存的地址,而32位的地址当然需要用32位即4个字节来保存.\n\n### typedef用法(编译)\n- 为基本数据类型定义新的类型`typedef int ElementType`\n- 为结构体定义简介类型名称\n```c\ntypedef struct tagPoint{\n    double x;\n    double y;\n    double z;\n} Point;\n```\n\n\n### #ifndef等等的用法(预处理部分就完成了)\n- 简单的define定义, `#define MAX 100`:把MAX替换成100\n- 函数定义,`#define MAX(x,y) (x)>(y)?(x):(y)`:可能存在风险,因为只是简单的文本替换\n- 单行定义,如下,比如x=1\n    - `#define A(x) T_##x`:`T_1`   (`##`把宏参数与代码中的标识符连接起来,形成一个新的标识符) \n    - `#define B(x) #@x`:`'1'`  (`#@`把宏参数变成单字符,即加单引号)\n    - `#define C(x) #x`:`\"1\"`   (`#`把宏参数字符串化,加双引号)\n- 多行定义,在每一个换行的时候需要加一个`\\`.\n```c\n#define MAX(x,y) do{ \\\n    statement1; \\\n    statement2; \\\n}while(0) \n```\n- 条件编译\n```c\n#ifdef WIN32\n...\n(#else)\n...\n#endif\n```\n- 取消宏`#undef MAX`\n- 避免重复包含(`.h`文件可能被重复`include`,一般是定义这个文件名前后加下划线,中间点也变成下划线`stdio.h`)\n```c\n#ifndef _STDIO_H_\n#define _STDIO_H_\n...\n...\n#endif\n```\n\n### ___`___attribute__ ((visibility(\"default\")))_`\n\n来源于`php-src`,如下.意思就是如果设置成`hidden`就不能被`shared objects`调用\n```c\n#ifdef PHP_WIN32\n#\tifdef SAPI_EXPORTS\n#\t\tdefine SAPI_API __declspec(dllexport)\n#\telse\n#\t\tdefine SAPI_API __declspec(dllimport)\n#\tendif\n#elif defined(__GNUC__) && __GNUC__ >= 4\n#\tdefine SAPI_API __attribute__ ((visibility(\"default\")))\n#else\n#\tdefine SAPI_API\n#endif\n\nSAPI_API void sapi_startup(sapi_module_struct *sf){\n    ...\n}\n\n```\n\n> In the GNU compiler collection (GCC) environment, the term that is used for exporting is visibility. As it applies to functions and variables in a shared object, visibility refers to the ability of other shared objects to call a C/C++ function. Functions with default visibility have a global scope and can be called from other shared objects. Functions with hidden visibility have a local scope and cannot be called from other shared objects.\n\n### `__declspec()`\n```c\n#ifdef LIBZEND_EXPORTS\n#\tdefine ZEND_API __declspec(dllexport)\n#else\n#\tdefine ZEND_API __declspec(dllimport)\n#endif\n```\n### extern \"C\"\n\n作用是编译的时候使C和C++产生相同的符号.因为C++支持重载,编译时会在符号后面添上参数类型.[参见](https://blog.csdn.net/MonroeD/article/details/54880944)\n\n```c\n\n#ifdef __cplusplus\n#define BEGIN_EXTERN_C() extern \"C\" {\n#define END_EXTERN_C() }\n\n```\n","slug":"C基础","published":1,"updated":"2019-01-14T02:22:06.991Z","layout":"post","photos":[],"link":"","_id":"cjqvpvhbd0000zbovp76m1xqz","content":"<p>看php源码补充的基础知识<br><a id=\"more\"></a></p>\n<h3 id=\"指针变量值占用多少内存\"><a href=\"#指针变量值占用多少内存\" class=\"headerlink\" title=\"指针变量值占用多少内存\"></a>指针变量值占用多少内存</h3><p>首先应该明白地址空间.对于程序而言,内存被抽象成虚拟内存,每一个进程都把内存看作自己独占在使用.而地址空间就是虚拟内存大小的一个范围.而这个范围取决于字长(即我们常常说的多少位的计算机).比如32位计算机,它可以表示的地址空间为0-2<sup>32</sup>,所以对应的指针变量的值占多少内存空间呢?很显然,指针变量的值实际上就是内存的地址,而32位的地址当然需要用32位即4个字节来保存.</p>\n<h3 id=\"typedef用法-编译\"><a href=\"#typedef用法-编译\" class=\"headerlink\" title=\"typedef用法(编译)\"></a>typedef用法(编译)</h3><ul>\n<li>为基本数据类型定义新的类型<code>typedef int ElementType</code></li>\n<li>为结构体定义简介类型名称<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tagPoint</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> z;</span><br><span class=\"line\">&#125; Point;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"ifndef等等的用法-预处理部分就完成了\"><a href=\"#ifndef等等的用法-预处理部分就完成了\" class=\"headerlink\" title=\"#ifndef等等的用法(预处理部分就完成了)\"></a>#ifndef等等的用法(预处理部分就完成了)</h3><ul>\n<li>简单的define定义, <code>#define MAX 100</code>:把MAX替换成100</li>\n<li>函数定义,<code>#define MAX(x,y) (x)&gt;(y)?(x):(y)</code>:可能存在风险,因为只是简单的文本替换</li>\n<li>单行定义,如下,比如x=1<ul>\n<li><code>#define A(x) T_##x</code>:<code>T_1</code>   (<code>##</code>把宏参数与代码中的标识符连接起来,形成一个新的标识符) </li>\n<li><code>#define B(x) #@x</code>:<code>&#39;1&#39;</code>  (<code>#@</code>把宏参数变成单字符,即加单引号)</li>\n<li><code>#define C(x) #x</code>:<code>&quot;1&quot;</code>   (<code>#</code>把宏参数字符串化,加双引号)</li>\n</ul>\n</li>\n<li><p>多行定义,在每一个换行的时候需要加一个<code>\\</code>.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX(x,y) do&#123; \\</span></span><br><span class=\"line\">    statement1; \\</span><br><span class=\"line\">    statement2; \\</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件编译</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> WIN32</span></span><br><span class=\"line\">...</span><br><span class=\"line\">(#<span class=\"keyword\">else</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消宏<code>#undef MAX</code></p>\n</li>\n<li>避免重复包含(<code>.h</code>文件可能被重复<code>include</code>,一般是定义这个文件名前后加下划线,中间点也变成下划线<code>stdio.h</code>)<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _STDIO_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _STDIO_H_</span></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"attribute-visibility-“default”\"><a href=\"#attribute-visibility-“default”\" class=\"headerlink\" title=\"_`_attribute__ ((visibility(“default”)))_`\"></a><strong>_`_</strong>attribute__ ((visibility(“default”)))_`</h3><p>来源于<code>php-src</code>,如下.意思就是如果设置成<code>hidden</code>就不能被<code>shared objects</code>调用<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> PHP_WIN32</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">ifdef</span> SAPI_EXPORTS</span></span><br><span class=\"line\"><span class=\"meta\">#\t\t<span class=\"meta-keyword\">define</span> SAPI_API __declspec(dllexport)</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t\t<span class=\"meta-keyword\">define</span> SAPI_API __declspec(dllimport)</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(__GNUC__) &amp;&amp; __GNUC__ &gt;= 4</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> SAPI_API __attribute__ ((visibility(<span class=\"meta-string\">\"default\"</span>)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> SAPI_API</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">SAPI_API <span class=\"keyword\">void</span> <span class=\"title\">sapi_startup</span><span class=\"params\">(sapi_module_struct *sf)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>In the GNU compiler collection (GCC) environment, the term that is used for exporting is visibility. As it applies to functions and variables in a shared object, visibility refers to the ability of other shared objects to call a C/C++ function. Functions with default visibility have a global scope and can be called from other shared objects. Functions with hidden visibility have a local scope and cannot be called from other shared objects.</p>\n</blockquote>\n<h3 id=\"declspec\"><a href=\"#declspec\" class=\"headerlink\" title=\"__declspec()\"></a><code>__declspec()</code></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> LIBZEND_EXPORTS</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> ZEND_API __declspec(dllexport)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> ZEND_API __declspec(dllimport)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"extern-“C”\"><a href=\"#extern-“C”\" class=\"headerlink\" title=\"extern “C”\"></a>extern “C”</h3><p>作用是编译的时候使C和C++产生相同的符号.因为C++支持重载,编译时会在符号后面添上参数类型.<a href=\"https://blog.csdn.net/MonroeD/article/details/54880944\" target=\"_blank\" rel=\"noopener\">参见</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BEGIN_EXTERN_C() extern <span class=\"meta-string\">\"C\"</span> &#123;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> END_EXTERN_C() &#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>看php源码补充的基础知识<br>","more":"</p>\n<h3 id=\"指针变量值占用多少内存\"><a href=\"#指针变量值占用多少内存\" class=\"headerlink\" title=\"指针变量值占用多少内存\"></a>指针变量值占用多少内存</h3><p>首先应该明白地址空间.对于程序而言,内存被抽象成虚拟内存,每一个进程都把内存看作自己独占在使用.而地址空间就是虚拟内存大小的一个范围.而这个范围取决于字长(即我们常常说的多少位的计算机).比如32位计算机,它可以表示的地址空间为0-2<sup>32</sup>,所以对应的指针变量的值占多少内存空间呢?很显然,指针变量的值实际上就是内存的地址,而32位的地址当然需要用32位即4个字节来保存.</p>\n<h3 id=\"typedef用法-编译\"><a href=\"#typedef用法-编译\" class=\"headerlink\" title=\"typedef用法(编译)\"></a>typedef用法(编译)</h3><ul>\n<li>为基本数据类型定义新的类型<code>typedef int ElementType</code></li>\n<li>为结构体定义简介类型名称<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tagPoint</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> z;</span><br><span class=\"line\">&#125; Point;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"ifndef等等的用法-预处理部分就完成了\"><a href=\"#ifndef等等的用法-预处理部分就完成了\" class=\"headerlink\" title=\"#ifndef等等的用法(预处理部分就完成了)\"></a>#ifndef等等的用法(预处理部分就完成了)</h3><ul>\n<li>简单的define定义, <code>#define MAX 100</code>:把MAX替换成100</li>\n<li>函数定义,<code>#define MAX(x,y) (x)&gt;(y)?(x):(y)</code>:可能存在风险,因为只是简单的文本替换</li>\n<li>单行定义,如下,比如x=1<ul>\n<li><code>#define A(x) T_##x</code>:<code>T_1</code>   (<code>##</code>把宏参数与代码中的标识符连接起来,形成一个新的标识符) </li>\n<li><code>#define B(x) #@x</code>:<code>&#39;1&#39;</code>  (<code>#@</code>把宏参数变成单字符,即加单引号)</li>\n<li><code>#define C(x) #x</code>:<code>&quot;1&quot;</code>   (<code>#</code>把宏参数字符串化,加双引号)</li>\n</ul>\n</li>\n<li><p>多行定义,在每一个换行的时候需要加一个<code>\\</code>.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX(x,y) do&#123; \\</span></span><br><span class=\"line\">    statement1; \\</span><br><span class=\"line\">    statement2; \\</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件编译</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> WIN32</span></span><br><span class=\"line\">...</span><br><span class=\"line\">(#<span class=\"keyword\">else</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消宏<code>#undef MAX</code></p>\n</li>\n<li>避免重复包含(<code>.h</code>文件可能被重复<code>include</code>,一般是定义这个文件名前后加下划线,中间点也变成下划线<code>stdio.h</code>)<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _STDIO_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _STDIO_H_</span></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"attribute-visibility-“default”\"><a href=\"#attribute-visibility-“default”\" class=\"headerlink\" title=\"_`_attribute__ ((visibility(“default”)))_`\"></a><strong>_`_</strong>attribute__ ((visibility(“default”)))_`</h3><p>来源于<code>php-src</code>,如下.意思就是如果设置成<code>hidden</code>就不能被<code>shared objects</code>调用<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> PHP_WIN32</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">ifdef</span> SAPI_EXPORTS</span></span><br><span class=\"line\"><span class=\"meta\">#\t\t<span class=\"meta-keyword\">define</span> SAPI_API __declspec(dllexport)</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t\t<span class=\"meta-keyword\">define</span> SAPI_API __declspec(dllimport)</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(__GNUC__) &amp;&amp; __GNUC__ &gt;= 4</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> SAPI_API __attribute__ ((visibility(<span class=\"meta-string\">\"default\"</span>)))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> SAPI_API</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">SAPI_API <span class=\"keyword\">void</span> <span class=\"title\">sapi_startup</span><span class=\"params\">(sapi_module_struct *sf)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>In the GNU compiler collection (GCC) environment, the term that is used for exporting is visibility. As it applies to functions and variables in a shared object, visibility refers to the ability of other shared objects to call a C/C++ function. Functions with default visibility have a global scope and can be called from other shared objects. Functions with hidden visibility have a local scope and cannot be called from other shared objects.</p>\n</blockquote>\n<h3 id=\"declspec\"><a href=\"#declspec\" class=\"headerlink\" title=\"__declspec()\"></a><code>__declspec()</code></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> LIBZEND_EXPORTS</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> ZEND_API __declspec(dllexport)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> ZEND_API __declspec(dllimport)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"extern-“C”\"><a href=\"#extern-“C”\" class=\"headerlink\" title=\"extern “C”\"></a>extern “C”</h3><p>作用是编译的时候使C和C++产生相同的符号.因为C++支持重载,编译时会在符号后面添上参数类型.<a href=\"https://blog.csdn.net/MonroeD/article/details/54880944\" target=\"_blank\" rel=\"noopener\">参见</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BEGIN_EXTERN_C() extern <span class=\"meta-string\">\"C\"</span> &#123;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> END_EXTERN_C() &#125;</span></span><br></pre></td></tr></table></figure>"},{"title":"Js","date":"2018-12-05T03:53:52.000Z","_content":"\n绕不过去的js.还是得学学了!\n\n[网道](https://wangdoc.com/javascript/)\n\n[阮一峰ECMAScript6入门](http://es6.ruanyifeng.com/)\n\n<!-- more -->\n\n### 入门篇\n\n主要讲了js的作用,历史,和基本语法.这部分略过去了\n\n### 数据结构\n\n介绍了数字(number),字符串(string),布尔(boolean),undefined,null,对象(object)等六种数据类型\n\n`typeof`运算符:特殊的有,函数返回`function`,`null`返回`object`.\n\n1. null/undefined\n\n说实话,没看明白,大都情况下都是undefined,C里面NULL确实表示0\n\n2. boolean\n\ntrue / false (undefined,null,false,0,NaN,\"\"/'')\n\n3. number\n\n- 浮点数精度:(1个符号位) + (2-12指数) + (13-64小数)\n- 数值的范围:超过变成`Infinity`,`Number.MAX_VALUE`,`Number.MIN_VALUE`\n- 整数的科学计数法表示:`-3.1e+12`,小数点前的数字多于21位和小数点后的零多于5个会自动转为科学计数法\n- 进制:`0x`,`0b`,`0o`\n- `+0`/`-0`:基本相同,例外`(1/+0)===(1/-0) // false`当它作分母的时候返回`+Infinity`,`-Infinity`\n- `NaN`,`Infinity`\n- 全局方法:`parseInt`,`parseFloat`,`isNaN`,`isFinite`\n\n4. 字符串\n\n- 字符串可以被视为字符数组来获取其中元素.`abc[1] // b`\n- 字符集:`JavaScript`使用`Unicode`字符集\n- `Base64`:把任意值转成`0~9`,`A~Z`,`a~z`,`+`和`/`这64个字符组成的可打印字符,不是为了加密,而是为了不出现特殊字符`btoa`,`atob`两个函数把`ASCII`即(`Base64`)和`binary`进行互转.\n\n5. 对象\n\n- 创建:`var obj={ 'foo':'Hello' , 'bar':'World' }`\n- 键名:所有的键都是字符串,所以引号可加可不加(如果不满足标识符的条件则需要加),又被成为属性\n- 对象的引用:变量名为对对象的引用,两个指向同一个对象的变量,通过其中一个修改了对象的某个属性,也会影响到其他变量\n- 属性的读取/赋值:`obj.p`或者`obj['p']`,`obj.p=1`或者`obj['p']=1`\n- 属性的查看:`Object.keys(obj)`\n- 属性的删除:`delete obj.p`\n- 属性是否存在:`'p' in obj`,`obj.hasOwnProperty('toString')`\n- 属性遍历:`for (var i in obj)` `i`为属性名,可以遍历继承过来的属性,只能遍历可遍历的属性\n- `with`:操作同一个对象的多个属性,书写方便使用. `with`操作没有改变作用域,内部依然是当前作用域.因此赋值给不存在的属性是会在当前作用域创建一个变量\n\n6. 函数(对象的一种)\n\n- 声明:`function fn()`,`var fn = function()`,`new Function`\n- 函数名提升:把声明放到最前面执行,但是赋值并没有\n- 函数的属性:\n  - `name`:函数名\n  - `length`:参数长度,通过这个实现方法重载\n  - `toString`:返回函数内容的源码\n- 函数作用域:\n  - 全局作用域\n  - 函数作用域\n\n- 参数:\n- 闭包:闭包就是可以读取其他函数内部变量的函数,闭包意思懂,但是不知道指的是这个现象还是还是函数.作用:读取函数内部变量,另一个是始终让这些变量保持在内存中\n- 立即调用的函数表达式(IIFE):`(function(){})();`或者`(function(){}())`;\n- `eval`\n\n7. 数组(对象的一种)\n\n基本和对象一样...\n\n### 面向对象编程\n\nJavaScript的对象体系基于构造函数`constructor`和原型链`prototype` \n\n1. `new`命令的原理:\n   - 创建一个空对象,作为将要返回的对象实例\n   - 将这个空对象的原型,指向构造函数的`prototype`属性\n   - 将这个空对象赋值给函数内部的`this`关键字\n   - 开始执行构造函数内部的代码\n\n2. `Object.create`创建实例对象\n\n3. `this`关键字:属性或者方法当前所在的对象,函数被赋值给另外一个变量,`this`的指向也会变\n\n4. `this`的实质:对象以指针形式保存,通过访问这个指针所指的对象,可以得到属性的值,如果属性是个函数呢(引擎会将函数单独保存在内存中,然后将函数的地址赋值给这个属性,所以函数是一个单独的值,需要在不同的上下文执行),这个时候需要引入一个`this`来指代函数当前的运行环境\n\n5. `this`的使用场合:`window`,构造函数(指的是实例对象),对象的方法\n\n6. 绑定`this`的方法:\n   - `Function.prototype.call`:`fn.call(thisValue,arg1,arg2,...)`\n   - `Function.prototype.apply`:`fn.apply(thisValue,[arg1,arg2,...])`\n   - `Function.prototype.bind`:返回一个新的绑定到指定对象的函数\n\n7. 对象的继承\n\n  - 通过构造函数实例化对象的时候,无法完成公有属性的共享.\n\n  - 采用原型对象来解决:每个函数都有一个`prototype`属性,指向一个对象\n\n  - 原型链:所有对象都有自己的原型对象(`prototype`).一方面,任何一个对象,都可以充当其他对象的原型,另一方面,原型对象也是对象,所以也有自己的原型,因此会形成一个原型链.最终都可以上溯到`Object.prototype`中去,而它的原型就是`null`.因此原型链的尽头是`null`\n\n  - 原型对象的`constructor`属性:定义在`prototype`对象上面,可以被所有实例对象继承,表明了原型对象与构造函数之间的关联关系\n\n  - 构造函数的继承:\n    - 在子类的构造函数中,调用父类的构造函数\n    - 让子类的原型指向父类的原型(不要直接赋值)\n\n  - 模块:实现特点功能的一组属性和方法的封装\n\n### 异步操作\n\n- JaveScript只在一个线程上运行\n\n- 同步任务和异步任务:利用事件循环`Event Loop`来实现\n\n\n","source":"_posts/Js.md","raw":"---\ntitle: Js\ndate: 2018-12-05 11:53:52\ntags:\n- javascript\ncategories:\n- 计算机基础\n---\n\n绕不过去的js.还是得学学了!\n\n[网道](https://wangdoc.com/javascript/)\n\n[阮一峰ECMAScript6入门](http://es6.ruanyifeng.com/)\n\n<!-- more -->\n\n### 入门篇\n\n主要讲了js的作用,历史,和基本语法.这部分略过去了\n\n### 数据结构\n\n介绍了数字(number),字符串(string),布尔(boolean),undefined,null,对象(object)等六种数据类型\n\n`typeof`运算符:特殊的有,函数返回`function`,`null`返回`object`.\n\n1. null/undefined\n\n说实话,没看明白,大都情况下都是undefined,C里面NULL确实表示0\n\n2. boolean\n\ntrue / false (undefined,null,false,0,NaN,\"\"/'')\n\n3. number\n\n- 浮点数精度:(1个符号位) + (2-12指数) + (13-64小数)\n- 数值的范围:超过变成`Infinity`,`Number.MAX_VALUE`,`Number.MIN_VALUE`\n- 整数的科学计数法表示:`-3.1e+12`,小数点前的数字多于21位和小数点后的零多于5个会自动转为科学计数法\n- 进制:`0x`,`0b`,`0o`\n- `+0`/`-0`:基本相同,例外`(1/+0)===(1/-0) // false`当它作分母的时候返回`+Infinity`,`-Infinity`\n- `NaN`,`Infinity`\n- 全局方法:`parseInt`,`parseFloat`,`isNaN`,`isFinite`\n\n4. 字符串\n\n- 字符串可以被视为字符数组来获取其中元素.`abc[1] // b`\n- 字符集:`JavaScript`使用`Unicode`字符集\n- `Base64`:把任意值转成`0~9`,`A~Z`,`a~z`,`+`和`/`这64个字符组成的可打印字符,不是为了加密,而是为了不出现特殊字符`btoa`,`atob`两个函数把`ASCII`即(`Base64`)和`binary`进行互转.\n\n5. 对象\n\n- 创建:`var obj={ 'foo':'Hello' , 'bar':'World' }`\n- 键名:所有的键都是字符串,所以引号可加可不加(如果不满足标识符的条件则需要加),又被成为属性\n- 对象的引用:变量名为对对象的引用,两个指向同一个对象的变量,通过其中一个修改了对象的某个属性,也会影响到其他变量\n- 属性的读取/赋值:`obj.p`或者`obj['p']`,`obj.p=1`或者`obj['p']=1`\n- 属性的查看:`Object.keys(obj)`\n- 属性的删除:`delete obj.p`\n- 属性是否存在:`'p' in obj`,`obj.hasOwnProperty('toString')`\n- 属性遍历:`for (var i in obj)` `i`为属性名,可以遍历继承过来的属性,只能遍历可遍历的属性\n- `with`:操作同一个对象的多个属性,书写方便使用. `with`操作没有改变作用域,内部依然是当前作用域.因此赋值给不存在的属性是会在当前作用域创建一个变量\n\n6. 函数(对象的一种)\n\n- 声明:`function fn()`,`var fn = function()`,`new Function`\n- 函数名提升:把声明放到最前面执行,但是赋值并没有\n- 函数的属性:\n  - `name`:函数名\n  - `length`:参数长度,通过这个实现方法重载\n  - `toString`:返回函数内容的源码\n- 函数作用域:\n  - 全局作用域\n  - 函数作用域\n\n- 参数:\n- 闭包:闭包就是可以读取其他函数内部变量的函数,闭包意思懂,但是不知道指的是这个现象还是还是函数.作用:读取函数内部变量,另一个是始终让这些变量保持在内存中\n- 立即调用的函数表达式(IIFE):`(function(){})();`或者`(function(){}())`;\n- `eval`\n\n7. 数组(对象的一种)\n\n基本和对象一样...\n\n### 面向对象编程\n\nJavaScript的对象体系基于构造函数`constructor`和原型链`prototype` \n\n1. `new`命令的原理:\n   - 创建一个空对象,作为将要返回的对象实例\n   - 将这个空对象的原型,指向构造函数的`prototype`属性\n   - 将这个空对象赋值给函数内部的`this`关键字\n   - 开始执行构造函数内部的代码\n\n2. `Object.create`创建实例对象\n\n3. `this`关键字:属性或者方法当前所在的对象,函数被赋值给另外一个变量,`this`的指向也会变\n\n4. `this`的实质:对象以指针形式保存,通过访问这个指针所指的对象,可以得到属性的值,如果属性是个函数呢(引擎会将函数单独保存在内存中,然后将函数的地址赋值给这个属性,所以函数是一个单独的值,需要在不同的上下文执行),这个时候需要引入一个`this`来指代函数当前的运行环境\n\n5. `this`的使用场合:`window`,构造函数(指的是实例对象),对象的方法\n\n6. 绑定`this`的方法:\n   - `Function.prototype.call`:`fn.call(thisValue,arg1,arg2,...)`\n   - `Function.prototype.apply`:`fn.apply(thisValue,[arg1,arg2,...])`\n   - `Function.prototype.bind`:返回一个新的绑定到指定对象的函数\n\n7. 对象的继承\n\n  - 通过构造函数实例化对象的时候,无法完成公有属性的共享.\n\n  - 采用原型对象来解决:每个函数都有一个`prototype`属性,指向一个对象\n\n  - 原型链:所有对象都有自己的原型对象(`prototype`).一方面,任何一个对象,都可以充当其他对象的原型,另一方面,原型对象也是对象,所以也有自己的原型,因此会形成一个原型链.最终都可以上溯到`Object.prototype`中去,而它的原型就是`null`.因此原型链的尽头是`null`\n\n  - 原型对象的`constructor`属性:定义在`prototype`对象上面,可以被所有实例对象继承,表明了原型对象与构造函数之间的关联关系\n\n  - 构造函数的继承:\n    - 在子类的构造函数中,调用父类的构造函数\n    - 让子类的原型指向父类的原型(不要直接赋值)\n\n  - 模块:实现特点功能的一组属性和方法的封装\n\n### 异步操作\n\n- JaveScript只在一个线程上运行\n\n- 同步任务和异步任务:利用事件循环`Event Loop`来实现\n\n\n","slug":"Js","published":1,"updated":"2019-01-12T16:26:25.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhbh0002zbov30jpu7zm","content":"<p>绕不过去的js.还是得学学了!</p>\n<p><a href=\"https://wangdoc.com/javascript/\" target=\"_blank\" rel=\"noopener\">网道</a></p>\n<p><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰ECMAScript6入门</a></p>\n<a id=\"more\"></a>\n<h3 id=\"入门篇\"><a href=\"#入门篇\" class=\"headerlink\" title=\"入门篇\"></a>入门篇</h3><p>主要讲了js的作用,历史,和基本语法.这部分略过去了</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>介绍了数字(number),字符串(string),布尔(boolean),undefined,null,对象(object)等六种数据类型</p>\n<p><code>typeof</code>运算符:特殊的有,函数返回<code>function</code>,<code>null</code>返回<code>object</code>.</p>\n<ol>\n<li>null/undefined</li>\n</ol>\n<p>说实话,没看明白,大都情况下都是undefined,C里面NULL确实表示0</p>\n<ol start=\"2\">\n<li>boolean</li>\n</ol>\n<p>true / false (undefined,null,false,0,NaN,””/‘’)</p>\n<ol start=\"3\">\n<li>number</li>\n</ol>\n<ul>\n<li>浮点数精度:(1个符号位) + (2-12指数) + (13-64小数)</li>\n<li>数值的范围:超过变成<code>Infinity</code>,<code>Number.MAX_VALUE</code>,<code>Number.MIN_VALUE</code></li>\n<li>整数的科学计数法表示:<code>-3.1e+12</code>,小数点前的数字多于21位和小数点后的零多于5个会自动转为科学计数法</li>\n<li>进制:<code>0x</code>,<code>0b</code>,<code>0o</code></li>\n<li><code>+0</code>/<code>-0</code>:基本相同,例外<code>(1/+0)===(1/-0) // false</code>当它作分母的时候返回<code>+Infinity</code>,<code>-Infinity</code></li>\n<li><code>NaN</code>,<code>Infinity</code></li>\n<li>全局方法:<code>parseInt</code>,<code>parseFloat</code>,<code>isNaN</code>,<code>isFinite</code></li>\n</ul>\n<ol start=\"4\">\n<li>字符串</li>\n</ol>\n<ul>\n<li>字符串可以被视为字符数组来获取其中元素.<code>abc[1] // b</code></li>\n<li>字符集:<code>JavaScript</code>使用<code>Unicode</code>字符集</li>\n<li><code>Base64</code>:把任意值转成<code>0~9</code>,<code>A~Z</code>,<code>a~z</code>,<code>+</code>和<code>/</code>这64个字符组成的可打印字符,不是为了加密,而是为了不出现特殊字符<code>btoa</code>,<code>atob</code>两个函数把<code>ASCII</code>即(<code>Base64</code>)和<code>binary</code>进行互转.</li>\n</ul>\n<ol start=\"5\">\n<li>对象</li>\n</ol>\n<ul>\n<li>创建:<code>var obj={ &#39;foo&#39;:&#39;Hello&#39; , &#39;bar&#39;:&#39;World&#39; }</code></li>\n<li>键名:所有的键都是字符串,所以引号可加可不加(如果不满足标识符的条件则需要加),又被成为属性</li>\n<li>对象的引用:变量名为对对象的引用,两个指向同一个对象的变量,通过其中一个修改了对象的某个属性,也会影响到其他变量</li>\n<li>属性的读取/赋值:<code>obj.p</code>或者<code>obj[&#39;p&#39;]</code>,<code>obj.p=1</code>或者<code>obj[&#39;p&#39;]=1</code></li>\n<li>属性的查看:<code>Object.keys(obj)</code></li>\n<li>属性的删除:<code>delete obj.p</code></li>\n<li>属性是否存在:<code>&#39;p&#39; in obj</code>,<code>obj.hasOwnProperty(&#39;toString&#39;)</code></li>\n<li>属性遍历:<code>for (var i in obj)</code> <code>i</code>为属性名,可以遍历继承过来的属性,只能遍历可遍历的属性</li>\n<li><code>with</code>:操作同一个对象的多个属性,书写方便使用. <code>with</code>操作没有改变作用域,内部依然是当前作用域.因此赋值给不存在的属性是会在当前作用域创建一个变量</li>\n</ul>\n<ol start=\"6\">\n<li>函数(对象的一种)</li>\n</ol>\n<ul>\n<li>声明:<code>function fn()</code>,<code>var fn = function()</code>,<code>new Function</code></li>\n<li>函数名提升:把声明放到最前面执行,但是赋值并没有</li>\n<li>函数的属性:<ul>\n<li><code>name</code>:函数名</li>\n<li><code>length</code>:参数长度,通过这个实现方法重载</li>\n<li><code>toString</code>:返回函数内容的源码</li>\n</ul>\n</li>\n<li><p>函数作用域:</p>\n<ul>\n<li>全局作用域</li>\n<li>函数作用域</li>\n</ul>\n</li>\n<li><p>参数:</p>\n</li>\n<li>闭包:闭包就是可以读取其他函数内部变量的函数,闭包意思懂,但是不知道指的是这个现象还是还是函数.作用:读取函数内部变量,另一个是始终让这些变量保持在内存中</li>\n<li>立即调用的函数表达式(IIFE):<code>(function(){})();</code>或者<code>(function(){}())</code>;</li>\n<li><code>eval</code></li>\n</ul>\n<ol start=\"7\">\n<li>数组(对象的一种)</li>\n</ol>\n<p>基本和对象一样…</p>\n<h3 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h3><p>JavaScript的对象体系基于构造函数<code>constructor</code>和原型链<code>prototype</code> </p>\n<ol>\n<li><p><code>new</code>命令的原理:</p>\n<ul>\n<li>创建一个空对象,作为将要返回的对象实例</li>\n<li>将这个空对象的原型,指向构造函数的<code>prototype</code>属性</li>\n<li>将这个空对象赋值给函数内部的<code>this</code>关键字</li>\n<li>开始执行构造函数内部的代码</li>\n</ul>\n</li>\n<li><p><code>Object.create</code>创建实例对象</p>\n</li>\n<li><p><code>this</code>关键字:属性或者方法当前所在的对象,函数被赋值给另外一个变量,<code>this</code>的指向也会变</p>\n</li>\n<li><p><code>this</code>的实质:对象以指针形式保存,通过访问这个指针所指的对象,可以得到属性的值,如果属性是个函数呢(引擎会将函数单独保存在内存中,然后将函数的地址赋值给这个属性,所以函数是一个单独的值,需要在不同的上下文执行),这个时候需要引入一个<code>this</code>来指代函数当前的运行环境</p>\n</li>\n<li><p><code>this</code>的使用场合:<code>window</code>,构造函数(指的是实例对象),对象的方法</p>\n</li>\n<li><p>绑定<code>this</code>的方法:</p>\n<ul>\n<li><code>Function.prototype.call</code>:<code>fn.call(thisValue,arg1,arg2,...)</code></li>\n<li><code>Function.prototype.apply</code>:<code>fn.apply(thisValue,[arg1,arg2,...])</code></li>\n<li><code>Function.prototype.bind</code>:返回一个新的绑定到指定对象的函数</li>\n</ul>\n</li>\n<li><p>对象的继承</p>\n<ul>\n<li><p>通过构造函数实例化对象的时候,无法完成公有属性的共享.</p>\n</li>\n<li><p>采用原型对象来解决:每个函数都有一个<code>prototype</code>属性,指向一个对象</p>\n</li>\n<li><p>原型链:所有对象都有自己的原型对象(<code>prototype</code>).一方面,任何一个对象,都可以充当其他对象的原型,另一方面,原型对象也是对象,所以也有自己的原型,因此会形成一个原型链.最终都可以上溯到<code>Object.prototype</code>中去,而它的原型就是<code>null</code>.因此原型链的尽头是<code>null</code></p>\n</li>\n<li><p>原型对象的<code>constructor</code>属性:定义在<code>prototype</code>对象上面,可以被所有实例对象继承,表明了原型对象与构造函数之间的关联关系</p>\n</li>\n<li><p>构造函数的继承:</p>\n<ul>\n<li>在子类的构造函数中,调用父类的构造函数</li>\n<li>让子类的原型指向父类的原型(不要直接赋值)</li>\n</ul>\n</li>\n<li><p>模块:实现特点功能的一组属性和方法的封装</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"异步操作\"><a href=\"#异步操作\" class=\"headerlink\" title=\"异步操作\"></a>异步操作</h3><ul>\n<li><p>JaveScript只在一个线程上运行</p>\n</li>\n<li><p>同步任务和异步任务:利用事件循环<code>Event Loop</code>来实现</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>绕不过去的js.还是得学学了!</p>\n<p><a href=\"https://wangdoc.com/javascript/\" target=\"_blank\" rel=\"noopener\">网道</a></p>\n<p><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰ECMAScript6入门</a></p>","more":"<h3 id=\"入门篇\"><a href=\"#入门篇\" class=\"headerlink\" title=\"入门篇\"></a>入门篇</h3><p>主要讲了js的作用,历史,和基本语法.这部分略过去了</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>介绍了数字(number),字符串(string),布尔(boolean),undefined,null,对象(object)等六种数据类型</p>\n<p><code>typeof</code>运算符:特殊的有,函数返回<code>function</code>,<code>null</code>返回<code>object</code>.</p>\n<ol>\n<li>null/undefined</li>\n</ol>\n<p>说实话,没看明白,大都情况下都是undefined,C里面NULL确实表示0</p>\n<ol start=\"2\">\n<li>boolean</li>\n</ol>\n<p>true / false (undefined,null,false,0,NaN,””/‘’)</p>\n<ol start=\"3\">\n<li>number</li>\n</ol>\n<ul>\n<li>浮点数精度:(1个符号位) + (2-12指数) + (13-64小数)</li>\n<li>数值的范围:超过变成<code>Infinity</code>,<code>Number.MAX_VALUE</code>,<code>Number.MIN_VALUE</code></li>\n<li>整数的科学计数法表示:<code>-3.1e+12</code>,小数点前的数字多于21位和小数点后的零多于5个会自动转为科学计数法</li>\n<li>进制:<code>0x</code>,<code>0b</code>,<code>0o</code></li>\n<li><code>+0</code>/<code>-0</code>:基本相同,例外<code>(1/+0)===(1/-0) // false</code>当它作分母的时候返回<code>+Infinity</code>,<code>-Infinity</code></li>\n<li><code>NaN</code>,<code>Infinity</code></li>\n<li>全局方法:<code>parseInt</code>,<code>parseFloat</code>,<code>isNaN</code>,<code>isFinite</code></li>\n</ul>\n<ol start=\"4\">\n<li>字符串</li>\n</ol>\n<ul>\n<li>字符串可以被视为字符数组来获取其中元素.<code>abc[1] // b</code></li>\n<li>字符集:<code>JavaScript</code>使用<code>Unicode</code>字符集</li>\n<li><code>Base64</code>:把任意值转成<code>0~9</code>,<code>A~Z</code>,<code>a~z</code>,<code>+</code>和<code>/</code>这64个字符组成的可打印字符,不是为了加密,而是为了不出现特殊字符<code>btoa</code>,<code>atob</code>两个函数把<code>ASCII</code>即(<code>Base64</code>)和<code>binary</code>进行互转.</li>\n</ul>\n<ol start=\"5\">\n<li>对象</li>\n</ol>\n<ul>\n<li>创建:<code>var obj={ &#39;foo&#39;:&#39;Hello&#39; , &#39;bar&#39;:&#39;World&#39; }</code></li>\n<li>键名:所有的键都是字符串,所以引号可加可不加(如果不满足标识符的条件则需要加),又被成为属性</li>\n<li>对象的引用:变量名为对对象的引用,两个指向同一个对象的变量,通过其中一个修改了对象的某个属性,也会影响到其他变量</li>\n<li>属性的读取/赋值:<code>obj.p</code>或者<code>obj[&#39;p&#39;]</code>,<code>obj.p=1</code>或者<code>obj[&#39;p&#39;]=1</code></li>\n<li>属性的查看:<code>Object.keys(obj)</code></li>\n<li>属性的删除:<code>delete obj.p</code></li>\n<li>属性是否存在:<code>&#39;p&#39; in obj</code>,<code>obj.hasOwnProperty(&#39;toString&#39;)</code></li>\n<li>属性遍历:<code>for (var i in obj)</code> <code>i</code>为属性名,可以遍历继承过来的属性,只能遍历可遍历的属性</li>\n<li><code>with</code>:操作同一个对象的多个属性,书写方便使用. <code>with</code>操作没有改变作用域,内部依然是当前作用域.因此赋值给不存在的属性是会在当前作用域创建一个变量</li>\n</ul>\n<ol start=\"6\">\n<li>函数(对象的一种)</li>\n</ol>\n<ul>\n<li>声明:<code>function fn()</code>,<code>var fn = function()</code>,<code>new Function</code></li>\n<li>函数名提升:把声明放到最前面执行,但是赋值并没有</li>\n<li>函数的属性:<ul>\n<li><code>name</code>:函数名</li>\n<li><code>length</code>:参数长度,通过这个实现方法重载</li>\n<li><code>toString</code>:返回函数内容的源码</li>\n</ul>\n</li>\n<li><p>函数作用域:</p>\n<ul>\n<li>全局作用域</li>\n<li>函数作用域</li>\n</ul>\n</li>\n<li><p>参数:</p>\n</li>\n<li>闭包:闭包就是可以读取其他函数内部变量的函数,闭包意思懂,但是不知道指的是这个现象还是还是函数.作用:读取函数内部变量,另一个是始终让这些变量保持在内存中</li>\n<li>立即调用的函数表达式(IIFE):<code>(function(){})();</code>或者<code>(function(){}())</code>;</li>\n<li><code>eval</code></li>\n</ul>\n<ol start=\"7\">\n<li>数组(对象的一种)</li>\n</ol>\n<p>基本和对象一样…</p>\n<h3 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h3><p>JavaScript的对象体系基于构造函数<code>constructor</code>和原型链<code>prototype</code> </p>\n<ol>\n<li><p><code>new</code>命令的原理:</p>\n<ul>\n<li>创建一个空对象,作为将要返回的对象实例</li>\n<li>将这个空对象的原型,指向构造函数的<code>prototype</code>属性</li>\n<li>将这个空对象赋值给函数内部的<code>this</code>关键字</li>\n<li>开始执行构造函数内部的代码</li>\n</ul>\n</li>\n<li><p><code>Object.create</code>创建实例对象</p>\n</li>\n<li><p><code>this</code>关键字:属性或者方法当前所在的对象,函数被赋值给另外一个变量,<code>this</code>的指向也会变</p>\n</li>\n<li><p><code>this</code>的实质:对象以指针形式保存,通过访问这个指针所指的对象,可以得到属性的值,如果属性是个函数呢(引擎会将函数单独保存在内存中,然后将函数的地址赋值给这个属性,所以函数是一个单独的值,需要在不同的上下文执行),这个时候需要引入一个<code>this</code>来指代函数当前的运行环境</p>\n</li>\n<li><p><code>this</code>的使用场合:<code>window</code>,构造函数(指的是实例对象),对象的方法</p>\n</li>\n<li><p>绑定<code>this</code>的方法:</p>\n<ul>\n<li><code>Function.prototype.call</code>:<code>fn.call(thisValue,arg1,arg2,...)</code></li>\n<li><code>Function.prototype.apply</code>:<code>fn.apply(thisValue,[arg1,arg2,...])</code></li>\n<li><code>Function.prototype.bind</code>:返回一个新的绑定到指定对象的函数</li>\n</ul>\n</li>\n<li><p>对象的继承</p>\n<ul>\n<li><p>通过构造函数实例化对象的时候,无法完成公有属性的共享.</p>\n</li>\n<li><p>采用原型对象来解决:每个函数都有一个<code>prototype</code>属性,指向一个对象</p>\n</li>\n<li><p>原型链:所有对象都有自己的原型对象(<code>prototype</code>).一方面,任何一个对象,都可以充当其他对象的原型,另一方面,原型对象也是对象,所以也有自己的原型,因此会形成一个原型链.最终都可以上溯到<code>Object.prototype</code>中去,而它的原型就是<code>null</code>.因此原型链的尽头是<code>null</code></p>\n</li>\n<li><p>原型对象的<code>constructor</code>属性:定义在<code>prototype</code>对象上面,可以被所有实例对象继承,表明了原型对象与构造函数之间的关联关系</p>\n</li>\n<li><p>构造函数的继承:</p>\n<ul>\n<li>在子类的构造函数中,调用父类的构造函数</li>\n<li>让子类的原型指向父类的原型(不要直接赋值)</li>\n</ul>\n</li>\n<li><p>模块:实现特点功能的一组属性和方法的封装</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"异步操作\"><a href=\"#异步操作\" class=\"headerlink\" title=\"异步操作\"></a>异步操作</h3><ul>\n<li><p>JaveScript只在一个线程上运行</p>\n</li>\n<li><p>同步任务和异步任务:利用事件循环<code>Event Loop</code>来实现</p>\n</li>\n</ul>"},{"title":"Vim","date":"2018-12-16T07:21:14.000Z","_content":"\n---\ntitle: Vim一些命令 \ndate: 2019-01-12 13:02:52\ntags:\n---\n\nVim一些命令,可能会忘掉的\n\n<!-- more -->\n\n### 折叠\n\n看php源码时看到类似`/\\*\\{\\{\\{\\*/}`的代码,不太明白.用`Vim`打开发现是用来作为代码折叠的.`\\}\\}\\}`(反斜杠是为了使`hexo`不解析,请忽略反斜杠)\n\n记录一下常用操作:\n- `set fdm=marker`:放在`.vimrc`下面每次就不用输入命令了\n- `zf10G`:新建折叠 从当前行到`10`行\n- `zc`:收起\n- `zo`:打开\n- `zM`:收起全部\n- `zR`:打开全部\n- `zj`,`zk`:跳到下一处,上一处折叠\n\n### ctags使用\n\n- `ctags -R` 生成tags文件\n- `set tags=./tags`设置`tags`文件目录\n- `ctrl+]`,`ctrl+o/t`:跳转到定义处,返回到跳转之前\n- `ts`/`tselect`:如果有多个定义,可以使用这个调出定义的面板,选择想要的`tag`.`g]`可以代替这个命令\n- `tnext`:下一处定义\n\n### tab的使用\n\n- `tabnew tabname`:新建一个`tab`\n- `tabc`,`tabo`:关闭当前,关闭其他\n- `tabp`,`tabn`/`gT`,`gt`:跳转到前一个,后一个标签,后面一组不需要使用`:`\n\n### 替换(substitute)\n\n- `1,$s/from/to/g`:从第一行到最后一行,把`from`替换成`to`,`g`,`c`是所有和需要用户确认,没有则替换第一个\n\n### 与系统粘贴板交互\n\n- `\"+y`:将`vim`里面的内容复制到系统剪贴板\n- `\"+p`:将系统剪贴板里面的内容复制到`vim`\n\n### NerdTree\n\n- `m`: 显示菜单 ,可以新建文件\n- `shift + r`:刷新目录\n","source":"_posts/Vim.md","raw":"---\ntitle: Vim\ndate: 2018-12-16 15:21:14\ntags:\n- vim\ncategories:\n- 计算机基础\n---\n\n---\ntitle: Vim一些命令 \ndate: 2019-01-12 13:02:52\ntags:\n---\n\nVim一些命令,可能会忘掉的\n\n<!-- more -->\n\n### 折叠\n\n看php源码时看到类似`/\\*\\{\\{\\{\\*/}`的代码,不太明白.用`Vim`打开发现是用来作为代码折叠的.`\\}\\}\\}`(反斜杠是为了使`hexo`不解析,请忽略反斜杠)\n\n记录一下常用操作:\n- `set fdm=marker`:放在`.vimrc`下面每次就不用输入命令了\n- `zf10G`:新建折叠 从当前行到`10`行\n- `zc`:收起\n- `zo`:打开\n- `zM`:收起全部\n- `zR`:打开全部\n- `zj`,`zk`:跳到下一处,上一处折叠\n\n### ctags使用\n\n- `ctags -R` 生成tags文件\n- `set tags=./tags`设置`tags`文件目录\n- `ctrl+]`,`ctrl+o/t`:跳转到定义处,返回到跳转之前\n- `ts`/`tselect`:如果有多个定义,可以使用这个调出定义的面板,选择想要的`tag`.`g]`可以代替这个命令\n- `tnext`:下一处定义\n\n### tab的使用\n\n- `tabnew tabname`:新建一个`tab`\n- `tabc`,`tabo`:关闭当前,关闭其他\n- `tabp`,`tabn`/`gT`,`gt`:跳转到前一个,后一个标签,后面一组不需要使用`:`\n\n### 替换(substitute)\n\n- `1,$s/from/to/g`:从第一行到最后一行,把`from`替换成`to`,`g`,`c`是所有和需要用户确认,没有则替换第一个\n\n### 与系统粘贴板交互\n\n- `\"+y`:将`vim`里面的内容复制到系统剪贴板\n- `\"+p`:将系统剪贴板里面的内容复制到`vim`\n\n### NerdTree\n\n- `m`: 显示菜单 ,可以新建文件\n- `shift + r`:刷新目录\n","slug":"Vim","published":1,"updated":"2019-01-12T16:26:25.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhbl0006zbovszbag3xk","content":"<hr>\n<p>title: Vim一些命令<br>date: 2019-01-12 13:02:52</p>\n<h2 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags:\"></a>tags:</h2><p>Vim一些命令,可能会忘掉的</p>\n<a id=\"more\"></a>\n<h3 id=\"折叠\"><a href=\"#折叠\" class=\"headerlink\" title=\"折叠\"></a>折叠</h3><p>看php源码时看到类似<code>/\\*\\{\\{\\{\\*/}</code>的代码,不太明白.用<code>Vim</code>打开发现是用来作为代码折叠的.<code>\\}\\}\\}</code>(反斜杠是为了使<code>hexo</code>不解析,请忽略反斜杠)</p>\n<p>记录一下常用操作:</p>\n<ul>\n<li><code>set fdm=marker</code>:放在<code>.vimrc</code>下面每次就不用输入命令了</li>\n<li><code>zf10G</code>:新建折叠 从当前行到<code>10</code>行</li>\n<li><code>zc</code>:收起</li>\n<li><code>zo</code>:打开</li>\n<li><code>zM</code>:收起全部</li>\n<li><code>zR</code>:打开全部</li>\n<li><code>zj</code>,<code>zk</code>:跳到下一处,上一处折叠</li>\n</ul>\n<h3 id=\"ctags使用\"><a href=\"#ctags使用\" class=\"headerlink\" title=\"ctags使用\"></a>ctags使用</h3><ul>\n<li><code>ctags -R</code> 生成tags文件</li>\n<li><code>set tags=./tags</code>设置<code>tags</code>文件目录</li>\n<li><code>ctrl+]</code>,<code>ctrl+o/t</code>:跳转到定义处,返回到跳转之前</li>\n<li><code>ts</code>/<code>tselect</code>:如果有多个定义,可以使用这个调出定义的面板,选择想要的<code>tag</code>.<code>g]</code>可以代替这个命令</li>\n<li><code>tnext</code>:下一处定义</li>\n</ul>\n<h3 id=\"tab的使用\"><a href=\"#tab的使用\" class=\"headerlink\" title=\"tab的使用\"></a>tab的使用</h3><ul>\n<li><code>tabnew tabname</code>:新建一个<code>tab</code></li>\n<li><code>tabc</code>,<code>tabo</code>:关闭当前,关闭其他</li>\n<li><code>tabp</code>,<code>tabn</code>/<code>gT</code>,<code>gt</code>:跳转到前一个,后一个标签,后面一组不需要使用<code>:</code></li>\n</ul>\n<h3 id=\"替换-substitute\"><a href=\"#替换-substitute\" class=\"headerlink\" title=\"替换(substitute)\"></a>替换(substitute)</h3><ul>\n<li><code>1,$s/from/to/g</code>:从第一行到最后一行,把<code>from</code>替换成<code>to</code>,<code>g</code>,<code>c</code>是所有和需要用户确认,没有则替换第一个</li>\n</ul>\n<h3 id=\"与系统粘贴板交互\"><a href=\"#与系统粘贴板交互\" class=\"headerlink\" title=\"与系统粘贴板交互\"></a>与系统粘贴板交互</h3><ul>\n<li><code>&quot;+y</code>:将<code>vim</code>里面的内容复制到系统剪贴板</li>\n<li><code>&quot;+p</code>:将系统剪贴板里面的内容复制到<code>vim</code></li>\n</ul>\n<h3 id=\"NerdTree\"><a href=\"#NerdTree\" class=\"headerlink\" title=\"NerdTree\"></a>NerdTree</h3><ul>\n<li><code>m</code>: 显示菜单 ,可以新建文件</li>\n<li><code>shift + r</code>:刷新目录</li>\n</ul>\n","site":{"data":{}},"excerpt":"<hr>\n<p>title: Vim一些命令<br>date: 2019-01-12 13:02:52</p>\n<h2 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags:\"></a>tags:</h2><p>Vim一些命令,可能会忘掉的</p>","more":"<h3 id=\"折叠\"><a href=\"#折叠\" class=\"headerlink\" title=\"折叠\"></a>折叠</h3><p>看php源码时看到类似<code>/\\*\\{\\{\\{\\*/}</code>的代码,不太明白.用<code>Vim</code>打开发现是用来作为代码折叠的.<code>\\}\\}\\}</code>(反斜杠是为了使<code>hexo</code>不解析,请忽略反斜杠)</p>\n<p>记录一下常用操作:</p>\n<ul>\n<li><code>set fdm=marker</code>:放在<code>.vimrc</code>下面每次就不用输入命令了</li>\n<li><code>zf10G</code>:新建折叠 从当前行到<code>10</code>行</li>\n<li><code>zc</code>:收起</li>\n<li><code>zo</code>:打开</li>\n<li><code>zM</code>:收起全部</li>\n<li><code>zR</code>:打开全部</li>\n<li><code>zj</code>,<code>zk</code>:跳到下一处,上一处折叠</li>\n</ul>\n<h3 id=\"ctags使用\"><a href=\"#ctags使用\" class=\"headerlink\" title=\"ctags使用\"></a>ctags使用</h3><ul>\n<li><code>ctags -R</code> 生成tags文件</li>\n<li><code>set tags=./tags</code>设置<code>tags</code>文件目录</li>\n<li><code>ctrl+]</code>,<code>ctrl+o/t</code>:跳转到定义处,返回到跳转之前</li>\n<li><code>ts</code>/<code>tselect</code>:如果有多个定义,可以使用这个调出定义的面板,选择想要的<code>tag</code>.<code>g]</code>可以代替这个命令</li>\n<li><code>tnext</code>:下一处定义</li>\n</ul>\n<h3 id=\"tab的使用\"><a href=\"#tab的使用\" class=\"headerlink\" title=\"tab的使用\"></a>tab的使用</h3><ul>\n<li><code>tabnew tabname</code>:新建一个<code>tab</code></li>\n<li><code>tabc</code>,<code>tabo</code>:关闭当前,关闭其他</li>\n<li><code>tabp</code>,<code>tabn</code>/<code>gT</code>,<code>gt</code>:跳转到前一个,后一个标签,后面一组不需要使用<code>:</code></li>\n</ul>\n<h3 id=\"替换-substitute\"><a href=\"#替换-substitute\" class=\"headerlink\" title=\"替换(substitute)\"></a>替换(substitute)</h3><ul>\n<li><code>1,$s/from/to/g</code>:从第一行到最后一行,把<code>from</code>替换成<code>to</code>,<code>g</code>,<code>c</code>是所有和需要用户确认,没有则替换第一个</li>\n</ul>\n<h3 id=\"与系统粘贴板交互\"><a href=\"#与系统粘贴板交互\" class=\"headerlink\" title=\"与系统粘贴板交互\"></a>与系统粘贴板交互</h3><ul>\n<li><code>&quot;+y</code>:将<code>vim</code>里面的内容复制到系统剪贴板</li>\n<li><code>&quot;+p</code>:将系统剪贴板里面的内容复制到<code>vim</code></li>\n</ul>\n<h3 id=\"NerdTree\"><a href=\"#NerdTree\" class=\"headerlink\" title=\"NerdTree\"></a>NerdTree</h3><ul>\n<li><code>m</code>: 显示菜单 ,可以新建文件</li>\n<li><code>shift + r</code>:刷新目录</li>\n</ul>"},{"title":"csapp","date":"2018-12-22T08:34:07.000Z","_content":"\n<深入理解计算机系统>笔记,来源于ppt和csapp.\n<!-- more -->\n\n\n### machine basics\n\n`gcc -Og -S xxx.c`:生成汇编代码\n\n`c`代码变成可执行文件步骤:`xx.c`-(compiler)->`xx.s`-(assembler)->`xx.o`-(linker)->`xx`\n\nmove & arithmetic operation:\n - `movq`   `src,dest`  `dest=src`  src can be $const\n - `leaq`   `src,dest`  `dest=address computed by expression src`\n - `addq`   `src,dest`  `dest=desc+src`\n - `subq`   `src,dest`  `dest=desc-src`\n - `imulq`  `src,dest`  `dest=dest*src`\n - `salq`   `src,dest`  `dest=dest<<src`\n - `sarq`   `src,dest`  `dest=dest>>src`\n - `shrq`   `src,dest`  `dest=dest>>src`\n - `xorq`   `src,dest`  `dest=dest^src`\n - `andq`   `src,dest`  `dest=dest&src`\n - `orq`     `src,dest`  `dest=dest|src`\n\naddressing modes:\n - `D(Rb,Ri,S)` : `Mem[Reg[Rb] + S*Reg[Ri] + D]` \n    - D : constant \"displacement\" 1,2,or 4 bytes\n    - Rb: base register (any of 16 integer register)\n    - Ri: index register (any except for `%rsp`)\n    - S : scale( 1,2,4 or 8)\n\ninformation about currently executing program:\n - tmporary data : `%rax`,..\n - location of runtime stack : `%rsp`\n - location of current code control point : `%rip`\n - status of recent tests : CF ,ZF ,SF ,OF\n\n# machine data\n\nsatisfying alignment with structures:\ninitial address & structure length must be multiples of K(largest alignment of any element)\n```c\nstruct S1{\n    char c; //1 byte  \n    int i[2];//8 bytes   initial address should be multiples of 4 so add 3bytes before\n    double v;// 8 bytes with the same reason add 4bytes before\n}\n```\n\n","source":"_posts/csapp.md","raw":"---\ntitle: csapp\ndate: 2018-12-22 16:34:07\ntags:\n- 计算机基础\n- 汇编\ncategories:\n- 计算机基础 \n\n---\n\n<深入理解计算机系统>笔记,来源于ppt和csapp.\n<!-- more -->\n\n\n### machine basics\n\n`gcc -Og -S xxx.c`:生成汇编代码\n\n`c`代码变成可执行文件步骤:`xx.c`-(compiler)->`xx.s`-(assembler)->`xx.o`-(linker)->`xx`\n\nmove & arithmetic operation:\n - `movq`   `src,dest`  `dest=src`  src can be $const\n - `leaq`   `src,dest`  `dest=address computed by expression src`\n - `addq`   `src,dest`  `dest=desc+src`\n - `subq`   `src,dest`  `dest=desc-src`\n - `imulq`  `src,dest`  `dest=dest*src`\n - `salq`   `src,dest`  `dest=dest<<src`\n - `sarq`   `src,dest`  `dest=dest>>src`\n - `shrq`   `src,dest`  `dest=dest>>src`\n - `xorq`   `src,dest`  `dest=dest^src`\n - `andq`   `src,dest`  `dest=dest&src`\n - `orq`     `src,dest`  `dest=dest|src`\n\naddressing modes:\n - `D(Rb,Ri,S)` : `Mem[Reg[Rb] + S*Reg[Ri] + D]` \n    - D : constant \"displacement\" 1,2,or 4 bytes\n    - Rb: base register (any of 16 integer register)\n    - Ri: index register (any except for `%rsp`)\n    - S : scale( 1,2,4 or 8)\n\ninformation about currently executing program:\n - tmporary data : `%rax`,..\n - location of runtime stack : `%rsp`\n - location of current code control point : `%rip`\n - status of recent tests : CF ,ZF ,SF ,OF\n\n# machine data\n\nsatisfying alignment with structures:\ninitial address & structure length must be multiples of K(largest alignment of any element)\n```c\nstruct S1{\n    char c; //1 byte  \n    int i[2];//8 bytes   initial address should be multiples of 4 so add 3bytes before\n    double v;// 8 bytes with the same reason add 4bytes before\n}\n```\n\n","slug":"csapp","published":1,"updated":"2019-01-12T16:26:25.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhbn0008zbovmfql41cb","content":"<p>&lt;深入理解计算机系统&gt;笔记,来源于ppt和csapp.<br><a id=\"more\"></a></p>\n<h3 id=\"machine-basics\"><a href=\"#machine-basics\" class=\"headerlink\" title=\"machine basics\"></a>machine basics</h3><p><code>gcc -Og -S xxx.c</code>:生成汇编代码</p>\n<p><code>c</code>代码变成可执行文件步骤:<code>xx.c</code>-(compiler)-&gt;<code>xx.s</code>-(assembler)-&gt;<code>xx.o</code>-(linker)-&gt;<code>xx</code></p>\n<p>move &amp; arithmetic operation:</p>\n<ul>\n<li><code>movq</code>   <code>src,dest</code>  <code>dest=src</code>  src can be $const</li>\n<li><code>leaq</code>   <code>src,dest</code>  <code>dest=address computed by expression src</code></li>\n<li><code>addq</code>   <code>src,dest</code>  <code>dest=desc+src</code></li>\n<li><code>subq</code>   <code>src,dest</code>  <code>dest=desc-src</code></li>\n<li><code>imulq</code>  <code>src,dest</code>  <code>dest=dest*src</code></li>\n<li><code>salq</code>   <code>src,dest</code>  <code>dest=dest&lt;&lt;src</code></li>\n<li><code>sarq</code>   <code>src,dest</code>  <code>dest=dest&gt;&gt;src</code></li>\n<li><code>shrq</code>   <code>src,dest</code>  <code>dest=dest&gt;&gt;src</code></li>\n<li><code>xorq</code>   <code>src,dest</code>  <code>dest=dest^src</code></li>\n<li><code>andq</code>   <code>src,dest</code>  <code>dest=dest&amp;src</code></li>\n<li><code>orq</code>     <code>src,dest</code>  <code>dest=dest|src</code></li>\n</ul>\n<p>addressing modes:</p>\n<ul>\n<li><code>D(Rb,Ri,S)</code> : <code>Mem[Reg[Rb] + S*Reg[Ri] + D]</code> <ul>\n<li>D : constant “displacement” 1,2,or 4 bytes</li>\n<li>Rb: base register (any of 16 integer register)</li>\n<li>Ri: index register (any except for <code>%rsp</code>)</li>\n<li>S : scale( 1,2,4 or 8)</li>\n</ul>\n</li>\n</ul>\n<p>information about currently executing program:</p>\n<ul>\n<li>tmporary data : <code>%rax</code>,..</li>\n<li>location of runtime stack : <code>%rsp</code></li>\n<li>location of current code control point : <code>%rip</code></li>\n<li>status of recent tests : CF ,ZF ,SF ,OF</li>\n</ul>\n<h1 id=\"machine-data\"><a href=\"#machine-data\" class=\"headerlink\" title=\"machine data\"></a>machine data</h1><p>satisfying alignment with structures:<br>initial address &amp; structure length must be multiples of K(largest alignment of any element)<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S1</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c; <span class=\"comment\">//1 byte  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i[<span class=\"number\">2</span>];<span class=\"comment\">//8 bytes   initial address should be multiples of 4 so add 3bytes before</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> v;<span class=\"comment\">// 8 bytes with the same reason add 4bytes before</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>&lt;深入理解计算机系统&gt;笔记,来源于ppt和csapp.<br>","more":"</p>\n<h3 id=\"machine-basics\"><a href=\"#machine-basics\" class=\"headerlink\" title=\"machine basics\"></a>machine basics</h3><p><code>gcc -Og -S xxx.c</code>:生成汇编代码</p>\n<p><code>c</code>代码变成可执行文件步骤:<code>xx.c</code>-(compiler)-&gt;<code>xx.s</code>-(assembler)-&gt;<code>xx.o</code>-(linker)-&gt;<code>xx</code></p>\n<p>move &amp; arithmetic operation:</p>\n<ul>\n<li><code>movq</code>   <code>src,dest</code>  <code>dest=src</code>  src can be $const</li>\n<li><code>leaq</code>   <code>src,dest</code>  <code>dest=address computed by expression src</code></li>\n<li><code>addq</code>   <code>src,dest</code>  <code>dest=desc+src</code></li>\n<li><code>subq</code>   <code>src,dest</code>  <code>dest=desc-src</code></li>\n<li><code>imulq</code>  <code>src,dest</code>  <code>dest=dest*src</code></li>\n<li><code>salq</code>   <code>src,dest</code>  <code>dest=dest&lt;&lt;src</code></li>\n<li><code>sarq</code>   <code>src,dest</code>  <code>dest=dest&gt;&gt;src</code></li>\n<li><code>shrq</code>   <code>src,dest</code>  <code>dest=dest&gt;&gt;src</code></li>\n<li><code>xorq</code>   <code>src,dest</code>  <code>dest=dest^src</code></li>\n<li><code>andq</code>   <code>src,dest</code>  <code>dest=dest&amp;src</code></li>\n<li><code>orq</code>     <code>src,dest</code>  <code>dest=dest|src</code></li>\n</ul>\n<p>addressing modes:</p>\n<ul>\n<li><code>D(Rb,Ri,S)</code> : <code>Mem[Reg[Rb] + S*Reg[Ri] + D]</code> <ul>\n<li>D : constant “displacement” 1,2,or 4 bytes</li>\n<li>Rb: base register (any of 16 integer register)</li>\n<li>Ri: index register (any except for <code>%rsp</code>)</li>\n<li>S : scale( 1,2,4 or 8)</li>\n</ul>\n</li>\n</ul>\n<p>information about currently executing program:</p>\n<ul>\n<li>tmporary data : <code>%rax</code>,..</li>\n<li>location of runtime stack : <code>%rsp</code></li>\n<li>location of current code control point : <code>%rip</code></li>\n<li>status of recent tests : CF ,ZF ,SF ,OF</li>\n</ul>\n<h1 id=\"machine-data\"><a href=\"#machine-data\" class=\"headerlink\" title=\"machine data\"></a>machine data</h1><p>satisfying alignment with structures:<br>initial address &amp; structure length must be multiples of K(largest alignment of any element)<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S1</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c; <span class=\"comment\">//1 byte  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i[<span class=\"number\">2</span>];<span class=\"comment\">//8 bytes   initial address should be multiples of 4 so add 3bytes before</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> v;<span class=\"comment\">// 8 bytes with the same reason add 4bytes before</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"dp","date":"2018-07-29T08:03:47.000Z","_content":"\n最近做一个活动,给用户发红包,需要给用户按照投资金额来激活红包.\n举个例子:用户有5,3,3,2元的红包,如果用户用户投资了600元需要激活两个3块的红包.即激活红包的总金额的100倍不能超过用户投资金额.\n\n<!-- more -->\n\n## 问题抽象\n\n求一个正整数序列L(a0,a1,...,an)和不超过某一个正整数(M)的最大值.\n\n## 分析\n\n直接将序列排序,无论从大开始选,还是从小开始选,都不能保证得到最优解.采用动态规划来求解:\n- 使用L的前i个元素不超过m的最优解记为dp(i,m)\n- 假设已经达到最优解,即使用L中所有元素,不超过M的结果是dp(n,M)为最优解\n- 反推最优解来源:即分析第n个该不该加进来的问题\n  - dp(n-1,M) 不该加进来,加进来就超过M了\n  - dp(n-1,M-an) + an 该加进来,则解为减去最后一个值的最优解与最后一个值的和\n  - dp(n,M) = max(dp(n-1,M) , dp(n-1,M-an) + an) 这个就是最优解的计算递推公式\n- 写代码\n  - 直接递归 很明显直接递归会重复计算之前已经计算的结果\n  - 使用一个二维数组保存计算的过程 从头开始算 算到最后 \n  - 使用一个滚动数组\n\n## 代码\n\n- 递归\n\n```php\n<?php\nfunction getMax($array,$n,$m){\n    if($m <=0 || $n < 0){\n        return 0;\n    }\n    if($n == 0){\n        if($m >= $array[0]){\n            return $array[0];\n        }\n        return 0;\n    } \n\n    $notUse = getMax($array,$n-1,$m);\n    $use = getMax($array,$n-1,$m-$array[$n-1]) +$array[$n-1];\n    if($use > $m){\n        return 0;\n    }\n    return max($notUse,$use);\n\n}\n\n$array=[5,3,3,2];\n$n=sizeof($array);\n$m=6;\necho getMax($array,$n,$m);\n```\n\n- 利用一个二维数组保存计算出来的值,然后根据结果反推哪些数用到了\n\n```php\n<?php\nfunction getMax($array, $n, $m)\n{\n    for ($i = 0; $i <$n; $i ++) {\n        for ($j=0; $j<=$m; $j++) {\n            if ($j==0) {\n                $retMatrix[$i][$j]=0;\n                continue;\n            }\n            if ($j>=$array[$i]) {\n                $retMatrix[$i][$j] = max(\n                    intval($retMatrix[$i-1][$j]),\n                    intval($retMatrix[$i-1][$j-$array[$i]])+ $array[$i]\n                );\n            } else {\n                $retMatrix[$i][$j] = $retMatrix[$i-1][$j];\n            }\n        }\n    }\n    return $retMatrix;\n}\n\nfunction getTrace($array, $retMatrix, $n, $m)\n{\n    for ($i = $n-1; $i>0; $i --) {\n        if ($retMatrix[$i][$m] == $retMatrix[$i-1][$m]) {\n            // the i-th of the array is not used\n            $ret[$i]=0;\n        } else {\n            // the i-th of the array is used\n            $ret[$i]=1;\n            $m -= $array[$i];\n        }\n    }\n    $ret[0] = $retMatrix[0][$m] > 0 ? 1:0;\n    return $ret;\n}\n\n$array=[5,3,3,2];\n$n=sizeof($array);\n$m=6;\n$retMatrix = getMax($array, $n, $m);\nvar_dump($retMatrix[$n-1][$m]);//int(6)\nvar_dump(getTrace($array, $retMatrix, $n, $m));//array(0,1,1,0)\n```\n\n- 使用滚动数组, dp(n,M) = max(dp(n-1,M) , dp(n-1,M-an) + an), 只与n-1的两个数有关,可以用一个数组dp(M)来保存使用i个数的状态.即dp(M)始终保存使用i个数的最好结果.所以判断是否使用第i个数即判断第i个数的最好结果dp(M),可以表示上一个i-1的最好结果dp(M)即不使用i , 和使用i,dp(M-ai) + ai的较大者\n\n```php\n<?php\n\nfunction getMax($array, $n, $m)\n{\n    for ($i=0; $i<$n; $i++) {\n        for ($j=$m; $j>=$array[$i]; $j--) {\n            $ret[$j] = max($ret[$j], $ret[$j-$array[$i]]+$array[$i]);\n        }\n    }\n    return $ret;\n}\n\n$array=[5,3,3,2];\n$n=sizeof($array);\n$m=6;\n$ret = getMax($array, $n, $m);\nvar_dump($ret);\n```\n \n","source":"_posts/dp.md","raw":"---\ntitle: dp\ndate: 2018-07-29 16:03:47\ntags:\n- 动态规划\n- dp\ncategories:\n- 数据结构与算法\n---\n\n最近做一个活动,给用户发红包,需要给用户按照投资金额来激活红包.\n举个例子:用户有5,3,3,2元的红包,如果用户用户投资了600元需要激活两个3块的红包.即激活红包的总金额的100倍不能超过用户投资金额.\n\n<!-- more -->\n\n## 问题抽象\n\n求一个正整数序列L(a0,a1,...,an)和不超过某一个正整数(M)的最大值.\n\n## 分析\n\n直接将序列排序,无论从大开始选,还是从小开始选,都不能保证得到最优解.采用动态规划来求解:\n- 使用L的前i个元素不超过m的最优解记为dp(i,m)\n- 假设已经达到最优解,即使用L中所有元素,不超过M的结果是dp(n,M)为最优解\n- 反推最优解来源:即分析第n个该不该加进来的问题\n  - dp(n-1,M) 不该加进来,加进来就超过M了\n  - dp(n-1,M-an) + an 该加进来,则解为减去最后一个值的最优解与最后一个值的和\n  - dp(n,M) = max(dp(n-1,M) , dp(n-1,M-an) + an) 这个就是最优解的计算递推公式\n- 写代码\n  - 直接递归 很明显直接递归会重复计算之前已经计算的结果\n  - 使用一个二维数组保存计算的过程 从头开始算 算到最后 \n  - 使用一个滚动数组\n\n## 代码\n\n- 递归\n\n```php\n<?php\nfunction getMax($array,$n,$m){\n    if($m <=0 || $n < 0){\n        return 0;\n    }\n    if($n == 0){\n        if($m >= $array[0]){\n            return $array[0];\n        }\n        return 0;\n    } \n\n    $notUse = getMax($array,$n-1,$m);\n    $use = getMax($array,$n-1,$m-$array[$n-1]) +$array[$n-1];\n    if($use > $m){\n        return 0;\n    }\n    return max($notUse,$use);\n\n}\n\n$array=[5,3,3,2];\n$n=sizeof($array);\n$m=6;\necho getMax($array,$n,$m);\n```\n\n- 利用一个二维数组保存计算出来的值,然后根据结果反推哪些数用到了\n\n```php\n<?php\nfunction getMax($array, $n, $m)\n{\n    for ($i = 0; $i <$n; $i ++) {\n        for ($j=0; $j<=$m; $j++) {\n            if ($j==0) {\n                $retMatrix[$i][$j]=0;\n                continue;\n            }\n            if ($j>=$array[$i]) {\n                $retMatrix[$i][$j] = max(\n                    intval($retMatrix[$i-1][$j]),\n                    intval($retMatrix[$i-1][$j-$array[$i]])+ $array[$i]\n                );\n            } else {\n                $retMatrix[$i][$j] = $retMatrix[$i-1][$j];\n            }\n        }\n    }\n    return $retMatrix;\n}\n\nfunction getTrace($array, $retMatrix, $n, $m)\n{\n    for ($i = $n-1; $i>0; $i --) {\n        if ($retMatrix[$i][$m] == $retMatrix[$i-1][$m]) {\n            // the i-th of the array is not used\n            $ret[$i]=0;\n        } else {\n            // the i-th of the array is used\n            $ret[$i]=1;\n            $m -= $array[$i];\n        }\n    }\n    $ret[0] = $retMatrix[0][$m] > 0 ? 1:0;\n    return $ret;\n}\n\n$array=[5,3,3,2];\n$n=sizeof($array);\n$m=6;\n$retMatrix = getMax($array, $n, $m);\nvar_dump($retMatrix[$n-1][$m]);//int(6)\nvar_dump(getTrace($array, $retMatrix, $n, $m));//array(0,1,1,0)\n```\n\n- 使用滚动数组, dp(n,M) = max(dp(n-1,M) , dp(n-1,M-an) + an), 只与n-1的两个数有关,可以用一个数组dp(M)来保存使用i个数的状态.即dp(M)始终保存使用i个数的最好结果.所以判断是否使用第i个数即判断第i个数的最好结果dp(M),可以表示上一个i-1的最好结果dp(M)即不使用i , 和使用i,dp(M-ai) + ai的较大者\n\n```php\n<?php\n\nfunction getMax($array, $n, $m)\n{\n    for ($i=0; $i<$n; $i++) {\n        for ($j=$m; $j>=$array[$i]; $j--) {\n            $ret[$j] = max($ret[$j], $ret[$j-$array[$i]]+$array[$i]);\n        }\n    }\n    return $ret;\n}\n\n$array=[5,3,3,2];\n$n=sizeof($array);\n$m=6;\n$ret = getMax($array, $n, $m);\nvar_dump($ret);\n```\n \n","slug":"dp","published":1,"updated":"2019-01-12T16:26:25.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhbo0009zbovfsh3p2xz","content":"<p>最近做一个活动,给用户发红包,需要给用户按照投资金额来激活红包.<br>举个例子:用户有5,3,3,2元的红包,如果用户用户投资了600元需要激活两个3块的红包.即激活红包的总金额的100倍不能超过用户投资金额.</p>\n<a id=\"more\"></a>\n<h2 id=\"问题抽象\"><a href=\"#问题抽象\" class=\"headerlink\" title=\"问题抽象\"></a>问题抽象</h2><p>求一个正整数序列L(a0,a1,…,an)和不超过某一个正整数(M)的最大值.</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>直接将序列排序,无论从大开始选,还是从小开始选,都不能保证得到最优解.采用动态规划来求解:</p>\n<ul>\n<li>使用L的前i个元素不超过m的最优解记为dp(i,m)</li>\n<li>假设已经达到最优解,即使用L中所有元素,不超过M的结果是dp(n,M)为最优解</li>\n<li>反推最优解来源:即分析第n个该不该加进来的问题<ul>\n<li>dp(n-1,M) 不该加进来,加进来就超过M了</li>\n<li>dp(n-1,M-an) + an 该加进来,则解为减去最后一个值的最优解与最后一个值的和</li>\n<li>dp(n,M) = max(dp(n-1,M) , dp(n-1,M-an) + an) 这个就是最优解的计算递推公式</li>\n</ul>\n</li>\n<li>写代码<ul>\n<li>直接递归 很明显直接递归会重复计算之前已经计算的结果</li>\n<li>使用一个二维数组保存计算的过程 从头开始算 算到最后 </li>\n<li>使用一个滚动数组</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><ul>\n<li>递归</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMax</span><span class=\"params\">($array,$n,$m)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($m &lt;=<span class=\"number\">0</span> || $n &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($n == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($m &gt;= $array[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $array[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    $notUse = getMax($array,$n<span class=\"number\">-1</span>,$m);</span><br><span class=\"line\">    $use = getMax($array,$n<span class=\"number\">-1</span>,$m-$array[$n<span class=\"number\">-1</span>]) +$array[$n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($use &gt; $m)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max($notUse,$use);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array=[<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">$n=sizeof($array);</span><br><span class=\"line\">$m=<span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> getMax($array,$n,$m);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用一个二维数组保存计算出来的值,然后根据结果反推哪些数用到了</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMax</span><span class=\"params\">($array, $n, $m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt;$n; $i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($j=<span class=\"number\">0</span>; $j&lt;=$m; $j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($j==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                $retMatrix[$i][$j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($j&gt;=$array[$i]) &#123;</span><br><span class=\"line\">                $retMatrix[$i][$j] = max(</span><br><span class=\"line\">                    intval($retMatrix[$i<span class=\"number\">-1</span>][$j]),</span><br><span class=\"line\">                    intval($retMatrix[$i<span class=\"number\">-1</span>][$j-$array[$i]])+ $array[$i]</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                $retMatrix[$i][$j] = $retMatrix[$i<span class=\"number\">-1</span>][$j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $retMatrix;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTrace</span><span class=\"params\">($array, $retMatrix, $n, $m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = $n<span class=\"number\">-1</span>; $i&gt;<span class=\"number\">0</span>; $i --) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($retMatrix[$i][$m] == $retMatrix[$i<span class=\"number\">-1</span>][$m]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// the i-th of the array is not used</span></span><br><span class=\"line\">            $ret[$i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// the i-th of the array is used</span></span><br><span class=\"line\">            $ret[$i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            $m -= $array[$i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $ret[<span class=\"number\">0</span>] = $retMatrix[<span class=\"number\">0</span>][$m] &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array=[<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">$n=sizeof($array);</span><br><span class=\"line\">$m=<span class=\"number\">6</span>;</span><br><span class=\"line\">$retMatrix = getMax($array, $n, $m);</span><br><span class=\"line\">var_dump($retMatrix[$n<span class=\"number\">-1</span>][$m]);<span class=\"comment\">//int(6)</span></span><br><span class=\"line\">var_dump(getTrace($array, $retMatrix, $n, $m));<span class=\"comment\">//array(0,1,1,0)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用滚动数组, dp(n,M) = max(dp(n-1,M) , dp(n-1,M-an) + an), 只与n-1的两个数有关,可以用一个数组dp(M)来保存使用i个数的状态.即dp(M)始终保存使用i个数的最好结果.所以判断是否使用第i个数即判断第i个数的最好结果dp(M),可以表示上一个i-1的最好结果dp(M)即不使用i , 和使用i,dp(M-ai) + ai的较大者</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMax</span><span class=\"params\">($array, $n, $m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i&lt;$n; $i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($j=$m; $j&gt;=$array[$i]; $j--) &#123;</span><br><span class=\"line\">            $ret[$j] = max($ret[$j], $ret[$j-$array[$i]]+$array[$i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array=[<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">$n=sizeof($array);</span><br><span class=\"line\">$m=<span class=\"number\">6</span>;</span><br><span class=\"line\">$ret = getMax($array, $n, $m);</span><br><span class=\"line\">var_dump($ret);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>最近做一个活动,给用户发红包,需要给用户按照投资金额来激活红包.<br>举个例子:用户有5,3,3,2元的红包,如果用户用户投资了600元需要激活两个3块的红包.即激活红包的总金额的100倍不能超过用户投资金额.</p>","more":"<h2 id=\"问题抽象\"><a href=\"#问题抽象\" class=\"headerlink\" title=\"问题抽象\"></a>问题抽象</h2><p>求一个正整数序列L(a0,a1,…,an)和不超过某一个正整数(M)的最大值.</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>直接将序列排序,无论从大开始选,还是从小开始选,都不能保证得到最优解.采用动态规划来求解:</p>\n<ul>\n<li>使用L的前i个元素不超过m的最优解记为dp(i,m)</li>\n<li>假设已经达到最优解,即使用L中所有元素,不超过M的结果是dp(n,M)为最优解</li>\n<li>反推最优解来源:即分析第n个该不该加进来的问题<ul>\n<li>dp(n-1,M) 不该加进来,加进来就超过M了</li>\n<li>dp(n-1,M-an) + an 该加进来,则解为减去最后一个值的最优解与最后一个值的和</li>\n<li>dp(n,M) = max(dp(n-1,M) , dp(n-1,M-an) + an) 这个就是最优解的计算递推公式</li>\n</ul>\n</li>\n<li>写代码<ul>\n<li>直接递归 很明显直接递归会重复计算之前已经计算的结果</li>\n<li>使用一个二维数组保存计算的过程 从头开始算 算到最后 </li>\n<li>使用一个滚动数组</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><ul>\n<li>递归</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMax</span><span class=\"params\">($array,$n,$m)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($m &lt;=<span class=\"number\">0</span> || $n &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($n == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($m &gt;= $array[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $array[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    $notUse = getMax($array,$n<span class=\"number\">-1</span>,$m);</span><br><span class=\"line\">    $use = getMax($array,$n<span class=\"number\">-1</span>,$m-$array[$n<span class=\"number\">-1</span>]) +$array[$n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($use &gt; $m)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max($notUse,$use);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array=[<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">$n=sizeof($array);</span><br><span class=\"line\">$m=<span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> getMax($array,$n,$m);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用一个二维数组保存计算出来的值,然后根据结果反推哪些数用到了</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMax</span><span class=\"params\">($array, $n, $m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt;$n; $i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($j=<span class=\"number\">0</span>; $j&lt;=$m; $j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($j==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                $retMatrix[$i][$j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($j&gt;=$array[$i]) &#123;</span><br><span class=\"line\">                $retMatrix[$i][$j] = max(</span><br><span class=\"line\">                    intval($retMatrix[$i<span class=\"number\">-1</span>][$j]),</span><br><span class=\"line\">                    intval($retMatrix[$i<span class=\"number\">-1</span>][$j-$array[$i]])+ $array[$i]</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                $retMatrix[$i][$j] = $retMatrix[$i<span class=\"number\">-1</span>][$j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $retMatrix;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTrace</span><span class=\"params\">($array, $retMatrix, $n, $m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = $n<span class=\"number\">-1</span>; $i&gt;<span class=\"number\">0</span>; $i --) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($retMatrix[$i][$m] == $retMatrix[$i<span class=\"number\">-1</span>][$m]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// the i-th of the array is not used</span></span><br><span class=\"line\">            $ret[$i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// the i-th of the array is used</span></span><br><span class=\"line\">            $ret[$i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            $m -= $array[$i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $ret[<span class=\"number\">0</span>] = $retMatrix[<span class=\"number\">0</span>][$m] &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array=[<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">$n=sizeof($array);</span><br><span class=\"line\">$m=<span class=\"number\">6</span>;</span><br><span class=\"line\">$retMatrix = getMax($array, $n, $m);</span><br><span class=\"line\">var_dump($retMatrix[$n<span class=\"number\">-1</span>][$m]);<span class=\"comment\">//int(6)</span></span><br><span class=\"line\">var_dump(getTrace($array, $retMatrix, $n, $m));<span class=\"comment\">//array(0,1,1,0)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用滚动数组, dp(n,M) = max(dp(n-1,M) , dp(n-1,M-an) + an), 只与n-1的两个数有关,可以用一个数组dp(M)来保存使用i个数的状态.即dp(M)始终保存使用i个数的最好结果.所以判断是否使用第i个数即判断第i个数的最好结果dp(M),可以表示上一个i-1的最好结果dp(M)即不使用i , 和使用i,dp(M-ai) + ai的较大者</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMax</span><span class=\"params\">($array, $n, $m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i&lt;$n; $i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($j=$m; $j&gt;=$array[$i]; $j--) &#123;</span><br><span class=\"line\">            $ret[$j] = max($ret[$j], $ret[$j-$array[$i]]+$array[$i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array=[<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">$n=sizeof($array);</span><br><span class=\"line\">$m=<span class=\"number\">6</span>;</span><br><span class=\"line\">$ret = getMax($array, $n, $m);</span><br><span class=\"line\">var_dump($ret);</span><br></pre></td></tr></table></figure>"},{"title":"laravel事件分发","date":"2018-11-13T22:47:56.000Z","_content":"\n之前分析了一个请求的生命周期以及laravel路由分发,那么现在来看一下laravel中的事件分发是如何实现的.\n\n<!-- more -->\n\n\n### 加载`EventServiceProvider`类\n和路由分发类似,在`Kernel`里面会注册`EventServiceProvider`类并调用`boot()`.下面看一下这个方法.\n\n```php\n/*  Illuminate\\Foundation\\Support\\Provider\\EventServiceProvider */\n\n/**\n* The event handler mappings for the application.\n*\n* @var array\n*/\nprotected $listen = [];\n\n/**\n * The subscriber classes to register.\n *\n * @var array\n */\nprotected $subscribe = [];\n\n/**\n * Register the application's event listeners.\n *\n * @return void\n */\npublic function boot()\n{\n    foreach ($this->listens() as $event => $listeners) {\n        foreach ($listeners as $listener) {\n            Event::listen($event, $listener);\n        }\n    }\n\n    foreach ($this->subscribe as $subscriber) {\n        Event::subscribe($subscriber);\n    }\n}\n\n/*  Illuminate\\Events\\Dispatcher */\n\n/**\n * Register an event listener with the dispatcher.\n *\n * @param  string|array  $events\n * @param  mixed  $listener\n * @return void\n */\npublic function listen($events, $listener)\n{\n\n    foreach ((array) $events as $event) {\n        if (Str::contains($event, '*')) {\n            $this->setupWildcardListen($event, $listener);\n        } else {\n            $this->listeners[$event][] = $this->makeListener($listener);\n        }\n    }\n}\n\n/**\n * Register an event subscriber with the dispatcher.\n *\n * @param  object|string  $subscriber\n * @return void\n */\npublic function subscribe($subscriber)\n{\n    $subscriber = $this->resolveSubscriber($subscriber);\n\n    $subscriber->subscribe($this);\n}\n\n/**\n * Fire an event and call the listeners.\n *\n * @param  string|object  $event\n * @param  mixed  $payload\n * @param  bool  $halt\n * @return array|null\n */\npublic function fire($event, $payload = [], $halt = false)\n{\n    return $this->dispatch($event, $payload, $halt);\n}\n\n/**\n * Fire an event and call the listeners.\n *\n * @param  string|object  $event\n * @param  mixed  $payload\n * @param  bool  $halt\n * @return array|null\n */\npublic function dispatch($event, $payload = [], $halt = false)\n{\n    // When the given \"event\" is actually an object we will assume it is an event\n    // object and use the class as the event name and this event itself as the\n    // payload to the handler, which makes object based events quite simple.\n    list($event, $payload) = $this->parseEventAndPayload(\n        $event, $payload\n    );\n\n    if ($this->shouldBroadcast($payload)) {\n        $this->broadcastEvent($payload[0]);\n    }\n\n    $responses = [];\n\n    foreach ($this->getListeners($event) as $listener) {\n        $response = $listener($event, $payload);\n\n        // If a response is returned from the listener and event halting is enabled\n        // we will just return this response, and not call the rest of the event\n        // listeners. Otherwise we will add the response on the response list.\n        if ($halt && ! is_null($response)) {\n            return $response;\n        }\n\n        // If a boolean false is returned from a listener, we will stop propagating\n        // the event to any further listeners down in the chain, else we keep on\n        // looping through the listeners and firing every one in our sequence.\n        if ($response === false) {\n            break;\n        }\n\n        $responses[] = $response;\n    }\n\n    return $halt ? null : $responses;\n}\n```\n`App\\Providers\\EventServiceProvider`继承自`Illuminate\\Foundation\\Support\\Provider\\EventServiceProvider`,它可以覆盖的父类的`$listen`和`$subscribe`.它的`boot()`方法调用了父类的`boot()`方法,为每个`$listen`里面的事件绑定了监听方法.并且执行每个`$subscribe`里面的`subscribe()`方法.\n\n`Event`为`Illuminate\\Events\\Dispatcher`的`Facade`.里面的`listen()`方法把`listener`变成闭包放到成员里面.需要使用`fire()`调用,而`subscribe()`方法则直接调用`listener`的`subscribe()`方法.\n","source":"_posts/laravel事件分发.md","raw":"---\ntitle: laravel事件分发\ndate: 2018-11-14 06:47:56\ntags: \n- laravel\n- php\n\ncategories:\n- 源码分析\n---\n\n之前分析了一个请求的生命周期以及laravel路由分发,那么现在来看一下laravel中的事件分发是如何实现的.\n\n<!-- more -->\n\n\n### 加载`EventServiceProvider`类\n和路由分发类似,在`Kernel`里面会注册`EventServiceProvider`类并调用`boot()`.下面看一下这个方法.\n\n```php\n/*  Illuminate\\Foundation\\Support\\Provider\\EventServiceProvider */\n\n/**\n* The event handler mappings for the application.\n*\n* @var array\n*/\nprotected $listen = [];\n\n/**\n * The subscriber classes to register.\n *\n * @var array\n */\nprotected $subscribe = [];\n\n/**\n * Register the application's event listeners.\n *\n * @return void\n */\npublic function boot()\n{\n    foreach ($this->listens() as $event => $listeners) {\n        foreach ($listeners as $listener) {\n            Event::listen($event, $listener);\n        }\n    }\n\n    foreach ($this->subscribe as $subscriber) {\n        Event::subscribe($subscriber);\n    }\n}\n\n/*  Illuminate\\Events\\Dispatcher */\n\n/**\n * Register an event listener with the dispatcher.\n *\n * @param  string|array  $events\n * @param  mixed  $listener\n * @return void\n */\npublic function listen($events, $listener)\n{\n\n    foreach ((array) $events as $event) {\n        if (Str::contains($event, '*')) {\n            $this->setupWildcardListen($event, $listener);\n        } else {\n            $this->listeners[$event][] = $this->makeListener($listener);\n        }\n    }\n}\n\n/**\n * Register an event subscriber with the dispatcher.\n *\n * @param  object|string  $subscriber\n * @return void\n */\npublic function subscribe($subscriber)\n{\n    $subscriber = $this->resolveSubscriber($subscriber);\n\n    $subscriber->subscribe($this);\n}\n\n/**\n * Fire an event and call the listeners.\n *\n * @param  string|object  $event\n * @param  mixed  $payload\n * @param  bool  $halt\n * @return array|null\n */\npublic function fire($event, $payload = [], $halt = false)\n{\n    return $this->dispatch($event, $payload, $halt);\n}\n\n/**\n * Fire an event and call the listeners.\n *\n * @param  string|object  $event\n * @param  mixed  $payload\n * @param  bool  $halt\n * @return array|null\n */\npublic function dispatch($event, $payload = [], $halt = false)\n{\n    // When the given \"event\" is actually an object we will assume it is an event\n    // object and use the class as the event name and this event itself as the\n    // payload to the handler, which makes object based events quite simple.\n    list($event, $payload) = $this->parseEventAndPayload(\n        $event, $payload\n    );\n\n    if ($this->shouldBroadcast($payload)) {\n        $this->broadcastEvent($payload[0]);\n    }\n\n    $responses = [];\n\n    foreach ($this->getListeners($event) as $listener) {\n        $response = $listener($event, $payload);\n\n        // If a response is returned from the listener and event halting is enabled\n        // we will just return this response, and not call the rest of the event\n        // listeners. Otherwise we will add the response on the response list.\n        if ($halt && ! is_null($response)) {\n            return $response;\n        }\n\n        // If a boolean false is returned from a listener, we will stop propagating\n        // the event to any further listeners down in the chain, else we keep on\n        // looping through the listeners and firing every one in our sequence.\n        if ($response === false) {\n            break;\n        }\n\n        $responses[] = $response;\n    }\n\n    return $halt ? null : $responses;\n}\n```\n`App\\Providers\\EventServiceProvider`继承自`Illuminate\\Foundation\\Support\\Provider\\EventServiceProvider`,它可以覆盖的父类的`$listen`和`$subscribe`.它的`boot()`方法调用了父类的`boot()`方法,为每个`$listen`里面的事件绑定了监听方法.并且执行每个`$subscribe`里面的`subscribe()`方法.\n\n`Event`为`Illuminate\\Events\\Dispatcher`的`Facade`.里面的`listen()`方法把`listener`变成闭包放到成员里面.需要使用`fire()`调用,而`subscribe()`方法则直接调用`listener`的`subscribe()`方法.\n","slug":"laravel事件分发","published":1,"updated":"2019-01-12T16:26:25.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhbs000dzbov1fwqr6lr","content":"<p>之前分析了一个请求的生命周期以及laravel路由分发,那么现在来看一下laravel中的事件分发是如何实现的.</p>\n<a id=\"more\"></a>\n<h3 id=\"加载EventServiceProvider类\"><a href=\"#加载EventServiceProvider类\" class=\"headerlink\" title=\"加载EventServiceProvider类\"></a>加载<code>EventServiceProvider</code>类</h3><p>和路由分发类似,在<code>Kernel</code>里面会注册<code>EventServiceProvider</code>类并调用<code>boot()</code>.下面看一下这个方法.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*  Illuminate\\Foundation\\Support\\Provider\\EventServiceProvider */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* The event handler mappings for the application.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $listen = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The subscriber classes to register.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $subscribe = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Register the application's event listeners.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boot</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;listens() <span class=\"keyword\">as</span> $event =&gt; $listeners) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($listeners <span class=\"keyword\">as</span> $listener) &#123;</span><br><span class=\"line\">            Event::listen($event, $listener);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;subscribe <span class=\"keyword\">as</span> $subscriber) &#123;</span><br><span class=\"line\">        Event::subscribe($subscriber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  Illuminate\\Events\\Dispatcher */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Register an event listener with the dispatcher.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string|array  $events</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  mixed  $listener</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listen</span><span class=\"params\">($events, $listener)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ((<span class=\"keyword\">array</span>) $events <span class=\"keyword\">as</span> $event) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Str::contains($event, <span class=\"string\">'*'</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;setupWildcardListen($event, $listener);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;listeners[$event][] = <span class=\"keyword\">$this</span>-&gt;makeListener($listener);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Register an event subscriber with the dispatcher.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  object|string  $subscriber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span><span class=\"params\">($subscriber)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $subscriber = <span class=\"keyword\">$this</span>-&gt;resolveSubscriber($subscriber);</span><br><span class=\"line\"></span><br><span class=\"line\">    $subscriber-&gt;subscribe(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Fire an event and call the listeners.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string|object  $event</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  mixed  $payload</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  bool  $halt</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array|null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fire</span><span class=\"params\">($event, $payload = [], $halt = false)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;dispatch($event, $payload, $halt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Fire an event and call the listeners.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string|object  $event</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  mixed  $payload</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  bool  $halt</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array|null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span><span class=\"params\">($event, $payload = [], $halt = false)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// When the given \"event\" is actually an object we will assume it is an event</span></span><br><span class=\"line\">    <span class=\"comment\">// object and use the class as the event name and this event itself as the</span></span><br><span class=\"line\">    <span class=\"comment\">// payload to the handler, which makes object based events quite simple.</span></span><br><span class=\"line\">    <span class=\"keyword\">list</span>($event, $payload) = <span class=\"keyword\">$this</span>-&gt;parseEventAndPayload(</span><br><span class=\"line\">        $event, $payload</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;shouldBroadcast($payload)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;broadcastEvent($payload[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $responses = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;getListeners($event) <span class=\"keyword\">as</span> $listener) &#123;</span><br><span class=\"line\">        $response = $listener($event, $payload);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If a response is returned from the listener and event halting is enabled</span></span><br><span class=\"line\">        <span class=\"comment\">// we will just return this response, and not call the rest of the event</span></span><br><span class=\"line\">        <span class=\"comment\">// listeners. Otherwise we will add the response on the response list.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($halt &amp;&amp; ! is_null($response)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $response;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If a boolean false is returned from a listener, we will stop propagating</span></span><br><span class=\"line\">        <span class=\"comment\">// the event to any further listeners down in the chain, else we keep on</span></span><br><span class=\"line\">        <span class=\"comment\">// looping through the listeners and firing every one in our sequence.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($response === <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $responses[] = $response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $halt ? <span class=\"keyword\">null</span> : $responses;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>App\\Providers\\EventServiceProvider</code>继承自<code>Illuminate\\Foundation\\Support\\Provider\\EventServiceProvider</code>,它可以覆盖的父类的<code>$listen</code>和<code>$subscribe</code>.它的<code>boot()</code>方法调用了父类的<code>boot()</code>方法,为每个<code>$listen</code>里面的事件绑定了监听方法.并且执行每个<code>$subscribe</code>里面的<code>subscribe()</code>方法.</p>\n<p><code>Event</code>为<code>Illuminate\\Events\\Dispatcher</code>的<code>Facade</code>.里面的<code>listen()</code>方法把<code>listener</code>变成闭包放到成员里面.需要使用<code>fire()</code>调用,而<code>subscribe()</code>方法则直接调用<code>listener</code>的<code>subscribe()</code>方法.</p>\n","site":{"data":{}},"excerpt":"<p>之前分析了一个请求的生命周期以及laravel路由分发,那么现在来看一下laravel中的事件分发是如何实现的.</p>","more":"<h3 id=\"加载EventServiceProvider类\"><a href=\"#加载EventServiceProvider类\" class=\"headerlink\" title=\"加载EventServiceProvider类\"></a>加载<code>EventServiceProvider</code>类</h3><p>和路由分发类似,在<code>Kernel</code>里面会注册<code>EventServiceProvider</code>类并调用<code>boot()</code>.下面看一下这个方法.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*  Illuminate\\Foundation\\Support\\Provider\\EventServiceProvider */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* The event handler mappings for the application.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $listen = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The subscriber classes to register.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $subscribe = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Register the application's event listeners.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boot</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;listens() <span class=\"keyword\">as</span> $event =&gt; $listeners) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($listeners <span class=\"keyword\">as</span> $listener) &#123;</span><br><span class=\"line\">            Event::listen($event, $listener);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;subscribe <span class=\"keyword\">as</span> $subscriber) &#123;</span><br><span class=\"line\">        Event::subscribe($subscriber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  Illuminate\\Events\\Dispatcher */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Register an event listener with the dispatcher.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string|array  $events</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  mixed  $listener</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listen</span><span class=\"params\">($events, $listener)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ((<span class=\"keyword\">array</span>) $events <span class=\"keyword\">as</span> $event) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Str::contains($event, <span class=\"string\">'*'</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;setupWildcardListen($event, $listener);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;listeners[$event][] = <span class=\"keyword\">$this</span>-&gt;makeListener($listener);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Register an event subscriber with the dispatcher.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  object|string  $subscriber</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">subscribe</span><span class=\"params\">($subscriber)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $subscriber = <span class=\"keyword\">$this</span>-&gt;resolveSubscriber($subscriber);</span><br><span class=\"line\"></span><br><span class=\"line\">    $subscriber-&gt;subscribe(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Fire an event and call the listeners.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string|object  $event</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  mixed  $payload</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  bool  $halt</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array|null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fire</span><span class=\"params\">($event, $payload = [], $halt = false)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;dispatch($event, $payload, $halt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Fire an event and call the listeners.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string|object  $event</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  mixed  $payload</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  bool  $halt</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array|null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span><span class=\"params\">($event, $payload = [], $halt = false)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// When the given \"event\" is actually an object we will assume it is an event</span></span><br><span class=\"line\">    <span class=\"comment\">// object and use the class as the event name and this event itself as the</span></span><br><span class=\"line\">    <span class=\"comment\">// payload to the handler, which makes object based events quite simple.</span></span><br><span class=\"line\">    <span class=\"keyword\">list</span>($event, $payload) = <span class=\"keyword\">$this</span>-&gt;parseEventAndPayload(</span><br><span class=\"line\">        $event, $payload</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;shouldBroadcast($payload)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;broadcastEvent($payload[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $responses = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;getListeners($event) <span class=\"keyword\">as</span> $listener) &#123;</span><br><span class=\"line\">        $response = $listener($event, $payload);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If a response is returned from the listener and event halting is enabled</span></span><br><span class=\"line\">        <span class=\"comment\">// we will just return this response, and not call the rest of the event</span></span><br><span class=\"line\">        <span class=\"comment\">// listeners. Otherwise we will add the response on the response list.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($halt &amp;&amp; ! is_null($response)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $response;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If a boolean false is returned from a listener, we will stop propagating</span></span><br><span class=\"line\">        <span class=\"comment\">// the event to any further listeners down in the chain, else we keep on</span></span><br><span class=\"line\">        <span class=\"comment\">// looping through the listeners and firing every one in our sequence.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($response === <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $responses[] = $response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $halt ? <span class=\"keyword\">null</span> : $responses;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>App\\Providers\\EventServiceProvider</code>继承自<code>Illuminate\\Foundation\\Support\\Provider\\EventServiceProvider</code>,它可以覆盖的父类的<code>$listen</code>和<code>$subscribe</code>.它的<code>boot()</code>方法调用了父类的<code>boot()</code>方法,为每个<code>$listen</code>里面的事件绑定了监听方法.并且执行每个<code>$subscribe</code>里面的<code>subscribe()</code>方法.</p>\n<p><code>Event</code>为<code>Illuminate\\Events\\Dispatcher</code>的<code>Facade</code>.里面的<code>listen()</code>方法把<code>listener</code>变成闭包放到成员里面.需要使用<code>fire()</code>调用,而<code>subscribe()</code>方法则直接调用<code>listener</code>的<code>subscribe()</code>方法.</p>"},{"title":"laravel相关","date":"2018-11-29T00:54:10.000Z","_content":"\n新项目使用了laravel,分析一下源码.\n\n<!-- more -->\n\n## 一个请求完整的流程\n\n### 先从`public\\index.php`入手:\n\n```php \n$response = $kernel->handle(\n    $request = Illuminate\\Http\\Request::capture()\n);\n```\n\n### 继续看看`Illuminate\\Foundation\\Http\\Kernel`handle方法\n\n```php\npublic function handle($request)\n{\n    try {\n        $request->enableHttpMethodParameterOverride();\n\n        $response = $this->sendRequestThroughRouter($request);\n    } catch (Exception $e) {\n        $this->reportException($e);\n\n        $response = $this->renderException($request, $e);\n    } catch (Throwable $e) {\n        $this->reportException($e = new FatalThrowableError($e));\n\n        $response = $this->renderException($request, $e);\n    }\n\n    $this->app['events']->dispatch(\n        new Events\\RequestHandled($request, $response)\n    );\n\n    return $response;\n}\n```\n\n可以看到handle方法首先把请求通过路由`sendRequestThroughRouter`,然后再把事件进行分发`dispatch`\n\n\n```php\nprotected function sendRequestThroughRouter($request)\n{\n    $this->app->instance('request', $request);\n\n    Facade::clearResolvedInstance('request');\n\n    $this->bootstrap();\n\n    return (new Pipeline($this->app))\n                ->send($request)\n                ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware)\n                ->then($this->dispatchToRouter());\n}\n```\n\n这一段大概意思就是把请求先通过中间件,最后到达指定的路由\n\n继续\n\n```php\nprotected function dispatchToRouter()\n{\n    return function ($request) {\n        $this->app->instance('request', $request);\n\n        return $this->router->dispatch($request);\n    };\n}\n```\n\n### 继续 `Illuminate\\Routing\\Router`\n\n```php\npublic function dispatch(Request $request)\n{\n    $this->currentRequest = $request;\n\n    return $this->dispatchToRoute($request);\n}\n```\n\n```php\npublic function dispatchToRoute(Request $request)\n{\n      // First we will find a route that matches this request. We will also set the\n      // route resolver on the request so middlewares assigned to the route will\n      // receive access to this route instance for checking of the parameters.\n      $route = $this->findRoute($request);\n\n      $request->setRouteResolver(function () use ($route) {\n          return $route;\n      });\n\n      $this->events->dispatch(new Events\\RouteMatched($route, $request));\n\n      $response = $this->runRouteWithinStack($route, $request);\n\n      return $this->prepareResponse($request, $response);\n}\n```\n\n\n```php\nprotected function findRoute($request)\n{\n    $this->current = $route = $this->routes->match($request);\n\n    $this->container->instance(Route::class, $route);\n\n    return $route;\n}\n```\n\n### `Illuminate\\Routing\\RouteCollection` 的match方法\n\n```php\npublic function match(Request $request)\n{\n    $routes = $this->get($request->getMethod());\n\n    // First, we will see if we can find a matching route for this current request\n    // method. If we can, great, we can just return it so that it can be called\n    // by the consumer. Otherwise we will check for routes with another verb.\n    $route = $this->matchAgainstRoutes($routes, $request);\n\n    if (! is_null($route)) {\n        return $route->bind($request);\n    }\n\n    // If no route was found we will now check if a matching route is specified by\n    // another HTTP verb. If it is we will need to throw a MethodNotAllowed and\n    // inform the user agent of which HTTP verb it should use for this route.\n    $others = $this->checkForAlternateVerbs($request);\n\n    if (count($others) > 0) {\n        return $this->getRouteForMethods($request, $others);\n    }\n\n    throw new NotFoundHttpException;\n}\n```\n\n\n\n```php\nprotected function matchAgainstRoutes(array $routes, $request, $includingMethod = true)\n{\n    return Arr::first($routes, function ($value) use ($request, $includingMethod) {\n        return $value->matches($request, $includingMethod);\n    });\n}\n```\n\n### `Illuminate\\Routing\\Route` 的matches 这里如果成功就说明找到了route\n\n```php\npublic function matches(Request $request, $includingMethod = true)\n{\n    $this->compileRoute();\n\n    foreach ($this->getValidators() as $validator) {\n        if (! $includingMethod && $validator instanceof MethodValidator) {\n            continue;\n        }\n\n        if (! $validator->matches($this, $request)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```\n\n\n\n","source":"_posts/laravel相关.md","raw":"---\ntitle: laravel相关\ndate: 2018-11-29 08:54:10\ntags:\n---\n\n新项目使用了laravel,分析一下源码.\n\n<!-- more -->\n\n## 一个请求完整的流程\n\n### 先从`public\\index.php`入手:\n\n```php \n$response = $kernel->handle(\n    $request = Illuminate\\Http\\Request::capture()\n);\n```\n\n### 继续看看`Illuminate\\Foundation\\Http\\Kernel`handle方法\n\n```php\npublic function handle($request)\n{\n    try {\n        $request->enableHttpMethodParameterOverride();\n\n        $response = $this->sendRequestThroughRouter($request);\n    } catch (Exception $e) {\n        $this->reportException($e);\n\n        $response = $this->renderException($request, $e);\n    } catch (Throwable $e) {\n        $this->reportException($e = new FatalThrowableError($e));\n\n        $response = $this->renderException($request, $e);\n    }\n\n    $this->app['events']->dispatch(\n        new Events\\RequestHandled($request, $response)\n    );\n\n    return $response;\n}\n```\n\n可以看到handle方法首先把请求通过路由`sendRequestThroughRouter`,然后再把事件进行分发`dispatch`\n\n\n```php\nprotected function sendRequestThroughRouter($request)\n{\n    $this->app->instance('request', $request);\n\n    Facade::clearResolvedInstance('request');\n\n    $this->bootstrap();\n\n    return (new Pipeline($this->app))\n                ->send($request)\n                ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware)\n                ->then($this->dispatchToRouter());\n}\n```\n\n这一段大概意思就是把请求先通过中间件,最后到达指定的路由\n\n继续\n\n```php\nprotected function dispatchToRouter()\n{\n    return function ($request) {\n        $this->app->instance('request', $request);\n\n        return $this->router->dispatch($request);\n    };\n}\n```\n\n### 继续 `Illuminate\\Routing\\Router`\n\n```php\npublic function dispatch(Request $request)\n{\n    $this->currentRequest = $request;\n\n    return $this->dispatchToRoute($request);\n}\n```\n\n```php\npublic function dispatchToRoute(Request $request)\n{\n      // First we will find a route that matches this request. We will also set the\n      // route resolver on the request so middlewares assigned to the route will\n      // receive access to this route instance for checking of the parameters.\n      $route = $this->findRoute($request);\n\n      $request->setRouteResolver(function () use ($route) {\n          return $route;\n      });\n\n      $this->events->dispatch(new Events\\RouteMatched($route, $request));\n\n      $response = $this->runRouteWithinStack($route, $request);\n\n      return $this->prepareResponse($request, $response);\n}\n```\n\n\n```php\nprotected function findRoute($request)\n{\n    $this->current = $route = $this->routes->match($request);\n\n    $this->container->instance(Route::class, $route);\n\n    return $route;\n}\n```\n\n### `Illuminate\\Routing\\RouteCollection` 的match方法\n\n```php\npublic function match(Request $request)\n{\n    $routes = $this->get($request->getMethod());\n\n    // First, we will see if we can find a matching route for this current request\n    // method. If we can, great, we can just return it so that it can be called\n    // by the consumer. Otherwise we will check for routes with another verb.\n    $route = $this->matchAgainstRoutes($routes, $request);\n\n    if (! is_null($route)) {\n        return $route->bind($request);\n    }\n\n    // If no route was found we will now check if a matching route is specified by\n    // another HTTP verb. If it is we will need to throw a MethodNotAllowed and\n    // inform the user agent of which HTTP verb it should use for this route.\n    $others = $this->checkForAlternateVerbs($request);\n\n    if (count($others) > 0) {\n        return $this->getRouteForMethods($request, $others);\n    }\n\n    throw new NotFoundHttpException;\n}\n```\n\n\n\n```php\nprotected function matchAgainstRoutes(array $routes, $request, $includingMethod = true)\n{\n    return Arr::first($routes, function ($value) use ($request, $includingMethod) {\n        return $value->matches($request, $includingMethod);\n    });\n}\n```\n\n### `Illuminate\\Routing\\Route` 的matches 这里如果成功就说明找到了route\n\n```php\npublic function matches(Request $request, $includingMethod = true)\n{\n    $this->compileRoute();\n\n    foreach ($this->getValidators() as $validator) {\n        if (! $includingMethod && $validator instanceof MethodValidator) {\n            continue;\n        }\n\n        if (! $validator->matches($this, $request)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```\n\n\n\n","slug":"laravel相关","published":1,"updated":"2019-01-12T16:26:25.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhbu000ezbovwwmqgn27","content":"<p>新项目使用了laravel,分析一下源码.</p>\n<a id=\"more\"></a>\n<h2 id=\"一个请求完整的流程\"><a href=\"#一个请求完整的流程\" class=\"headerlink\" title=\"一个请求完整的流程\"></a>一个请求完整的流程</h2><h3 id=\"先从public-index-php入手\"><a href=\"#先从public-index-php入手\" class=\"headerlink\" title=\"先从public\\index.php入手:\"></a>先从<code>public\\index.php</code>入手:</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$response = $kernel-&gt;handle(</span><br><span class=\"line\">    $request = Illuminate\\Http\\Request::capture()</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"继续看看Illuminate-Foundation-Http-Kernelhandle方法\"><a href=\"#继续看看Illuminate-Foundation-Http-Kernelhandle方法\" class=\"headerlink\" title=\"继续看看Illuminate\\Foundation\\Http\\Kernelhandle方法\"></a>继续看看<code>Illuminate\\Foundation\\Http\\Kernel</code>handle方法</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">($request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        $request-&gt;enableHttpMethodParameterOverride();</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;sendRequestThroughRouter($request);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;reportException($e);</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;renderException($request, $e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable $e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;reportException($e = <span class=\"keyword\">new</span> FatalThrowableError($e));</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;renderException($request, $e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;app[<span class=\"string\">'events'</span>]-&gt;dispatch(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Events\\RequestHandled($request, $response)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $response;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到handle方法首先把请求通过路由<code>sendRequestThroughRouter</code>,然后再把事件进行分发<code>dispatch</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendRequestThroughRouter</span><span class=\"params\">($request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;app-&gt;instance(<span class=\"string\">'request'</span>, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">    Facade::clearResolvedInstance(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> Pipeline(<span class=\"keyword\">$this</span>-&gt;app))</span><br><span class=\"line\">                -&gt;send($request)</span><br><span class=\"line\">                -&gt;through(<span class=\"keyword\">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class=\"keyword\">$this</span>-&gt;middleware)</span><br><span class=\"line\">                -&gt;then(<span class=\"keyword\">$this</span>-&gt;dispatchToRouter());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一段大概意思就是把请求先通过中间件,最后到达指定的路由</p>\n<p>继续</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchToRouter</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;app-&gt;instance(<span class=\"string\">'request'</span>, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;router-&gt;dispatch($request);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"继续-Illuminate-Routing-Router\"><a href=\"#继续-Illuminate-Routing-Router\" class=\"headerlink\" title=\"继续 Illuminate\\Routing\\Router\"></a>继续 <code>Illuminate\\Routing\\Router</code></h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;currentRequest = $request;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;dispatchToRoute($request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchToRoute</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// First we will find a route that matches this request. We will also set the</span></span><br><span class=\"line\">      <span class=\"comment\">// route resolver on the request so middlewares assigned to the route will</span></span><br><span class=\"line\">      <span class=\"comment\">// receive access to this route instance for checking of the parameters.</span></span><br><span class=\"line\">      $route = <span class=\"keyword\">$this</span>-&gt;findRoute($request);</span><br><span class=\"line\"></span><br><span class=\"line\">      $request-&gt;setRouteResolver(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> <span class=\"title\">use</span> <span class=\"params\">($route)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> $route;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;events-&gt;dispatch(<span class=\"keyword\">new</span> Events\\RouteMatched($route, $request));</span><br><span class=\"line\"></span><br><span class=\"line\">      $response = <span class=\"keyword\">$this</span>-&gt;runRouteWithinStack($route, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prepareResponse($request, $response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findRoute</span><span class=\"params\">($request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;current = $route = <span class=\"keyword\">$this</span>-&gt;routes-&gt;match($request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;container-&gt;instance(Route::class, $route);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $route;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Illuminate-Routing-RouteCollection-的match方法\"><a href=\"#Illuminate-Routing-RouteCollection-的match方法\" class=\"headerlink\" title=\"Illuminate\\Routing\\RouteCollection 的match方法\"></a><code>Illuminate\\Routing\\RouteCollection</code> 的match方法</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $routes = <span class=\"keyword\">$this</span>-&gt;get($request-&gt;getMethod());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// First, we will see if we can find a matching route for this current request</span></span><br><span class=\"line\">    <span class=\"comment\">// method. If we can, great, we can just return it so that it can be called</span></span><br><span class=\"line\">    <span class=\"comment\">// by the consumer. Otherwise we will check for routes with another verb.</span></span><br><span class=\"line\">    $route = <span class=\"keyword\">$this</span>-&gt;matchAgainstRoutes($routes, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (! is_null($route)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $route-&gt;bind($request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If no route was found we will now check if a matching route is specified by</span></span><br><span class=\"line\">    <span class=\"comment\">// another HTTP verb. If it is we will need to throw a MethodNotAllowed and</span></span><br><span class=\"line\">    <span class=\"comment\">// inform the user agent of which HTTP verb it should use for this route.</span></span><br><span class=\"line\">    $others = <span class=\"keyword\">$this</span>-&gt;checkForAlternateVerbs($request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count($others) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;getRouteForMethods($request, $others);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotFoundHttpException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matchAgainstRoutes</span><span class=\"params\">(array $routes, $request, $includingMethod = true)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Arr::first($routes, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($value)</span> <span class=\"title\">use</span> <span class=\"params\">($request, $includingMethod)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $value-&gt;matches($request, $includingMethod);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Illuminate-Routing-Route-的matches-这里如果成功就说明找到了route\"><a href=\"#Illuminate-Routing-Route-的matches-这里如果成功就说明找到了route\" class=\"headerlink\" title=\"Illuminate\\Routing\\Route 的matches 这里如果成功就说明找到了route\"></a><code>Illuminate\\Routing\\Route</code> 的matches 这里如果成功就说明找到了route</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matches</span><span class=\"params\">(Request $request, $includingMethod = true)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;compileRoute();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;getValidators() <span class=\"keyword\">as</span> $validator) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! $includingMethod &amp;&amp; $validator <span class=\"keyword\">instanceof</span> MethodValidator) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! $validator-&gt;matches(<span class=\"keyword\">$this</span>, $request)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>新项目使用了laravel,分析一下源码.</p>","more":"<h2 id=\"一个请求完整的流程\"><a href=\"#一个请求完整的流程\" class=\"headerlink\" title=\"一个请求完整的流程\"></a>一个请求完整的流程</h2><h3 id=\"先从public-index-php入手\"><a href=\"#先从public-index-php入手\" class=\"headerlink\" title=\"先从public\\index.php入手:\"></a>先从<code>public\\index.php</code>入手:</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$response = $kernel-&gt;handle(</span><br><span class=\"line\">    $request = Illuminate\\Http\\Request::capture()</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"继续看看Illuminate-Foundation-Http-Kernelhandle方法\"><a href=\"#继续看看Illuminate-Foundation-Http-Kernelhandle方法\" class=\"headerlink\" title=\"继续看看Illuminate\\Foundation\\Http\\Kernelhandle方法\"></a>继续看看<code>Illuminate\\Foundation\\Http\\Kernel</code>handle方法</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">($request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        $request-&gt;enableHttpMethodParameterOverride();</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;sendRequestThroughRouter($request);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;reportException($e);</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;renderException($request, $e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable $e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;reportException($e = <span class=\"keyword\">new</span> FatalThrowableError($e));</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;renderException($request, $e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;app[<span class=\"string\">'events'</span>]-&gt;dispatch(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Events\\RequestHandled($request, $response)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $response;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到handle方法首先把请求通过路由<code>sendRequestThroughRouter</code>,然后再把事件进行分发<code>dispatch</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendRequestThroughRouter</span><span class=\"params\">($request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;app-&gt;instance(<span class=\"string\">'request'</span>, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">    Facade::clearResolvedInstance(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> Pipeline(<span class=\"keyword\">$this</span>-&gt;app))</span><br><span class=\"line\">                -&gt;send($request)</span><br><span class=\"line\">                -&gt;through(<span class=\"keyword\">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class=\"keyword\">$this</span>-&gt;middleware)</span><br><span class=\"line\">                -&gt;then(<span class=\"keyword\">$this</span>-&gt;dispatchToRouter());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一段大概意思就是把请求先通过中间件,最后到达指定的路由</p>\n<p>继续</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchToRouter</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;app-&gt;instance(<span class=\"string\">'request'</span>, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;router-&gt;dispatch($request);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"继续-Illuminate-Routing-Router\"><a href=\"#继续-Illuminate-Routing-Router\" class=\"headerlink\" title=\"继续 Illuminate\\Routing\\Router\"></a>继续 <code>Illuminate\\Routing\\Router</code></h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;currentRequest = $request;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;dispatchToRoute($request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchToRoute</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// First we will find a route that matches this request. We will also set the</span></span><br><span class=\"line\">      <span class=\"comment\">// route resolver on the request so middlewares assigned to the route will</span></span><br><span class=\"line\">      <span class=\"comment\">// receive access to this route instance for checking of the parameters.</span></span><br><span class=\"line\">      $route = <span class=\"keyword\">$this</span>-&gt;findRoute($request);</span><br><span class=\"line\"></span><br><span class=\"line\">      $request-&gt;setRouteResolver(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> <span class=\"title\">use</span> <span class=\"params\">($route)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> $route;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;events-&gt;dispatch(<span class=\"keyword\">new</span> Events\\RouteMatched($route, $request));</span><br><span class=\"line\"></span><br><span class=\"line\">      $response = <span class=\"keyword\">$this</span>-&gt;runRouteWithinStack($route, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prepareResponse($request, $response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findRoute</span><span class=\"params\">($request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;current = $route = <span class=\"keyword\">$this</span>-&gt;routes-&gt;match($request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;container-&gt;instance(Route::class, $route);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $route;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Illuminate-Routing-RouteCollection-的match方法\"><a href=\"#Illuminate-Routing-RouteCollection-的match方法\" class=\"headerlink\" title=\"Illuminate\\Routing\\RouteCollection 的match方法\"></a><code>Illuminate\\Routing\\RouteCollection</code> 的match方法</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $routes = <span class=\"keyword\">$this</span>-&gt;get($request-&gt;getMethod());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// First, we will see if we can find a matching route for this current request</span></span><br><span class=\"line\">    <span class=\"comment\">// method. If we can, great, we can just return it so that it can be called</span></span><br><span class=\"line\">    <span class=\"comment\">// by the consumer. Otherwise we will check for routes with another verb.</span></span><br><span class=\"line\">    $route = <span class=\"keyword\">$this</span>-&gt;matchAgainstRoutes($routes, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (! is_null($route)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $route-&gt;bind($request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If no route was found we will now check if a matching route is specified by</span></span><br><span class=\"line\">    <span class=\"comment\">// another HTTP verb. If it is we will need to throw a MethodNotAllowed and</span></span><br><span class=\"line\">    <span class=\"comment\">// inform the user agent of which HTTP verb it should use for this route.</span></span><br><span class=\"line\">    $others = <span class=\"keyword\">$this</span>-&gt;checkForAlternateVerbs($request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count($others) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;getRouteForMethods($request, $others);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotFoundHttpException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matchAgainstRoutes</span><span class=\"params\">(array $routes, $request, $includingMethod = true)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Arr::first($routes, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($value)</span> <span class=\"title\">use</span> <span class=\"params\">($request, $includingMethod)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $value-&gt;matches($request, $includingMethod);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Illuminate-Routing-Route-的matches-这里如果成功就说明找到了route\"><a href=\"#Illuminate-Routing-Route-的matches-这里如果成功就说明找到了route\" class=\"headerlink\" title=\"Illuminate\\Routing\\Route 的matches 这里如果成功就说明找到了route\"></a><code>Illuminate\\Routing\\Route</code> 的matches 这里如果成功就说明找到了route</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matches</span><span class=\"params\">(Request $request, $includingMethod = true)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;compileRoute();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;getValidators() <span class=\"keyword\">as</span> $validator) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! $includingMethod &amp;&amp; $validator <span class=\"keyword\">instanceof</span> MethodValidator) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! $validator-&gt;matches(<span class=\"keyword\">$this</span>, $request)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"linux程序设计","date":"2018-07-27T09:33:52.000Z","_content":"\nlinux程序设计笔记\n\n<!-- more -->\n\n### shell语法\n#### 变量\n声明:不需要声明,直接赋值;区分大小写;变量存储类型是字符串;使用read 变量名 来用这个变量名保存用户输入字符串\n访问:变量前面加$\n注意空格\n\n* 引号: 单引号,双引号  反斜杠\n* 环境变量 大写字母\n  * $HOME\n  * $PATH\n  * $PS1:命令提示符如#,$\n  * $PS2:二级命令提示符如>\n  * $IFS:输入域分隔符,通常是空格\n  * $0:shell脚本的名字\n  * $#:传递脚本参数个数\n  * $$:进程号\n* 参数变量\n  * $1,$2,...:脚本程序的参数\n  * $*:列出所有参数,使用环境变量中的IFS\n  * $@:$*的变体,即使IFS为空,参数也不会挤在一起\n\n#### 条件\ntest / [ 命令   \n如果把then 和if 放在同一行必须用;把test语句和then分隔开\n * 字符串比较\n * 算数比较\n * 文件条件测试\n\n#### 控制结构\n * if ... then ... elif ... then ... else ... fi\n * for ... in ... do ... done\n * while ... do ... done\n * case ... in ... ... ) ...;;esac\n * 命令列表\n    * AND && 前面的命令执行成功的情况下,才执行后面的命令\n    * OR || 前面一条命令执行失败才执行后面的命令\n\n#### 函数\n 声明:fun_name(){}\n 调用:fun_name\n\n#### 命令\n * break\n * :\n * continue\n * .\n * echo\n * eval\n * exec\n * exit n\n * export\n * expr\n * printf\n * return\n * set\n * shift\n * trap\n * unset\n * find\n * grep\n\n#### 命令的执行\n * 算数扩展 : $(())\n * 参数扩展 : ${param:-default} ...\n\n#### here 文档\n * << !xxx!\n\n#### 调试\n * sh -n/v/x/u\n\n### 文件操作\n\n#### 文件和设备\n* /dev/console\n* /dev/tty\n* /dev/null\n\n#### 系统调用和库函数\n * 系统调用:由系统直接提供直接对文件和设备的访问和控制的底层函数\n * 库函数:对设备和磁盘文件提供更高层的接口\n \n![各种文件函数与用户,设备驱动程序,内核和硬件的关系](/images/img/3-2.png)\n\n#### 底层文件访问\n一些系统调用\n * write\n * read\n * open \n * close \n * ioctl\n * lseek\n * fstat, stat, lstst\n * dup, dup2\n\n#### 标准IO库\n * fopen,fclose\n * fread,fwrite\n * fflush\n * fseek\n * fgetc, getc, getchar\n * fputc, putc, putchar\n * fgets, gets\n * printf, fprintf, sprintf\n * scanf, fscanf, sscanf\n\n#### 文件和目录维护\n * chmod\n * chown\n * unlink, link, symlink\n * mkdir, rmdir\n * chdir\n\n#### 扫描目录\n * opendir\n * readdir\n * telldir\n * seekdir\n * closedir\n\n#### 错误处理\n * strerror\n * perror\n\n#### /proc 文件系统\n包含了许多特殊文件用来对驱动程序和内核信息进行更高层的访问\n\n### Linux 环境\n#### 向程序传递参数\n* getopt\n* getopt_long\n\n#### 环境变量\n * 用途: 采用环境变量改变程序运行方式,类似全局变量\n * environ变量: 通过这个变量访问字符串数组\n\n#### 时间和日期\n * time, difftime, gmttime, localtime, mktime, asctime, ctime, strftime, strptime\n\n#### 临时文件\n * tmpnam, tmpfile\n\n###  数据管理\n\n#### 内存管理\n * 简单的内存分配:malloc\n * 分配大量内存: 交换空间\n * 滥用内存: segmentation error\n * 空指针: segmentation error\n * 释放内存: free\n\n#### 文件锁定\n * 创建锁文件\n * 区域锁定\n   * 共享(读)锁:有共享锁时,不能获得独占锁\n   * 解锁:\n   * 独占(写)锁:有独占锁时,不能有其他锁\n\n### 进程和信号\n\n#### 进程的结构,类型和调度\n * 进程的结构:有自己的栈空间,保存局部变量和函数的调用和返回,有自己的环境空间,包含为这个进程建立的环境变量.\n   * 进程表\n   * 查看进程 ps a/f/x/e/u    PID/PPID/TTY/CMD/STAT/\n   * 系统进程 \n   * 进程调度 nice\n * 启动新进程:\n   * system : 程序必须等待由system函数启动的进程结束之后才能继续\n   * 替换进程映像 exec: 把当前进程替换为一个新的进程,原来的进程不再执行\n   * 复制进程映像 fork:父进程返回子进程pid,子进程返回0 这样可以区分两个进程\n * 等待一个进程 wait: 父进程中调用wait\n * 僵尸进程: 子进程运行结束 ,由于需要保存返回给父进程的信息所以依然存在系统中.这个时候就是僵尸进程,知道父进程调用wati 或者正常结束\n * 线程: 进程可以相互协作,互相发送消息,互相中断,甚至可以共享内存段.但是想要共享变量不太可能.于是有了线程\n\n#### 信号\n信号是UNIX/LINUX 系统响应某些条件而产生的一个事件.用raise/生成表示一个信号的产生,用catch/捕获表示接收一个信号\n * SIG... \n * 发送信号: kill\n\n### POSIX线程\n\n#### 在进程中创建新线程\n * pthread_create : 类似于进程中的fork\n * pthread_exit: 类似于exit\n * pthread_join: 类似于pthread_wait\n\n#### 在一个进程中同步线程之间的数据访问\n * 信号量:他的作用如同看守一段代码的看门人\n   * sem_init\n   * sem_wait\n   * sem_post\n   * sem_destroy\n * 互斥量: 他的作用如同保护代码的一个互斥设备\n   * pthread_mutex_init\n   * pthread_mutex_lock\n   * pthread_mutex_unlock\n   * pthread_mutex_destroy\n\n#### 线程的属性\n#### 取消一个线程\n * pthread_cancel\n\n### 进程间通信:管道\n#### 管道\n从一个进程连接数据流到另外一个进程时\n#### 进程管道\n * popen\n * pclose\n\n#### pipe调用\n * pipe(int file_descriptor[2])   向file_descriptor[1]中写数据 从file_descriptor[0]中读数据 先进先出\n * 调用pipe(..) 成功后 fork , 然后在子进程读,父进程写,就可以实现进程间的通信\n\n#### 子进程和父进程\n * 上个例子中由于fork之后文件描述符变量也会在两个进程中存在,因此在同一个程序中可以很方便的通信.如果其中一个进程需要执行别的程序呢? 这时候需要用exec来启动一个新的程序,然后把文件描述符传给这个程序就可以实现两个不同程序之间的进程的通信\n * 管道关闭后的读操作:对已关闭写数据的管道进行读操作将返回0.fork之后只有当父子进程中的写数据的管道都关闭时,对管道的读操作才会失败\n * 把管道用作标准输入和标准输出:dup() 复制文件描述符,返回最小的文件描述符.fork之后子进程把0(标准输入)关了,然后dup管道读文件的描述符[0],返回标准输入0.然后关掉原来管道读描述符,管道写描述符.父进程同理\n \n#### FIFO 命名管道\n * 以上还是只能再相关程序之间传递数据,即由共同祖先进程启动的\n * mknod / mkfifo(优先使用)\n * cat < fifofile & , echo helloworld > fifofile \n * 访问fifo文件: open 但是不能以读写的方式打开 \n\n### 信号量,共享内存,消息队列\n\n#### 信号量\n#### 共享内存\n#### 消息队列\n\n### 套接字\n\n#### 套接字连接的工作原理\n * 套接字是一种通信机制,凭借这种机制,客户端/服务端系统的开发工作既可以在本地进行,也可以跨网络进行.\n * 套接字如何连接?\n     * 服务端\n         * socket 调用创建一个套接字\n         * bind调用 命名 本地 系统文件名(/tmp 或者/usr/tmp), 网络 服务标识符(端口或者访问点)\n         * listen调用 创建一个队列并将其用于存放来自客户端的连接\n         * accept调用 接收客户端的连接\n     * 客户端\n         * socket 调用创建一个套接字\n         * connect 以服务端的命名套接字作为一个地址来调用connect与服务器建立连接\n     * 套接字属性\n         * 域domain  最常见的是AF_INET 指的是internet 底层协议为IP协议\n         * 类型\n             * 流套接字SOCK_STREAM 底层由TCP/IP实现\n             * 数据报套接字 SOCK_DGRAM UDP/IP实现\n             * 套接字协议\n","source":"_posts/linux程序设计.md","raw":"---\ntitle: linux程序设计\ndate: 2018-07-27 17:33:52\ntags: \n- linux\ncategories:\n- 计算机基础\n---\n\nlinux程序设计笔记\n\n<!-- more -->\n\n### shell语法\n#### 变量\n声明:不需要声明,直接赋值;区分大小写;变量存储类型是字符串;使用read 变量名 来用这个变量名保存用户输入字符串\n访问:变量前面加$\n注意空格\n\n* 引号: 单引号,双引号  反斜杠\n* 环境变量 大写字母\n  * $HOME\n  * $PATH\n  * $PS1:命令提示符如#,$\n  * $PS2:二级命令提示符如>\n  * $IFS:输入域分隔符,通常是空格\n  * $0:shell脚本的名字\n  * $#:传递脚本参数个数\n  * $$:进程号\n* 参数变量\n  * $1,$2,...:脚本程序的参数\n  * $*:列出所有参数,使用环境变量中的IFS\n  * $@:$*的变体,即使IFS为空,参数也不会挤在一起\n\n#### 条件\ntest / [ 命令   \n如果把then 和if 放在同一行必须用;把test语句和then分隔开\n * 字符串比较\n * 算数比较\n * 文件条件测试\n\n#### 控制结构\n * if ... then ... elif ... then ... else ... fi\n * for ... in ... do ... done\n * while ... do ... done\n * case ... in ... ... ) ...;;esac\n * 命令列表\n    * AND && 前面的命令执行成功的情况下,才执行后面的命令\n    * OR || 前面一条命令执行失败才执行后面的命令\n\n#### 函数\n 声明:fun_name(){}\n 调用:fun_name\n\n#### 命令\n * break\n * :\n * continue\n * .\n * echo\n * eval\n * exec\n * exit n\n * export\n * expr\n * printf\n * return\n * set\n * shift\n * trap\n * unset\n * find\n * grep\n\n#### 命令的执行\n * 算数扩展 : $(())\n * 参数扩展 : ${param:-default} ...\n\n#### here 文档\n * << !xxx!\n\n#### 调试\n * sh -n/v/x/u\n\n### 文件操作\n\n#### 文件和设备\n* /dev/console\n* /dev/tty\n* /dev/null\n\n#### 系统调用和库函数\n * 系统调用:由系统直接提供直接对文件和设备的访问和控制的底层函数\n * 库函数:对设备和磁盘文件提供更高层的接口\n \n![各种文件函数与用户,设备驱动程序,内核和硬件的关系](/images/img/3-2.png)\n\n#### 底层文件访问\n一些系统调用\n * write\n * read\n * open \n * close \n * ioctl\n * lseek\n * fstat, stat, lstst\n * dup, dup2\n\n#### 标准IO库\n * fopen,fclose\n * fread,fwrite\n * fflush\n * fseek\n * fgetc, getc, getchar\n * fputc, putc, putchar\n * fgets, gets\n * printf, fprintf, sprintf\n * scanf, fscanf, sscanf\n\n#### 文件和目录维护\n * chmod\n * chown\n * unlink, link, symlink\n * mkdir, rmdir\n * chdir\n\n#### 扫描目录\n * opendir\n * readdir\n * telldir\n * seekdir\n * closedir\n\n#### 错误处理\n * strerror\n * perror\n\n#### /proc 文件系统\n包含了许多特殊文件用来对驱动程序和内核信息进行更高层的访问\n\n### Linux 环境\n#### 向程序传递参数\n* getopt\n* getopt_long\n\n#### 环境变量\n * 用途: 采用环境变量改变程序运行方式,类似全局变量\n * environ变量: 通过这个变量访问字符串数组\n\n#### 时间和日期\n * time, difftime, gmttime, localtime, mktime, asctime, ctime, strftime, strptime\n\n#### 临时文件\n * tmpnam, tmpfile\n\n###  数据管理\n\n#### 内存管理\n * 简单的内存分配:malloc\n * 分配大量内存: 交换空间\n * 滥用内存: segmentation error\n * 空指针: segmentation error\n * 释放内存: free\n\n#### 文件锁定\n * 创建锁文件\n * 区域锁定\n   * 共享(读)锁:有共享锁时,不能获得独占锁\n   * 解锁:\n   * 独占(写)锁:有独占锁时,不能有其他锁\n\n### 进程和信号\n\n#### 进程的结构,类型和调度\n * 进程的结构:有自己的栈空间,保存局部变量和函数的调用和返回,有自己的环境空间,包含为这个进程建立的环境变量.\n   * 进程表\n   * 查看进程 ps a/f/x/e/u    PID/PPID/TTY/CMD/STAT/\n   * 系统进程 \n   * 进程调度 nice\n * 启动新进程:\n   * system : 程序必须等待由system函数启动的进程结束之后才能继续\n   * 替换进程映像 exec: 把当前进程替换为一个新的进程,原来的进程不再执行\n   * 复制进程映像 fork:父进程返回子进程pid,子进程返回0 这样可以区分两个进程\n * 等待一个进程 wait: 父进程中调用wait\n * 僵尸进程: 子进程运行结束 ,由于需要保存返回给父进程的信息所以依然存在系统中.这个时候就是僵尸进程,知道父进程调用wati 或者正常结束\n * 线程: 进程可以相互协作,互相发送消息,互相中断,甚至可以共享内存段.但是想要共享变量不太可能.于是有了线程\n\n#### 信号\n信号是UNIX/LINUX 系统响应某些条件而产生的一个事件.用raise/生成表示一个信号的产生,用catch/捕获表示接收一个信号\n * SIG... \n * 发送信号: kill\n\n### POSIX线程\n\n#### 在进程中创建新线程\n * pthread_create : 类似于进程中的fork\n * pthread_exit: 类似于exit\n * pthread_join: 类似于pthread_wait\n\n#### 在一个进程中同步线程之间的数据访问\n * 信号量:他的作用如同看守一段代码的看门人\n   * sem_init\n   * sem_wait\n   * sem_post\n   * sem_destroy\n * 互斥量: 他的作用如同保护代码的一个互斥设备\n   * pthread_mutex_init\n   * pthread_mutex_lock\n   * pthread_mutex_unlock\n   * pthread_mutex_destroy\n\n#### 线程的属性\n#### 取消一个线程\n * pthread_cancel\n\n### 进程间通信:管道\n#### 管道\n从一个进程连接数据流到另外一个进程时\n#### 进程管道\n * popen\n * pclose\n\n#### pipe调用\n * pipe(int file_descriptor[2])   向file_descriptor[1]中写数据 从file_descriptor[0]中读数据 先进先出\n * 调用pipe(..) 成功后 fork , 然后在子进程读,父进程写,就可以实现进程间的通信\n\n#### 子进程和父进程\n * 上个例子中由于fork之后文件描述符变量也会在两个进程中存在,因此在同一个程序中可以很方便的通信.如果其中一个进程需要执行别的程序呢? 这时候需要用exec来启动一个新的程序,然后把文件描述符传给这个程序就可以实现两个不同程序之间的进程的通信\n * 管道关闭后的读操作:对已关闭写数据的管道进行读操作将返回0.fork之后只有当父子进程中的写数据的管道都关闭时,对管道的读操作才会失败\n * 把管道用作标准输入和标准输出:dup() 复制文件描述符,返回最小的文件描述符.fork之后子进程把0(标准输入)关了,然后dup管道读文件的描述符[0],返回标准输入0.然后关掉原来管道读描述符,管道写描述符.父进程同理\n \n#### FIFO 命名管道\n * 以上还是只能再相关程序之间传递数据,即由共同祖先进程启动的\n * mknod / mkfifo(优先使用)\n * cat < fifofile & , echo helloworld > fifofile \n * 访问fifo文件: open 但是不能以读写的方式打开 \n\n### 信号量,共享内存,消息队列\n\n#### 信号量\n#### 共享内存\n#### 消息队列\n\n### 套接字\n\n#### 套接字连接的工作原理\n * 套接字是一种通信机制,凭借这种机制,客户端/服务端系统的开发工作既可以在本地进行,也可以跨网络进行.\n * 套接字如何连接?\n     * 服务端\n         * socket 调用创建一个套接字\n         * bind调用 命名 本地 系统文件名(/tmp 或者/usr/tmp), 网络 服务标识符(端口或者访问点)\n         * listen调用 创建一个队列并将其用于存放来自客户端的连接\n         * accept调用 接收客户端的连接\n     * 客户端\n         * socket 调用创建一个套接字\n         * connect 以服务端的命名套接字作为一个地址来调用connect与服务器建立连接\n     * 套接字属性\n         * 域domain  最常见的是AF_INET 指的是internet 底层协议为IP协议\n         * 类型\n             * 流套接字SOCK_STREAM 底层由TCP/IP实现\n             * 数据报套接字 SOCK_DGRAM UDP/IP实现\n             * 套接字协议\n","slug":"linux程序设计","published":1,"updated":"2019-01-14T02:41:09.168Z","_id":"cjqvpvhbw000izbovpi0rffdt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>linux程序设计笔记</p>\n<a id=\"more\"></a>\n<h3 id=\"shell语法\"><a href=\"#shell语法\" class=\"headerlink\" title=\"shell语法\"></a>shell语法</h3><h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>声明:不需要声明,直接赋值;区分大小写;变量存储类型是字符串;使用read 变量名 来用这个变量名保存用户输入字符串<br>访问:变量前面加$<br>注意空格</p>\n<ul>\n<li>引号: 单引号,双引号  反斜杠</li>\n<li>环境变量 大写字母<ul>\n<li>$HOME</li>\n<li>$PATH</li>\n<li>$PS1:命令提示符如#,$</li>\n<li>$PS2:二级命令提示符如&gt;</li>\n<li>$IFS:输入域分隔符,通常是空格</li>\n<li>$0:shell脚本的名字</li>\n<li>$#:传递脚本参数个数</li>\n<li>$$:进程号</li>\n</ul>\n</li>\n<li>参数变量<ul>\n<li>$1,$2,…:脚本程序的参数</li>\n<li>$*:列出所有参数,使用环境变量中的IFS</li>\n<li>$@:$*的变体,即使IFS为空,参数也不会挤在一起</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h4><p>test / [ 命令<br>如果把then 和if 放在同一行必须用;把test语句和then分隔开</p>\n<ul>\n<li>字符串比较</li>\n<li>算数比较</li>\n<li>文件条件测试</li>\n</ul>\n<h4 id=\"控制结构\"><a href=\"#控制结构\" class=\"headerlink\" title=\"控制结构\"></a>控制结构</h4><ul>\n<li>if … then … elif … then … else … fi</li>\n<li>for … in … do … done</li>\n<li>while … do … done</li>\n<li>case … in … … ) …;;esac</li>\n<li>命令列表<ul>\n<li>AND &amp;&amp; 前面的命令执行成功的情况下,才执行后面的命令</li>\n<li>OR || 前面一条命令执行失败才执行后面的命令</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p> 声明:fun_name(){}<br> 调用:fun_name</p>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><ul>\n<li>break</li>\n<li>:</li>\n<li>continue</li>\n<li>.</li>\n<li>echo</li>\n<li>eval</li>\n<li>exec</li>\n<li>exit n</li>\n<li>export</li>\n<li>expr</li>\n<li>printf</li>\n<li>return</li>\n<li>set</li>\n<li>shift</li>\n<li>trap</li>\n<li>unset</li>\n<li>find</li>\n<li>grep</li>\n</ul>\n<h4 id=\"命令的执行\"><a href=\"#命令的执行\" class=\"headerlink\" title=\"命令的执行\"></a>命令的执行</h4><ul>\n<li>算数扩展 : $(())</li>\n<li>参数扩展 : ${param:-default} …</li>\n</ul>\n<h4 id=\"here-文档\"><a href=\"#here-文档\" class=\"headerlink\" title=\"here 文档\"></a>here 文档</h4><ul>\n<li>&lt;&lt; !xxx!</li>\n</ul>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><ul>\n<li>sh -n/v/x/u</li>\n</ul>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><h4 id=\"文件和设备\"><a href=\"#文件和设备\" class=\"headerlink\" title=\"文件和设备\"></a>文件和设备</h4><ul>\n<li>/dev/console</li>\n<li>/dev/tty</li>\n<li>/dev/null</li>\n</ul>\n<h4 id=\"系统调用和库函数\"><a href=\"#系统调用和库函数\" class=\"headerlink\" title=\"系统调用和库函数\"></a>系统调用和库函数</h4><ul>\n<li>系统调用:由系统直接提供直接对文件和设备的访问和控制的底层函数</li>\n<li>库函数:对设备和磁盘文件提供更高层的接口</li>\n</ul>\n<p><img src=\"/images/img/3-2.png\" alt=\"各种文件函数与用户,设备驱动程序,内核和硬件的关系\"></p>\n<h4 id=\"底层文件访问\"><a href=\"#底层文件访问\" class=\"headerlink\" title=\"底层文件访问\"></a>底层文件访问</h4><p>一些系统调用</p>\n<ul>\n<li>write</li>\n<li>read</li>\n<li>open </li>\n<li>close </li>\n<li>ioctl</li>\n<li>lseek</li>\n<li>fstat, stat, lstst</li>\n<li>dup, dup2</li>\n</ul>\n<h4 id=\"标准IO库\"><a href=\"#标准IO库\" class=\"headerlink\" title=\"标准IO库\"></a>标准IO库</h4><ul>\n<li>fopen,fclose</li>\n<li>fread,fwrite</li>\n<li>fflush</li>\n<li>fseek</li>\n<li>fgetc, getc, getchar</li>\n<li>fputc, putc, putchar</li>\n<li>fgets, gets</li>\n<li>printf, fprintf, sprintf</li>\n<li>scanf, fscanf, sscanf</li>\n</ul>\n<h4 id=\"文件和目录维护\"><a href=\"#文件和目录维护\" class=\"headerlink\" title=\"文件和目录维护\"></a>文件和目录维护</h4><ul>\n<li>chmod</li>\n<li>chown</li>\n<li>unlink, link, symlink</li>\n<li>mkdir, rmdir</li>\n<li>chdir</li>\n</ul>\n<h4 id=\"扫描目录\"><a href=\"#扫描目录\" class=\"headerlink\" title=\"扫描目录\"></a>扫描目录</h4><ul>\n<li>opendir</li>\n<li>readdir</li>\n<li>telldir</li>\n<li>seekdir</li>\n<li>closedir</li>\n</ul>\n<h4 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h4><ul>\n<li>strerror</li>\n<li>perror</li>\n</ul>\n<h4 id=\"proc-文件系统\"><a href=\"#proc-文件系统\" class=\"headerlink\" title=\"/proc 文件系统\"></a>/proc 文件系统</h4><p>包含了许多特殊文件用来对驱动程序和内核信息进行更高层的访问</p>\n<h3 id=\"Linux-环境\"><a href=\"#Linux-环境\" class=\"headerlink\" title=\"Linux 环境\"></a>Linux 环境</h3><h4 id=\"向程序传递参数\"><a href=\"#向程序传递参数\" class=\"headerlink\" title=\"向程序传递参数\"></a>向程序传递参数</h4><ul>\n<li>getopt</li>\n<li>getopt_long</li>\n</ul>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><ul>\n<li>用途: 采用环境变量改变程序运行方式,类似全局变量</li>\n<li>environ变量: 通过这个变量访问字符串数组</li>\n</ul>\n<h4 id=\"时间和日期\"><a href=\"#时间和日期\" class=\"headerlink\" title=\"时间和日期\"></a>时间和日期</h4><ul>\n<li>time, difftime, gmttime, localtime, mktime, asctime, ctime, strftime, strptime</li>\n</ul>\n<h4 id=\"临时文件\"><a href=\"#临时文件\" class=\"headerlink\" title=\"临时文件\"></a>临时文件</h4><ul>\n<li>tmpnam, tmpfile</li>\n</ul>\n<h3 id=\"数据管理\"><a href=\"#数据管理\" class=\"headerlink\" title=\"数据管理\"></a>数据管理</h3><h4 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h4><ul>\n<li>简单的内存分配:malloc</li>\n<li>分配大量内存: 交换空间</li>\n<li>滥用内存: segmentation error</li>\n<li>空指针: segmentation error</li>\n<li>释放内存: free</li>\n</ul>\n<h4 id=\"文件锁定\"><a href=\"#文件锁定\" class=\"headerlink\" title=\"文件锁定\"></a>文件锁定</h4><ul>\n<li>创建锁文件</li>\n<li>区域锁定<ul>\n<li>共享(读)锁:有共享锁时,不能获得独占锁</li>\n<li>解锁:</li>\n<li>独占(写)锁:有独占锁时,不能有其他锁</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"进程和信号\"><a href=\"#进程和信号\" class=\"headerlink\" title=\"进程和信号\"></a>进程和信号</h3><h4 id=\"进程的结构-类型和调度\"><a href=\"#进程的结构-类型和调度\" class=\"headerlink\" title=\"进程的结构,类型和调度\"></a>进程的结构,类型和调度</h4><ul>\n<li>进程的结构:有自己的栈空间,保存局部变量和函数的调用和返回,有自己的环境空间,包含为这个进程建立的环境变量.<ul>\n<li>进程表</li>\n<li>查看进程 ps a/f/x/e/u    PID/PPID/TTY/CMD/STAT/</li>\n<li>系统进程 </li>\n<li>进程调度 nice</li>\n</ul>\n</li>\n<li>启动新进程:<ul>\n<li>system : 程序必须等待由system函数启动的进程结束之后才能继续</li>\n<li>替换进程映像 exec: 把当前进程替换为一个新的进程,原来的进程不再执行</li>\n<li>复制进程映像 fork:父进程返回子进程pid,子进程返回0 这样可以区分两个进程</li>\n</ul>\n</li>\n<li>等待一个进程 wait: 父进程中调用wait</li>\n<li>僵尸进程: 子进程运行结束 ,由于需要保存返回给父进程的信息所以依然存在系统中.这个时候就是僵尸进程,知道父进程调用wati 或者正常结束</li>\n<li>线程: 进程可以相互协作,互相发送消息,互相中断,甚至可以共享内存段.但是想要共享变量不太可能.于是有了线程</li>\n</ul>\n<h4 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h4><p>信号是UNIX/LINUX 系统响应某些条件而产生的一个事件.用raise/生成表示一个信号的产生,用catch/捕获表示接收一个信号</p>\n<ul>\n<li>SIG… </li>\n<li>发送信号: kill</li>\n</ul>\n<h3 id=\"POSIX线程\"><a href=\"#POSIX线程\" class=\"headerlink\" title=\"POSIX线程\"></a>POSIX线程</h3><h4 id=\"在进程中创建新线程\"><a href=\"#在进程中创建新线程\" class=\"headerlink\" title=\"在进程中创建新线程\"></a>在进程中创建新线程</h4><ul>\n<li>pthread_create : 类似于进程中的fork</li>\n<li>pthread_exit: 类似于exit</li>\n<li>pthread_join: 类似于pthread_wait</li>\n</ul>\n<h4 id=\"在一个进程中同步线程之间的数据访问\"><a href=\"#在一个进程中同步线程之间的数据访问\" class=\"headerlink\" title=\"在一个进程中同步线程之间的数据访问\"></a>在一个进程中同步线程之间的数据访问</h4><ul>\n<li>信号量:他的作用如同看守一段代码的看门人<ul>\n<li>sem_init</li>\n<li>sem_wait</li>\n<li>sem_post</li>\n<li>sem_destroy</li>\n</ul>\n</li>\n<li>互斥量: 他的作用如同保护代码的一个互斥设备<ul>\n<li>pthread_mutex_init</li>\n<li>pthread_mutex_lock</li>\n<li>pthread_mutex_unlock</li>\n<li>pthread_mutex_destroy</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"线程的属性\"><a href=\"#线程的属性\" class=\"headerlink\" title=\"线程的属性\"></a>线程的属性</h4><h4 id=\"取消一个线程\"><a href=\"#取消一个线程\" class=\"headerlink\" title=\"取消一个线程\"></a>取消一个线程</h4><ul>\n<li>pthread_cancel</li>\n</ul>\n<h3 id=\"进程间通信-管道\"><a href=\"#进程间通信-管道\" class=\"headerlink\" title=\"进程间通信:管道\"></a>进程间通信:管道</h3><h4 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h4><p>从一个进程连接数据流到另外一个进程时</p>\n<h4 id=\"进程管道\"><a href=\"#进程管道\" class=\"headerlink\" title=\"进程管道\"></a>进程管道</h4><ul>\n<li>popen</li>\n<li>pclose</li>\n</ul>\n<h4 id=\"pipe调用\"><a href=\"#pipe调用\" class=\"headerlink\" title=\"pipe调用\"></a>pipe调用</h4><ul>\n<li>pipe(int file_descriptor[2])   向file_descriptor[1]中写数据 从file_descriptor[0]中读数据 先进先出</li>\n<li>调用pipe(..) 成功后 fork , 然后在子进程读,父进程写,就可以实现进程间的通信</li>\n</ul>\n<h4 id=\"子进程和父进程\"><a href=\"#子进程和父进程\" class=\"headerlink\" title=\"子进程和父进程\"></a>子进程和父进程</h4><ul>\n<li>上个例子中由于fork之后文件描述符变量也会在两个进程中存在,因此在同一个程序中可以很方便的通信.如果其中一个进程需要执行别的程序呢? 这时候需要用exec来启动一个新的程序,然后把文件描述符传给这个程序就可以实现两个不同程序之间的进程的通信</li>\n<li>管道关闭后的读操作:对已关闭写数据的管道进行读操作将返回0.fork之后只有当父子进程中的写数据的管道都关闭时,对管道的读操作才会失败</li>\n<li>把管道用作标准输入和标准输出:dup() 复制文件描述符,返回最小的文件描述符.fork之后子进程把0(标准输入)关了,然后dup管道读文件的描述符[0],返回标准输入0.然后关掉原来管道读描述符,管道写描述符.父进程同理</li>\n</ul>\n<h4 id=\"FIFO-命名管道\"><a href=\"#FIFO-命名管道\" class=\"headerlink\" title=\"FIFO 命名管道\"></a>FIFO 命名管道</h4><ul>\n<li>以上还是只能再相关程序之间传递数据,即由共同祖先进程启动的</li>\n<li>mknod / mkfifo(优先使用)</li>\n<li>cat &lt; fifofile &amp; , echo helloworld &gt; fifofile </li>\n<li>访问fifo文件: open 但是不能以读写的方式打开 </li>\n</ul>\n<h3 id=\"信号量-共享内存-消息队列\"><a href=\"#信号量-共享内存-消息队列\" class=\"headerlink\" title=\"信号量,共享内存,消息队列\"></a>信号量,共享内存,消息队列</h3><h4 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h4><h4 id=\"共享内存\"><a href=\"#共享内存\" class=\"headerlink\" title=\"共享内存\"></a>共享内存</h4><h4 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h4><h3 id=\"套接字\"><a href=\"#套接字\" class=\"headerlink\" title=\"套接字\"></a>套接字</h3><h4 id=\"套接字连接的工作原理\"><a href=\"#套接字连接的工作原理\" class=\"headerlink\" title=\"套接字连接的工作原理\"></a>套接字连接的工作原理</h4><ul>\n<li>套接字是一种通信机制,凭借这种机制,客户端/服务端系统的开发工作既可以在本地进行,也可以跨网络进行.</li>\n<li>套接字如何连接?<ul>\n<li>服务端<ul>\n<li>socket 调用创建一个套接字</li>\n<li>bind调用 命名 本地 系统文件名(/tmp 或者/usr/tmp), 网络 服务标识符(端口或者访问点)</li>\n<li>listen调用 创建一个队列并将其用于存放来自客户端的连接</li>\n<li>accept调用 接收客户端的连接</li>\n</ul>\n</li>\n<li>客户端<ul>\n<li>socket 调用创建一个套接字</li>\n<li>connect 以服务端的命名套接字作为一个地址来调用connect与服务器建立连接</li>\n</ul>\n</li>\n<li>套接字属性<ul>\n<li>域domain  最常见的是AF_INET 指的是internet 底层协议为IP协议</li>\n<li>类型<ul>\n<li>流套接字SOCK_STREAM 底层由TCP/IP实现</li>\n<li>数据报套接字 SOCK_DGRAM UDP/IP实现</li>\n<li>套接字协议</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>linux程序设计笔记</p>","more":"<h3 id=\"shell语法\"><a href=\"#shell语法\" class=\"headerlink\" title=\"shell语法\"></a>shell语法</h3><h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>声明:不需要声明,直接赋值;区分大小写;变量存储类型是字符串;使用read 变量名 来用这个变量名保存用户输入字符串<br>访问:变量前面加$<br>注意空格</p>\n<ul>\n<li>引号: 单引号,双引号  反斜杠</li>\n<li>环境变量 大写字母<ul>\n<li>$HOME</li>\n<li>$PATH</li>\n<li>$PS1:命令提示符如#,$</li>\n<li>$PS2:二级命令提示符如&gt;</li>\n<li>$IFS:输入域分隔符,通常是空格</li>\n<li>$0:shell脚本的名字</li>\n<li>$#:传递脚本参数个数</li>\n<li>$$:进程号</li>\n</ul>\n</li>\n<li>参数变量<ul>\n<li>$1,$2,…:脚本程序的参数</li>\n<li>$*:列出所有参数,使用环境变量中的IFS</li>\n<li>$@:$*的变体,即使IFS为空,参数也不会挤在一起</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h4><p>test / [ 命令<br>如果把then 和if 放在同一行必须用;把test语句和then分隔开</p>\n<ul>\n<li>字符串比较</li>\n<li>算数比较</li>\n<li>文件条件测试</li>\n</ul>\n<h4 id=\"控制结构\"><a href=\"#控制结构\" class=\"headerlink\" title=\"控制结构\"></a>控制结构</h4><ul>\n<li>if … then … elif … then … else … fi</li>\n<li>for … in … do … done</li>\n<li>while … do … done</li>\n<li>case … in … … ) …;;esac</li>\n<li>命令列表<ul>\n<li>AND &amp;&amp; 前面的命令执行成功的情况下,才执行后面的命令</li>\n<li>OR || 前面一条命令执行失败才执行后面的命令</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p> 声明:fun_name(){}<br> 调用:fun_name</p>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><ul>\n<li>break</li>\n<li>:</li>\n<li>continue</li>\n<li>.</li>\n<li>echo</li>\n<li>eval</li>\n<li>exec</li>\n<li>exit n</li>\n<li>export</li>\n<li>expr</li>\n<li>printf</li>\n<li>return</li>\n<li>set</li>\n<li>shift</li>\n<li>trap</li>\n<li>unset</li>\n<li>find</li>\n<li>grep</li>\n</ul>\n<h4 id=\"命令的执行\"><a href=\"#命令的执行\" class=\"headerlink\" title=\"命令的执行\"></a>命令的执行</h4><ul>\n<li>算数扩展 : $(())</li>\n<li>参数扩展 : ${param:-default} …</li>\n</ul>\n<h4 id=\"here-文档\"><a href=\"#here-文档\" class=\"headerlink\" title=\"here 文档\"></a>here 文档</h4><ul>\n<li>&lt;&lt; !xxx!</li>\n</ul>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><ul>\n<li>sh -n/v/x/u</li>\n</ul>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><h4 id=\"文件和设备\"><a href=\"#文件和设备\" class=\"headerlink\" title=\"文件和设备\"></a>文件和设备</h4><ul>\n<li>/dev/console</li>\n<li>/dev/tty</li>\n<li>/dev/null</li>\n</ul>\n<h4 id=\"系统调用和库函数\"><a href=\"#系统调用和库函数\" class=\"headerlink\" title=\"系统调用和库函数\"></a>系统调用和库函数</h4><ul>\n<li>系统调用:由系统直接提供直接对文件和设备的访问和控制的底层函数</li>\n<li>库函数:对设备和磁盘文件提供更高层的接口</li>\n</ul>\n<p><img src=\"/images/img/3-2.png\" alt=\"各种文件函数与用户,设备驱动程序,内核和硬件的关系\"></p>\n<h4 id=\"底层文件访问\"><a href=\"#底层文件访问\" class=\"headerlink\" title=\"底层文件访问\"></a>底层文件访问</h4><p>一些系统调用</p>\n<ul>\n<li>write</li>\n<li>read</li>\n<li>open </li>\n<li>close </li>\n<li>ioctl</li>\n<li>lseek</li>\n<li>fstat, stat, lstst</li>\n<li>dup, dup2</li>\n</ul>\n<h4 id=\"标准IO库\"><a href=\"#标准IO库\" class=\"headerlink\" title=\"标准IO库\"></a>标准IO库</h4><ul>\n<li>fopen,fclose</li>\n<li>fread,fwrite</li>\n<li>fflush</li>\n<li>fseek</li>\n<li>fgetc, getc, getchar</li>\n<li>fputc, putc, putchar</li>\n<li>fgets, gets</li>\n<li>printf, fprintf, sprintf</li>\n<li>scanf, fscanf, sscanf</li>\n</ul>\n<h4 id=\"文件和目录维护\"><a href=\"#文件和目录维护\" class=\"headerlink\" title=\"文件和目录维护\"></a>文件和目录维护</h4><ul>\n<li>chmod</li>\n<li>chown</li>\n<li>unlink, link, symlink</li>\n<li>mkdir, rmdir</li>\n<li>chdir</li>\n</ul>\n<h4 id=\"扫描目录\"><a href=\"#扫描目录\" class=\"headerlink\" title=\"扫描目录\"></a>扫描目录</h4><ul>\n<li>opendir</li>\n<li>readdir</li>\n<li>telldir</li>\n<li>seekdir</li>\n<li>closedir</li>\n</ul>\n<h4 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h4><ul>\n<li>strerror</li>\n<li>perror</li>\n</ul>\n<h4 id=\"proc-文件系统\"><a href=\"#proc-文件系统\" class=\"headerlink\" title=\"/proc 文件系统\"></a>/proc 文件系统</h4><p>包含了许多特殊文件用来对驱动程序和内核信息进行更高层的访问</p>\n<h3 id=\"Linux-环境\"><a href=\"#Linux-环境\" class=\"headerlink\" title=\"Linux 环境\"></a>Linux 环境</h3><h4 id=\"向程序传递参数\"><a href=\"#向程序传递参数\" class=\"headerlink\" title=\"向程序传递参数\"></a>向程序传递参数</h4><ul>\n<li>getopt</li>\n<li>getopt_long</li>\n</ul>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><ul>\n<li>用途: 采用环境变量改变程序运行方式,类似全局变量</li>\n<li>environ变量: 通过这个变量访问字符串数组</li>\n</ul>\n<h4 id=\"时间和日期\"><a href=\"#时间和日期\" class=\"headerlink\" title=\"时间和日期\"></a>时间和日期</h4><ul>\n<li>time, difftime, gmttime, localtime, mktime, asctime, ctime, strftime, strptime</li>\n</ul>\n<h4 id=\"临时文件\"><a href=\"#临时文件\" class=\"headerlink\" title=\"临时文件\"></a>临时文件</h4><ul>\n<li>tmpnam, tmpfile</li>\n</ul>\n<h3 id=\"数据管理\"><a href=\"#数据管理\" class=\"headerlink\" title=\"数据管理\"></a>数据管理</h3><h4 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h4><ul>\n<li>简单的内存分配:malloc</li>\n<li>分配大量内存: 交换空间</li>\n<li>滥用内存: segmentation error</li>\n<li>空指针: segmentation error</li>\n<li>释放内存: free</li>\n</ul>\n<h4 id=\"文件锁定\"><a href=\"#文件锁定\" class=\"headerlink\" title=\"文件锁定\"></a>文件锁定</h4><ul>\n<li>创建锁文件</li>\n<li>区域锁定<ul>\n<li>共享(读)锁:有共享锁时,不能获得独占锁</li>\n<li>解锁:</li>\n<li>独占(写)锁:有独占锁时,不能有其他锁</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"进程和信号\"><a href=\"#进程和信号\" class=\"headerlink\" title=\"进程和信号\"></a>进程和信号</h3><h4 id=\"进程的结构-类型和调度\"><a href=\"#进程的结构-类型和调度\" class=\"headerlink\" title=\"进程的结构,类型和调度\"></a>进程的结构,类型和调度</h4><ul>\n<li>进程的结构:有自己的栈空间,保存局部变量和函数的调用和返回,有自己的环境空间,包含为这个进程建立的环境变量.<ul>\n<li>进程表</li>\n<li>查看进程 ps a/f/x/e/u    PID/PPID/TTY/CMD/STAT/</li>\n<li>系统进程 </li>\n<li>进程调度 nice</li>\n</ul>\n</li>\n<li>启动新进程:<ul>\n<li>system : 程序必须等待由system函数启动的进程结束之后才能继续</li>\n<li>替换进程映像 exec: 把当前进程替换为一个新的进程,原来的进程不再执行</li>\n<li>复制进程映像 fork:父进程返回子进程pid,子进程返回0 这样可以区分两个进程</li>\n</ul>\n</li>\n<li>等待一个进程 wait: 父进程中调用wait</li>\n<li>僵尸进程: 子进程运行结束 ,由于需要保存返回给父进程的信息所以依然存在系统中.这个时候就是僵尸进程,知道父进程调用wati 或者正常结束</li>\n<li>线程: 进程可以相互协作,互相发送消息,互相中断,甚至可以共享内存段.但是想要共享变量不太可能.于是有了线程</li>\n</ul>\n<h4 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h4><p>信号是UNIX/LINUX 系统响应某些条件而产生的一个事件.用raise/生成表示一个信号的产生,用catch/捕获表示接收一个信号</p>\n<ul>\n<li>SIG… </li>\n<li>发送信号: kill</li>\n</ul>\n<h3 id=\"POSIX线程\"><a href=\"#POSIX线程\" class=\"headerlink\" title=\"POSIX线程\"></a>POSIX线程</h3><h4 id=\"在进程中创建新线程\"><a href=\"#在进程中创建新线程\" class=\"headerlink\" title=\"在进程中创建新线程\"></a>在进程中创建新线程</h4><ul>\n<li>pthread_create : 类似于进程中的fork</li>\n<li>pthread_exit: 类似于exit</li>\n<li>pthread_join: 类似于pthread_wait</li>\n</ul>\n<h4 id=\"在一个进程中同步线程之间的数据访问\"><a href=\"#在一个进程中同步线程之间的数据访问\" class=\"headerlink\" title=\"在一个进程中同步线程之间的数据访问\"></a>在一个进程中同步线程之间的数据访问</h4><ul>\n<li>信号量:他的作用如同看守一段代码的看门人<ul>\n<li>sem_init</li>\n<li>sem_wait</li>\n<li>sem_post</li>\n<li>sem_destroy</li>\n</ul>\n</li>\n<li>互斥量: 他的作用如同保护代码的一个互斥设备<ul>\n<li>pthread_mutex_init</li>\n<li>pthread_mutex_lock</li>\n<li>pthread_mutex_unlock</li>\n<li>pthread_mutex_destroy</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"线程的属性\"><a href=\"#线程的属性\" class=\"headerlink\" title=\"线程的属性\"></a>线程的属性</h4><h4 id=\"取消一个线程\"><a href=\"#取消一个线程\" class=\"headerlink\" title=\"取消一个线程\"></a>取消一个线程</h4><ul>\n<li>pthread_cancel</li>\n</ul>\n<h3 id=\"进程间通信-管道\"><a href=\"#进程间通信-管道\" class=\"headerlink\" title=\"进程间通信:管道\"></a>进程间通信:管道</h3><h4 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h4><p>从一个进程连接数据流到另外一个进程时</p>\n<h4 id=\"进程管道\"><a href=\"#进程管道\" class=\"headerlink\" title=\"进程管道\"></a>进程管道</h4><ul>\n<li>popen</li>\n<li>pclose</li>\n</ul>\n<h4 id=\"pipe调用\"><a href=\"#pipe调用\" class=\"headerlink\" title=\"pipe调用\"></a>pipe调用</h4><ul>\n<li>pipe(int file_descriptor[2])   向file_descriptor[1]中写数据 从file_descriptor[0]中读数据 先进先出</li>\n<li>调用pipe(..) 成功后 fork , 然后在子进程读,父进程写,就可以实现进程间的通信</li>\n</ul>\n<h4 id=\"子进程和父进程\"><a href=\"#子进程和父进程\" class=\"headerlink\" title=\"子进程和父进程\"></a>子进程和父进程</h4><ul>\n<li>上个例子中由于fork之后文件描述符变量也会在两个进程中存在,因此在同一个程序中可以很方便的通信.如果其中一个进程需要执行别的程序呢? 这时候需要用exec来启动一个新的程序,然后把文件描述符传给这个程序就可以实现两个不同程序之间的进程的通信</li>\n<li>管道关闭后的读操作:对已关闭写数据的管道进行读操作将返回0.fork之后只有当父子进程中的写数据的管道都关闭时,对管道的读操作才会失败</li>\n<li>把管道用作标准输入和标准输出:dup() 复制文件描述符,返回最小的文件描述符.fork之后子进程把0(标准输入)关了,然后dup管道读文件的描述符[0],返回标准输入0.然后关掉原来管道读描述符,管道写描述符.父进程同理</li>\n</ul>\n<h4 id=\"FIFO-命名管道\"><a href=\"#FIFO-命名管道\" class=\"headerlink\" title=\"FIFO 命名管道\"></a>FIFO 命名管道</h4><ul>\n<li>以上还是只能再相关程序之间传递数据,即由共同祖先进程启动的</li>\n<li>mknod / mkfifo(优先使用)</li>\n<li>cat &lt; fifofile &amp; , echo helloworld &gt; fifofile </li>\n<li>访问fifo文件: open 但是不能以读写的方式打开 </li>\n</ul>\n<h3 id=\"信号量-共享内存-消息队列\"><a href=\"#信号量-共享内存-消息队列\" class=\"headerlink\" title=\"信号量,共享内存,消息队列\"></a>信号量,共享内存,消息队列</h3><h4 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h4><h4 id=\"共享内存\"><a href=\"#共享内存\" class=\"headerlink\" title=\"共享内存\"></a>共享内存</h4><h4 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h4><h3 id=\"套接字\"><a href=\"#套接字\" class=\"headerlink\" title=\"套接字\"></a>套接字</h3><h4 id=\"套接字连接的工作原理\"><a href=\"#套接字连接的工作原理\" class=\"headerlink\" title=\"套接字连接的工作原理\"></a>套接字连接的工作原理</h4><ul>\n<li>套接字是一种通信机制,凭借这种机制,客户端/服务端系统的开发工作既可以在本地进行,也可以跨网络进行.</li>\n<li>套接字如何连接?<ul>\n<li>服务端<ul>\n<li>socket 调用创建一个套接字</li>\n<li>bind调用 命名 本地 系统文件名(/tmp 或者/usr/tmp), 网络 服务标识符(端口或者访问点)</li>\n<li>listen调用 创建一个队列并将其用于存放来自客户端的连接</li>\n<li>accept调用 接收客户端的连接</li>\n</ul>\n</li>\n<li>客户端<ul>\n<li>socket 调用创建一个套接字</li>\n<li>connect 以服务端的命名套接字作为一个地址来调用connect与服务器建立连接</li>\n</ul>\n</li>\n<li>套接字属性<ul>\n<li>域domain  最常见的是AF_INET 指的是internet 底层协议为IP协议</li>\n<li>类型<ul>\n<li>流套接字SOCK_STREAM 底层由TCP/IP实现</li>\n<li>数据报套接字 SOCK_DGRAM UDP/IP实现</li>\n<li>套接字协议</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"laravel队列","date":"2018-11-29T00:54:10.000Z","_content":"\n当我们想使某个任务异步执行时,可以考虑使用队列.那么laravel队列是如何实现的呢?\n\n<!-- more -->\n\n### 队列实现\n\n","source":"_posts/laravel队列.md","raw":"---\ntitle: laravel队列\ndate: 2018-11-29 08:54:10\ntags: \n- laravel\n- php\ncategories:\n- 源码分析\n---\n\n当我们想使某个任务异步执行时,可以考虑使用队列.那么laravel队列是如何实现的呢?\n\n<!-- more -->\n\n### 队列实现\n\n","slug":"laravel队列","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhbx000lzbovyr9p7z6z","content":"<p>当我们想使某个任务异步执行时,可以考虑使用队列.那么laravel队列是如何实现的呢?</p>\n<a id=\"more\"></a>\n<h3 id=\"队列实现\"><a href=\"#队列实现\" class=\"headerlink\" title=\"队列实现\"></a>队列实现</h3>","site":{"data":{}},"excerpt":"<p>当我们想使某个任务异步执行时,可以考虑使用队列.那么laravel队列是如何实现的呢?</p>","more":"<h3 id=\"队列实现\"><a href=\"#队列实现\" class=\"headerlink\" title=\"队列实现\"></a>队列实现</h3>"},{"title":"linux一些命令","date":"2018-12-29T06:02:11.000Z","_content":"\n平时用到的,感觉会忘记的\n\n<!-- more -->\n\n### man\n这个命令千万不能忘记!!!\n`man man`: 查看`man`的用法,很多命令后面有个括号括着一个数字,表示这个命令是属于哪个部分的.\n\n - 1   Executable programs or shell commands\n - 2   System calls (functions provided by the kernel)\n - 3   Library calls (functions within program libraries)\n - 4   Special files (usually found in /dev)\n - 5   File formats and conventions eg /etc/passwd\n - 6   Games\n - 7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)\n - 8   System administration commands (usually only for root)\n - 9   Kernel routines [Non standard]\n\n如果有多个如`kill`, 可以使用`man kill.2`查看系统调用的用法\n\n### ipcs , ipcrm\n\n","source":"_posts/linux一些命令.md","raw":"---\ntitle: linux一些命令\ndate: 2018-12-29 14:02:11\ntags: \n- linux\ncategories:\n- 计算机基础\n---\n\n平时用到的,感觉会忘记的\n\n<!-- more -->\n\n### man\n这个命令千万不能忘记!!!\n`man man`: 查看`man`的用法,很多命令后面有个括号括着一个数字,表示这个命令是属于哪个部分的.\n\n - 1   Executable programs or shell commands\n - 2   System calls (functions provided by the kernel)\n - 3   Library calls (functions within program libraries)\n - 4   Special files (usually found in /dev)\n - 5   File formats and conventions eg /etc/passwd\n - 6   Games\n - 7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)\n - 8   System administration commands (usually only for root)\n - 9   Kernel routines [Non standard]\n\n如果有多个如`kill`, 可以使用`man kill.2`查看系统调用的用法\n\n### ipcs , ipcrm\n\n","slug":"linux一些命令","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhby000pzbovqkau3gre","content":"<p>平时用到的,感觉会忘记的</p>\n<a id=\"more\"></a>\n<h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h3><p>这个命令千万不能忘记!!!<br><code>man man</code>: 查看<code>man</code>的用法,很多命令后面有个括号括着一个数字,表示这个命令是属于哪个部分的.</p>\n<ul>\n<li>1   Executable programs or shell commands</li>\n<li>2   System calls (functions provided by the kernel)</li>\n<li>3   Library calls (functions within program libraries)</li>\n<li>4   Special files (usually found in /dev)</li>\n<li>5   File formats and conventions eg /etc/passwd</li>\n<li>6   Games</li>\n<li>7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)</li>\n<li>8   System administration commands (usually only for root)</li>\n<li>9   Kernel routines [Non standard]</li>\n</ul>\n<p>如果有多个如<code>kill</code>, 可以使用<code>man kill.2</code>查看系统调用的用法</p>\n<h3 id=\"ipcs-ipcrm\"><a href=\"#ipcs-ipcrm\" class=\"headerlink\" title=\"ipcs , ipcrm\"></a>ipcs , ipcrm</h3>","site":{"data":{}},"excerpt":"<p>平时用到的,感觉会忘记的</p>","more":"<h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h3><p>这个命令千万不能忘记!!!<br><code>man man</code>: 查看<code>man</code>的用法,很多命令后面有个括号括着一个数字,表示这个命令是属于哪个部分的.</p>\n<ul>\n<li>1   Executable programs or shell commands</li>\n<li>2   System calls (functions provided by the kernel)</li>\n<li>3   Library calls (functions within program libraries)</li>\n<li>4   Special files (usually found in /dev)</li>\n<li>5   File formats and conventions eg /etc/passwd</li>\n<li>6   Games</li>\n<li>7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)</li>\n<li>8   System administration commands (usually only for root)</li>\n<li>9   Kernel routines [Non standard]</li>\n</ul>\n<p>如果有多个如<code>kill</code>, 可以使用<code>man kill.2</code>查看系统调用的用法</p>\n<h3 id=\"ipcs-ipcrm\"><a href=\"#ipcs-ipcrm\" class=\"headerlink\" title=\"ipcs , ipcrm\"></a>ipcs , ipcrm</h3>"},{"title":"mongo","date":"2018-07-27T09:33:52.000Z","_content":"\n爬网页数据\n\n<!-- more-->\n\n#### 1.场景\n\n1.  没有任何需求的爬虫...\n2.  全部给存起来...\n3.  直接存文档...\n\n#### 2.安装\n\n* docker很方便了.写compose文件,直接使用\n* 踩坑[The default Docker setup on Windows and OS X uses a VirtualBox VM to host the Docker daemon. Unfortunately, the mechanism VirtualBox uses to share folders between the host system and the Docker container is not compatible with the memory mapped files used by MongoDB (see vbox bug, docs.mongodb.org and related jira.mongodb.org bug). This means that it is not possible to run a MongoDB container with the data directory mapped to the host.](https://hub.docker.com/_/mongo/).大致就是说window和os x中的docker使用的是virtualbox VM,用它实现宿主和容器之间共享文件的机制和MongoDB不同,因此不能把数据目录放到宿主机上.事实证明总是报错:file busy.因此直接把数据放到容器里面了\n* yaml文件\n\n```yaml\nmongodb:\n  image: mongo:4.0\n  container_name: mongodb\n  environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: root\n  ports:\n    - 27017:27017\n```\n\n#### 3.常用操作\n\n[文档](https://docs.mongodb.com/manual/introduction/)\n","source":"_posts/mongo.md","raw":"---\ntitle: mongo\ndate: 2018-07-27 17:33:52\ntags: \n- mongo\ncategories:\n- 计算机基础 \n\n---\n\n爬网页数据\n\n<!-- more-->\n\n#### 1.场景\n\n1.  没有任何需求的爬虫...\n2.  全部给存起来...\n3.  直接存文档...\n\n#### 2.安装\n\n* docker很方便了.写compose文件,直接使用\n* 踩坑[The default Docker setup on Windows and OS X uses a VirtualBox VM to host the Docker daemon. Unfortunately, the mechanism VirtualBox uses to share folders between the host system and the Docker container is not compatible with the memory mapped files used by MongoDB (see vbox bug, docs.mongodb.org and related jira.mongodb.org bug). This means that it is not possible to run a MongoDB container with the data directory mapped to the host.](https://hub.docker.com/_/mongo/).大致就是说window和os x中的docker使用的是virtualbox VM,用它实现宿主和容器之间共享文件的机制和MongoDB不同,因此不能把数据目录放到宿主机上.事实证明总是报错:file busy.因此直接把数据放到容器里面了\n* yaml文件\n\n```yaml\nmongodb:\n  image: mongo:4.0\n  container_name: mongodb\n  environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: root\n  ports:\n    - 27017:27017\n```\n\n#### 3.常用操作\n\n[文档](https://docs.mongodb.com/manual/introduction/)\n","slug":"mongo","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhbz000rzbov05pe6yy8","content":"<p>爬网页数据</p>\n<a id=\"more\"></a>\n<h4 id=\"1-场景\"><a href=\"#1-场景\" class=\"headerlink\" title=\"1.场景\"></a>1.场景</h4><ol>\n<li>没有任何需求的爬虫…</li>\n<li>全部给存起来…</li>\n<li>直接存文档…</li>\n</ol>\n<h4 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2.安装\"></a>2.安装</h4><ul>\n<li>docker很方便了.写compose文件,直接使用</li>\n<li>踩坑<a href=\"https://hub.docker.com/_/mongo/\" target=\"_blank\" rel=\"noopener\">The default Docker setup on Windows and OS X uses a VirtualBox VM to host the Docker daemon. Unfortunately, the mechanism VirtualBox uses to share folders between the host system and the Docker container is not compatible with the memory mapped files used by MongoDB (see vbox bug, docs.mongodb.org and related jira.mongodb.org bug). This means that it is not possible to run a MongoDB container with the data directory mapped to the host.</a>.大致就是说window和os x中的docker使用的是virtualbox VM,用它实现宿主和容器之间共享文件的机制和MongoDB不同,因此不能把数据目录放到宿主机上.事实证明总是报错:file busy.因此直接把数据放到容器里面了</li>\n<li>yaml文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mongodb:</span></span><br><span class=\"line\"><span class=\"attr\">  image:</span> <span class=\"attr\">mongo:4.0</span></span><br><span class=\"line\"><span class=\"attr\">  container_name:</span> <span class=\"string\">mongodb</span></span><br><span class=\"line\"><span class=\"attr\">  environment:</span></span><br><span class=\"line\"><span class=\"attr\">      MONGO_INITDB_ROOT_USERNAME:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">      MONGO_INITDB_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">27017</span><span class=\"string\">:27017</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-常用操作\"><a href=\"#3-常用操作\" class=\"headerlink\" title=\"3.常用操作\"></a>3.常用操作</h4><p><a href=\"https://docs.mongodb.com/manual/introduction/\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n","site":{"data":{}},"excerpt":"<p>爬网页数据</p>","more":"<h4 id=\"1-场景\"><a href=\"#1-场景\" class=\"headerlink\" title=\"1.场景\"></a>1.场景</h4><ol>\n<li>没有任何需求的爬虫…</li>\n<li>全部给存起来…</li>\n<li>直接存文档…</li>\n</ol>\n<h4 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2.安装\"></a>2.安装</h4><ul>\n<li>docker很方便了.写compose文件,直接使用</li>\n<li>踩坑<a href=\"https://hub.docker.com/_/mongo/\" target=\"_blank\" rel=\"noopener\">The default Docker setup on Windows and OS X uses a VirtualBox VM to host the Docker daemon. Unfortunately, the mechanism VirtualBox uses to share folders between the host system and the Docker container is not compatible with the memory mapped files used by MongoDB (see vbox bug, docs.mongodb.org and related jira.mongodb.org bug). This means that it is not possible to run a MongoDB container with the data directory mapped to the host.</a>.大致就是说window和os x中的docker使用的是virtualbox VM,用它实现宿主和容器之间共享文件的机制和MongoDB不同,因此不能把数据目录放到宿主机上.事实证明总是报错:file busy.因此直接把数据放到容器里面了</li>\n<li>yaml文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mongodb:</span></span><br><span class=\"line\"><span class=\"attr\">  image:</span> <span class=\"attr\">mongo:4.0</span></span><br><span class=\"line\"><span class=\"attr\">  container_name:</span> <span class=\"string\">mongodb</span></span><br><span class=\"line\"><span class=\"attr\">  environment:</span></span><br><span class=\"line\"><span class=\"attr\">      MONGO_INITDB_ROOT_USERNAME:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">      MONGO_INITDB_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">27017</span><span class=\"string\">:27017</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-常用操作\"><a href=\"#3-常用操作\" class=\"headerlink\" title=\"3.常用操作\"></a>3.常用操作</h4><p><a href=\"https://docs.mongodb.com/manual/introduction/\" target=\"_blank\" rel=\"noopener\">文档</a></p>"},{"title":"php文件操作","date":"2018-07-27T09:33:52.000Z","_content":"\n介绍一些php操作文件的方法...项目中需要把log写成文件,然后利用脚本把log发送到专门的服务器,实现log与正式的服务器分离.减轻分析log给正式服务器造成的压力.\n\n<!-- more -->\n\n#### logmeta.cfg\n该文件记录了写入文件的名字,记录的条数,以及上次更新的时间\n\n```json\n{\n    \"logName\":\"NewHawk.log\",\n    \"MAX_LOG_COUNT\":10,\n    \"logCount\":0,\n    \"logFile\":0,\n    \"lastUpdate0\":1494299890,\n    \"lastUpdate1\":1494299940\n}\n```\n\n#### sendmeta.log\n该文件记录了上传log文件的信息:上传条数,当前文件指针的位置,当前上传的文件名称,最近上传时间\n```json\n{\n    \"currCount\":0,\n    \"currPos\":0,\n    \"currFile\":0,\n    \"lastUpdate\":1494299943\n}\n```\n\n#### 写文件 write.php\n名称为0/1的两个文件来回写,达到设定的最大条数切换文件\n读配置文件的时候加上排它锁避免多个进程同时读到,并且更改配置文件\n\n```php\n<?php\n\n$i = 1;\nwhile (1) {\n    my_log($i);\n    $i ++;\n    sleep(rand(1,3));\n}\n\nfunction my_log($data)\n{\n    clearstatcache();\n    $cfgFile = 'logmeta.cfg';\n    $cfp = fopen($cfgFile, 'r+');\n    if (flock($cfp, LOCK_EX)) {\n        $cfg = json_decode(fread($cfp, filesize($cfgFile)));\n        if (!$cfg) {\n            flock($cfp, LOCK_UN);\n            fclose($cfp);\n            return false;\n        }\n        $fileBaseName = $cfg->logName;\n        if ($cfg->logCount >= $cfg->MAX_LOG_COUNT) {\n            $cfg->logCount = 1;\n            $fileName = $cfg->logFile = ($cfg->logFile + 1) % 2;\n            $mode = 'w+';\n        } else {\n            $cfg->logCount++;\n            $fileName = $cfg->logFile;\n            $mode = 'a+';\n        }\n        $lastUpdate = 'lastUpdate' . $fileName;\n        $cfg->$lastUpdate = time();\n\n        ftruncate($cfp, 0);\n        fseek($cfp, 0);\n        fwrite($cfp, json_encode($cfg));\n        flock($cfp, LOCK_UN);\n        fclose($cfp);\n\n        $fp = fopen($fileBaseName . $fileName, $mode);\n        fwrite($fp, $data . \"\\n\");\n        fclose($fp);\n    }\n}\n```\n\n#### 上传文件send.php\n\n读取sendmeta.log和logmeta.cfg文件.找到未上传的部分上传.\n\n```php\n<?php\n\nfunction my_send()\n{\n    clearstatcache();\n    $logFile = \"logmeta.cfg\";\n    $sendFile = \"sendmeta.log\";\n    $cfp = fopen($logFile, \"r\");\n    $sdp = fopen($sendFile, \"r+\");\n    if (!$cfp || !$sdp) {\n        return \"can not open file\";\n    }\n\n    $cfgContent = fread($cfp, filesize($logFile));\n    $sdContent = fread($sdp, filesize($sendFile));\n\n    if (!$cfgContent || !$sdContent)  {\n        fclose($cfp);\n        fclose($cdp);\n        return \"can not read file\";\n    }\n    $cfg = json_decode($cfgContent);\n    $sd = json_decode($sdContent);\n\n    if ($sd->currCount >= $cfg->MAX_LOG_COUNT) {\n        $sd->currCount = 0;\n        $sd->currPos = 0;\n        $sd->currFile = ($sd->currFile + 1) % 2;\n    }\n\n    $lastTime = 'lastUpdate'.$sd->currFile;\n    $updated = $sd->lastUpdate < $cfg->$lastTime;\n\n    if (!$updated) {\n        return;\n    }\n\n    $addSize = filesize($cfg->logName . $sd->currFile) - $sd->currPos;\n    if ($addSize>0) {\n        $f = fopen($cfg->logName . $sd->currFile, 'r');\n        fseek($f, $sd->currPos);\n        $content = fread($f, $addSize);\n        $addCount = send_log($content);\n        $sd->currCount += $addCount;\n        $sd->currPos += $addSize;\n        $sd->lastUpdate = $cfg->$lastTime;\n        ftruncate($sdp, 0);\n        fseek($sdp, 0);\n        fwrite($sdp, json_encode($sd));\n    }\n    \n    fclose($sdp);\n    fclose($cfp);\n    \n}\n\nfunction send_log($data)\n{\n    $ret = explode(\"\\n\", $data);\n    return sizeof($ret) - 1;\n}\n\nwhile (1) {\n    my_send();\n    sleep(1);\n}\n```\n\n#### 一些相关文件操作\n* fopen(filename, mode)\n* flock(handle, operation)\n* fread(handle, length)\n* fwrite(handle, string)\n* ftruncate(handle, size)\n* fseek(handle, offset)\n* fclose(handle)\n* filesize(filename)\n\n[reference](http://php.net/manual/zh/function.fopen.php/)\n\n#### 多进程中的文件操作\n\n","source":"_posts/php文件操作.md","raw":"---\ntitle: php文件操作\ndate: 2018-07-27 17:33:52\ntags:\n- php\n- php文件操作\ncategories:\n- 源码分析\n---\n\n介绍一些php操作文件的方法...项目中需要把log写成文件,然后利用脚本把log发送到专门的服务器,实现log与正式的服务器分离.减轻分析log给正式服务器造成的压力.\n\n<!-- more -->\n\n#### logmeta.cfg\n该文件记录了写入文件的名字,记录的条数,以及上次更新的时间\n\n```json\n{\n    \"logName\":\"NewHawk.log\",\n    \"MAX_LOG_COUNT\":10,\n    \"logCount\":0,\n    \"logFile\":0,\n    \"lastUpdate0\":1494299890,\n    \"lastUpdate1\":1494299940\n}\n```\n\n#### sendmeta.log\n该文件记录了上传log文件的信息:上传条数,当前文件指针的位置,当前上传的文件名称,最近上传时间\n```json\n{\n    \"currCount\":0,\n    \"currPos\":0,\n    \"currFile\":0,\n    \"lastUpdate\":1494299943\n}\n```\n\n#### 写文件 write.php\n名称为0/1的两个文件来回写,达到设定的最大条数切换文件\n读配置文件的时候加上排它锁避免多个进程同时读到,并且更改配置文件\n\n```php\n<?php\n\n$i = 1;\nwhile (1) {\n    my_log($i);\n    $i ++;\n    sleep(rand(1,3));\n}\n\nfunction my_log($data)\n{\n    clearstatcache();\n    $cfgFile = 'logmeta.cfg';\n    $cfp = fopen($cfgFile, 'r+');\n    if (flock($cfp, LOCK_EX)) {\n        $cfg = json_decode(fread($cfp, filesize($cfgFile)));\n        if (!$cfg) {\n            flock($cfp, LOCK_UN);\n            fclose($cfp);\n            return false;\n        }\n        $fileBaseName = $cfg->logName;\n        if ($cfg->logCount >= $cfg->MAX_LOG_COUNT) {\n            $cfg->logCount = 1;\n            $fileName = $cfg->logFile = ($cfg->logFile + 1) % 2;\n            $mode = 'w+';\n        } else {\n            $cfg->logCount++;\n            $fileName = $cfg->logFile;\n            $mode = 'a+';\n        }\n        $lastUpdate = 'lastUpdate' . $fileName;\n        $cfg->$lastUpdate = time();\n\n        ftruncate($cfp, 0);\n        fseek($cfp, 0);\n        fwrite($cfp, json_encode($cfg));\n        flock($cfp, LOCK_UN);\n        fclose($cfp);\n\n        $fp = fopen($fileBaseName . $fileName, $mode);\n        fwrite($fp, $data . \"\\n\");\n        fclose($fp);\n    }\n}\n```\n\n#### 上传文件send.php\n\n读取sendmeta.log和logmeta.cfg文件.找到未上传的部分上传.\n\n```php\n<?php\n\nfunction my_send()\n{\n    clearstatcache();\n    $logFile = \"logmeta.cfg\";\n    $sendFile = \"sendmeta.log\";\n    $cfp = fopen($logFile, \"r\");\n    $sdp = fopen($sendFile, \"r+\");\n    if (!$cfp || !$sdp) {\n        return \"can not open file\";\n    }\n\n    $cfgContent = fread($cfp, filesize($logFile));\n    $sdContent = fread($sdp, filesize($sendFile));\n\n    if (!$cfgContent || !$sdContent)  {\n        fclose($cfp);\n        fclose($cdp);\n        return \"can not read file\";\n    }\n    $cfg = json_decode($cfgContent);\n    $sd = json_decode($sdContent);\n\n    if ($sd->currCount >= $cfg->MAX_LOG_COUNT) {\n        $sd->currCount = 0;\n        $sd->currPos = 0;\n        $sd->currFile = ($sd->currFile + 1) % 2;\n    }\n\n    $lastTime = 'lastUpdate'.$sd->currFile;\n    $updated = $sd->lastUpdate < $cfg->$lastTime;\n\n    if (!$updated) {\n        return;\n    }\n\n    $addSize = filesize($cfg->logName . $sd->currFile) - $sd->currPos;\n    if ($addSize>0) {\n        $f = fopen($cfg->logName . $sd->currFile, 'r');\n        fseek($f, $sd->currPos);\n        $content = fread($f, $addSize);\n        $addCount = send_log($content);\n        $sd->currCount += $addCount;\n        $sd->currPos += $addSize;\n        $sd->lastUpdate = $cfg->$lastTime;\n        ftruncate($sdp, 0);\n        fseek($sdp, 0);\n        fwrite($sdp, json_encode($sd));\n    }\n    \n    fclose($sdp);\n    fclose($cfp);\n    \n}\n\nfunction send_log($data)\n{\n    $ret = explode(\"\\n\", $data);\n    return sizeof($ret) - 1;\n}\n\nwhile (1) {\n    my_send();\n    sleep(1);\n}\n```\n\n#### 一些相关文件操作\n* fopen(filename, mode)\n* flock(handle, operation)\n* fread(handle, length)\n* fwrite(handle, string)\n* ftruncate(handle, size)\n* fseek(handle, offset)\n* fclose(handle)\n* filesize(filename)\n\n[reference](http://php.net/manual/zh/function.fopen.php/)\n\n#### 多进程中的文件操作\n\n","slug":"php文件操作","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhc0000vzbovxlhldwwv","content":"<p>介绍一些php操作文件的方法…项目中需要把log写成文件,然后利用脚本把log发送到专门的服务器,实现log与正式的服务器分离.减轻分析log给正式服务器造成的压力.</p>\n<a id=\"more\"></a>\n<h4 id=\"logmeta-cfg\"><a href=\"#logmeta-cfg\" class=\"headerlink\" title=\"logmeta.cfg\"></a>logmeta.cfg</h4><p>该文件记录了写入文件的名字,记录的条数,以及上次更新的时间</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"logName\"</span>:<span class=\"string\">\"NewHawk.log\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"MAX_LOG_COUNT\"</span>:<span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"logCount\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"logFile\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lastUpdate0\"</span>:<span class=\"number\">1494299890</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lastUpdate1\"</span>:<span class=\"number\">1494299940</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sendmeta-log\"><a href=\"#sendmeta-log\" class=\"headerlink\" title=\"sendmeta.log\"></a>sendmeta.log</h4><p>该文件记录了上传log文件的信息:上传条数,当前文件指针的位置,当前上传的文件名称,最近上传时间<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"currCount\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"currPos\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"currFile\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lastUpdate\"</span>:<span class=\"number\">1494299943</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"写文件-write-php\"><a href=\"#写文件-write-php\" class=\"headerlink\" title=\"写文件 write.php\"></a>写文件 write.php</h4><p>名称为0/1的两个文件来回写,达到设定的最大条数切换文件<br>读配置文件的时候加上排它锁避免多个进程同时读到,并且更改配置文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    my_log($i);</span><br><span class=\"line\">    $i ++;</span><br><span class=\"line\">    sleep(rand(<span class=\"number\">1</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">my_log</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    clearstatcache();</span><br><span class=\"line\">    $cfgFile = <span class=\"string\">'logmeta.cfg'</span>;</span><br><span class=\"line\">    $cfp = fopen($cfgFile, <span class=\"string\">'r+'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flock($cfp, LOCK_EX)) &#123;</span><br><span class=\"line\">        $cfg = json_decode(fread($cfp, filesize($cfgFile)));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$cfg) &#123;</span><br><span class=\"line\">            flock($cfp, LOCK_UN);</span><br><span class=\"line\">            fclose($cfp);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $fileBaseName = $cfg-&gt;logName;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($cfg-&gt;logCount &gt;= $cfg-&gt;MAX_LOG_COUNT) &#123;</span><br><span class=\"line\">            $cfg-&gt;logCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">            $fileName = $cfg-&gt;logFile = ($cfg-&gt;logFile + <span class=\"number\">1</span>) % <span class=\"number\">2</span>;</span><br><span class=\"line\">            $mode = <span class=\"string\">'w+'</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $cfg-&gt;logCount++;</span><br><span class=\"line\">            $fileName = $cfg-&gt;logFile;</span><br><span class=\"line\">            $mode = <span class=\"string\">'a+'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $lastUpdate = <span class=\"string\">'lastUpdate'</span> . $fileName;</span><br><span class=\"line\">        $cfg-&gt;$lastUpdate = time();</span><br><span class=\"line\"></span><br><span class=\"line\">        ftruncate($cfp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        fseek($cfp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        fwrite($cfp, json_encode($cfg));</span><br><span class=\"line\">        flock($cfp, LOCK_UN);</span><br><span class=\"line\">        fclose($cfp);</span><br><span class=\"line\"></span><br><span class=\"line\">        $fp = fopen($fileBaseName . $fileName, $mode);</span><br><span class=\"line\">        fwrite($fp, $data . <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        fclose($fp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"上传文件send-php\"><a href=\"#上传文件send-php\" class=\"headerlink\" title=\"上传文件send.php\"></a>上传文件send.php</h4><p>读取sendmeta.log和logmeta.cfg文件.找到未上传的部分上传.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">my_send</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    clearstatcache();</span><br><span class=\"line\">    $logFile = <span class=\"string\">\"logmeta.cfg\"</span>;</span><br><span class=\"line\">    $sendFile = <span class=\"string\">\"sendmeta.log\"</span>;</span><br><span class=\"line\">    $cfp = fopen($logFile, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">    $sdp = fopen($sendFile, <span class=\"string\">\"r+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$cfp || !$sdp) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"can not open file\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $cfgContent = fread($cfp, filesize($logFile));</span><br><span class=\"line\">    $sdContent = fread($sdp, filesize($sendFile));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$cfgContent || !$sdContent)  &#123;</span><br><span class=\"line\">        fclose($cfp);</span><br><span class=\"line\">        fclose($cdp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"can not read file\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $cfg = json_decode($cfgContent);</span><br><span class=\"line\">    $sd = json_decode($sdContent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($sd-&gt;currCount &gt;= $cfg-&gt;MAX_LOG_COUNT) &#123;</span><br><span class=\"line\">        $sd-&gt;currCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        $sd-&gt;currPos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        $sd-&gt;currFile = ($sd-&gt;currFile + <span class=\"number\">1</span>) % <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $lastTime = <span class=\"string\">'lastUpdate'</span>.$sd-&gt;currFile;</span><br><span class=\"line\">    $updated = $sd-&gt;lastUpdate &lt; $cfg-&gt;$lastTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$updated) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $addSize = filesize($cfg-&gt;logName . $sd-&gt;currFile) - $sd-&gt;currPos;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($addSize&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        $f = fopen($cfg-&gt;logName . $sd-&gt;currFile, <span class=\"string\">'r'</span>);</span><br><span class=\"line\">        fseek($f, $sd-&gt;currPos);</span><br><span class=\"line\">        $content = fread($f, $addSize);</span><br><span class=\"line\">        $addCount = send_log($content);</span><br><span class=\"line\">        $sd-&gt;currCount += $addCount;</span><br><span class=\"line\">        $sd-&gt;currPos += $addSize;</span><br><span class=\"line\">        $sd-&gt;lastUpdate = $cfg-&gt;$lastTime;</span><br><span class=\"line\">        ftruncate($sdp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        fseek($sdp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        fwrite($sdp, json_encode($sd));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    fclose($sdp);</span><br><span class=\"line\">    fclose($cfp);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send_log</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $ret = explode(<span class=\"string\">\"\\n\"</span>, $data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sizeof($ret) - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    my_send();</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"一些相关文件操作\"><a href=\"#一些相关文件操作\" class=\"headerlink\" title=\"一些相关文件操作\"></a>一些相关文件操作</h4><ul>\n<li>fopen(filename, mode)</li>\n<li>flock(handle, operation)</li>\n<li>fread(handle, length)</li>\n<li>fwrite(handle, string)</li>\n<li>ftruncate(handle, size)</li>\n<li>fseek(handle, offset)</li>\n<li>fclose(handle)</li>\n<li>filesize(filename)</li>\n</ul>\n<p><a href=\"http://php.net/manual/zh/function.fopen.php/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n<h4 id=\"多进程中的文件操作\"><a href=\"#多进程中的文件操作\" class=\"headerlink\" title=\"多进程中的文件操作\"></a>多进程中的文件操作</h4>","site":{"data":{}},"excerpt":"<p>介绍一些php操作文件的方法…项目中需要把log写成文件,然后利用脚本把log发送到专门的服务器,实现log与正式的服务器分离.减轻分析log给正式服务器造成的压力.</p>","more":"<h4 id=\"logmeta-cfg\"><a href=\"#logmeta-cfg\" class=\"headerlink\" title=\"logmeta.cfg\"></a>logmeta.cfg</h4><p>该文件记录了写入文件的名字,记录的条数,以及上次更新的时间</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"logName\"</span>:<span class=\"string\">\"NewHawk.log\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"MAX_LOG_COUNT\"</span>:<span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"logCount\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"logFile\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lastUpdate0\"</span>:<span class=\"number\">1494299890</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lastUpdate1\"</span>:<span class=\"number\">1494299940</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sendmeta-log\"><a href=\"#sendmeta-log\" class=\"headerlink\" title=\"sendmeta.log\"></a>sendmeta.log</h4><p>该文件记录了上传log文件的信息:上传条数,当前文件指针的位置,当前上传的文件名称,最近上传时间<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"currCount\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"currPos\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"currFile\"</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lastUpdate\"</span>:<span class=\"number\">1494299943</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"写文件-write-php\"><a href=\"#写文件-write-php\" class=\"headerlink\" title=\"写文件 write.php\"></a>写文件 write.php</h4><p>名称为0/1的两个文件来回写,达到设定的最大条数切换文件<br>读配置文件的时候加上排它锁避免多个进程同时读到,并且更改配置文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    my_log($i);</span><br><span class=\"line\">    $i ++;</span><br><span class=\"line\">    sleep(rand(<span class=\"number\">1</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">my_log</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    clearstatcache();</span><br><span class=\"line\">    $cfgFile = <span class=\"string\">'logmeta.cfg'</span>;</span><br><span class=\"line\">    $cfp = fopen($cfgFile, <span class=\"string\">'r+'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flock($cfp, LOCK_EX)) &#123;</span><br><span class=\"line\">        $cfg = json_decode(fread($cfp, filesize($cfgFile)));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$cfg) &#123;</span><br><span class=\"line\">            flock($cfp, LOCK_UN);</span><br><span class=\"line\">            fclose($cfp);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $fileBaseName = $cfg-&gt;logName;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($cfg-&gt;logCount &gt;= $cfg-&gt;MAX_LOG_COUNT) &#123;</span><br><span class=\"line\">            $cfg-&gt;logCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">            $fileName = $cfg-&gt;logFile = ($cfg-&gt;logFile + <span class=\"number\">1</span>) % <span class=\"number\">2</span>;</span><br><span class=\"line\">            $mode = <span class=\"string\">'w+'</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $cfg-&gt;logCount++;</span><br><span class=\"line\">            $fileName = $cfg-&gt;logFile;</span><br><span class=\"line\">            $mode = <span class=\"string\">'a+'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $lastUpdate = <span class=\"string\">'lastUpdate'</span> . $fileName;</span><br><span class=\"line\">        $cfg-&gt;$lastUpdate = time();</span><br><span class=\"line\"></span><br><span class=\"line\">        ftruncate($cfp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        fseek($cfp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        fwrite($cfp, json_encode($cfg));</span><br><span class=\"line\">        flock($cfp, LOCK_UN);</span><br><span class=\"line\">        fclose($cfp);</span><br><span class=\"line\"></span><br><span class=\"line\">        $fp = fopen($fileBaseName . $fileName, $mode);</span><br><span class=\"line\">        fwrite($fp, $data . <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        fclose($fp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"上传文件send-php\"><a href=\"#上传文件send-php\" class=\"headerlink\" title=\"上传文件send.php\"></a>上传文件send.php</h4><p>读取sendmeta.log和logmeta.cfg文件.找到未上传的部分上传.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">my_send</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    clearstatcache();</span><br><span class=\"line\">    $logFile = <span class=\"string\">\"logmeta.cfg\"</span>;</span><br><span class=\"line\">    $sendFile = <span class=\"string\">\"sendmeta.log\"</span>;</span><br><span class=\"line\">    $cfp = fopen($logFile, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">    $sdp = fopen($sendFile, <span class=\"string\">\"r+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$cfp || !$sdp) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"can not open file\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $cfgContent = fread($cfp, filesize($logFile));</span><br><span class=\"line\">    $sdContent = fread($sdp, filesize($sendFile));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$cfgContent || !$sdContent)  &#123;</span><br><span class=\"line\">        fclose($cfp);</span><br><span class=\"line\">        fclose($cdp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"can not read file\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $cfg = json_decode($cfgContent);</span><br><span class=\"line\">    $sd = json_decode($sdContent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($sd-&gt;currCount &gt;= $cfg-&gt;MAX_LOG_COUNT) &#123;</span><br><span class=\"line\">        $sd-&gt;currCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        $sd-&gt;currPos = <span class=\"number\">0</span>;</span><br><span class=\"line\">        $sd-&gt;currFile = ($sd-&gt;currFile + <span class=\"number\">1</span>) % <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $lastTime = <span class=\"string\">'lastUpdate'</span>.$sd-&gt;currFile;</span><br><span class=\"line\">    $updated = $sd-&gt;lastUpdate &lt; $cfg-&gt;$lastTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$updated) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $addSize = filesize($cfg-&gt;logName . $sd-&gt;currFile) - $sd-&gt;currPos;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($addSize&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        $f = fopen($cfg-&gt;logName . $sd-&gt;currFile, <span class=\"string\">'r'</span>);</span><br><span class=\"line\">        fseek($f, $sd-&gt;currPos);</span><br><span class=\"line\">        $content = fread($f, $addSize);</span><br><span class=\"line\">        $addCount = send_log($content);</span><br><span class=\"line\">        $sd-&gt;currCount += $addCount;</span><br><span class=\"line\">        $sd-&gt;currPos += $addSize;</span><br><span class=\"line\">        $sd-&gt;lastUpdate = $cfg-&gt;$lastTime;</span><br><span class=\"line\">        ftruncate($sdp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        fseek($sdp, <span class=\"number\">0</span>);</span><br><span class=\"line\">        fwrite($sdp, json_encode($sd));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    fclose($sdp);</span><br><span class=\"line\">    fclose($cfp);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send_log</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $ret = explode(<span class=\"string\">\"\\n\"</span>, $data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sizeof($ret) - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    my_send();</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"一些相关文件操作\"><a href=\"#一些相关文件操作\" class=\"headerlink\" title=\"一些相关文件操作\"></a>一些相关文件操作</h4><ul>\n<li>fopen(filename, mode)</li>\n<li>flock(handle, operation)</li>\n<li>fread(handle, length)</li>\n<li>fwrite(handle, string)</li>\n<li>ftruncate(handle, size)</li>\n<li>fseek(handle, offset)</li>\n<li>fclose(handle)</li>\n<li>filesize(filename)</li>\n</ul>\n<p><a href=\"http://php.net/manual/zh/function.fopen.php/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n<h4 id=\"多进程中的文件操作\"><a href=\"#多进程中的文件操作\" class=\"headerlink\" title=\"多进程中的文件操作\"></a>多进程中的文件操作</h4>"},{"title":"php源码阅读","date":"2019-01-07T23:37:50.000Z","_content":"\n\n","source":"_posts/php源码阅读.md","raw":"---\ntitle: php源码阅读\ndate: 2019-01-08 07:37:50\ntags:\n---\n\n\n","slug":"php源码阅读","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhc1000xzbovifntugwe","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sql语句","date":"2018-12-11T21:43:06.000Z","_content":"\n写的一些sql语句 记下来\n\n<!-- more -->\n\n### 按字段a分组之后 根据字段b的不同情况 统计字段c的和\n\n统计用户在投资金中,两个产品的和\n```sql\nSELECT\n    user_id,\n    money,\n    money_return,\n    investing_money,\n    sum( CASE WHEN type = 1 OR type = 2 OR type = 3 OR type = 7 THEN amount ELSE 0 END ) AS mm,\n    sum( CASE WHEN type = 4 OR type = 5 OR type = 6 OR type = 8 THEN amount ELSE 0 END ) AS cfd \nFROM\n    (\nSELECT\n    u.user_id AS user_id,\n    p.id AS plan_id,\n    p.type AS type,\n    u.money,\n    u.money_return,\n    u.investing_money,\n    r.amount \nFROM\n    tp_coupon.stpc_user AS u\n    JOIN mmplan.mmp_return AS r ON r.uid = u.user_id\n    JOIN mmplan.mmp_project_record AS pr ON pr.id = r.pr_id\n    JOIN mmplan.mmp_project AS prj ON prj.id = pr.prj_id\n    JOIN mmplan.mmp_plan AS p ON p.id = prj.plan_id \nWHERE\n    u.investing_money > 0 \n    AND r.STATUS = 1 \n    AND r.is_capital = 1 \n    ) AS tmp \nGROUP BY\n    user_id\n```\n使用case when ... then ... else ... end 来统计\n\n### mysql创建用户,授权,更改密码,撤销用户权限,删除用户\n\n- 创建用户:`create user \"username\"@\"%\" identified by \"123456\"`\n- 授权:`grant select , insert on test.user to \"username\"@\"%\"`\n- 更改用户密码:`set password for \"username\"@\"%\"=password(\"newpassword\")`\n- 撤销用户权限:`revoke select on *.* from \"username\"@\"%\"`\n- 删除:`drop user \"username\"@\"%\"`\n\n### mysql备份\n\n- `mysqldump -h xxx -uxx -p dbname > name.dump`:备份, `-d`:只导出结构  `dbtable`:指定表\n- `mysql dbname < name.dump`:恢复 \n","source":"_posts/sql语句.md","raw":"---\ntitle: sql语句\ndate: 2018-12-12 05:43:06\ntags:\n- sql\ncategories:\n- 计算机基础\n---\n\n写的一些sql语句 记下来\n\n<!-- more -->\n\n### 按字段a分组之后 根据字段b的不同情况 统计字段c的和\n\n统计用户在投资金中,两个产品的和\n```sql\nSELECT\n    user_id,\n    money,\n    money_return,\n    investing_money,\n    sum( CASE WHEN type = 1 OR type = 2 OR type = 3 OR type = 7 THEN amount ELSE 0 END ) AS mm,\n    sum( CASE WHEN type = 4 OR type = 5 OR type = 6 OR type = 8 THEN amount ELSE 0 END ) AS cfd \nFROM\n    (\nSELECT\n    u.user_id AS user_id,\n    p.id AS plan_id,\n    p.type AS type,\n    u.money,\n    u.money_return,\n    u.investing_money,\n    r.amount \nFROM\n    tp_coupon.stpc_user AS u\n    JOIN mmplan.mmp_return AS r ON r.uid = u.user_id\n    JOIN mmplan.mmp_project_record AS pr ON pr.id = r.pr_id\n    JOIN mmplan.mmp_project AS prj ON prj.id = pr.prj_id\n    JOIN mmplan.mmp_plan AS p ON p.id = prj.plan_id \nWHERE\n    u.investing_money > 0 \n    AND r.STATUS = 1 \n    AND r.is_capital = 1 \n    ) AS tmp \nGROUP BY\n    user_id\n```\n使用case when ... then ... else ... end 来统计\n\n### mysql创建用户,授权,更改密码,撤销用户权限,删除用户\n\n- 创建用户:`create user \"username\"@\"%\" identified by \"123456\"`\n- 授权:`grant select , insert on test.user to \"username\"@\"%\"`\n- 更改用户密码:`set password for \"username\"@\"%\"=password(\"newpassword\")`\n- 撤销用户权限:`revoke select on *.* from \"username\"@\"%\"`\n- 删除:`drop user \"username\"@\"%\"`\n\n### mysql备份\n\n- `mysqldump -h xxx -uxx -p dbname > name.dump`:备份, `-d`:只导出结构  `dbtable`:指定表\n- `mysql dbname < name.dump`:恢复 \n","slug":"sql语句","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhc20010zbov7h2w23ii","content":"<p>写的一些sql语句 记下来</p>\n<a id=\"more\"></a>\n<h3 id=\"按字段a分组之后-根据字段b的不同情况-统计字段c的和\"><a href=\"#按字段a分组之后-根据字段b的不同情况-统计字段c的和\" class=\"headerlink\" title=\"按字段a分组之后 根据字段b的不同情况 统计字段c的和\"></a>按字段a分组之后 根据字段b的不同情况 统计字段c的和</h3><p>统计用户在投资金中,两个产品的和<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    user_id,</span><br><span class=\"line\">    money,</span><br><span class=\"line\">    money_return,</span><br><span class=\"line\">    investing_money,</span><br><span class=\"line\">    <span class=\"keyword\">sum</span>( <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"keyword\">type</span> = <span class=\"number\">1</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">type</span> = <span class=\"number\">2</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">type</span> = <span class=\"number\">3</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">type</span> = <span class=\"number\">7</span> <span class=\"keyword\">THEN</span> amount <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> mm,</span><br><span class=\"line\">    <span class=\"keyword\">sum</span>( <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"keyword\">type</span> = <span class=\"number\">4</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">type</span> = <span class=\"number\">5</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">type</span> = <span class=\"number\">6</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">type</span> = <span class=\"number\">8</span> <span class=\"keyword\">THEN</span> amount <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> cfd </span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    (</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    u.user_id <span class=\"keyword\">AS</span> user_id,</span><br><span class=\"line\">    p.id <span class=\"keyword\">AS</span> plan_id,</span><br><span class=\"line\">    p.type <span class=\"keyword\">AS</span> <span class=\"keyword\">type</span>,</span><br><span class=\"line\">    u.money,</span><br><span class=\"line\">    u.money_return,</span><br><span class=\"line\">    u.investing_money,</span><br><span class=\"line\">    r.amount </span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    tp_coupon.stpc_user <span class=\"keyword\">AS</span> u</span><br><span class=\"line\">    <span class=\"keyword\">JOIN</span> mmplan.mmp_return <span class=\"keyword\">AS</span> r <span class=\"keyword\">ON</span> r.uid = u.user_id</span><br><span class=\"line\">    <span class=\"keyword\">JOIN</span> mmplan.mmp_project_record <span class=\"keyword\">AS</span> pr <span class=\"keyword\">ON</span> pr.id = r.pr_id</span><br><span class=\"line\">    <span class=\"keyword\">JOIN</span> mmplan.mmp_project <span class=\"keyword\">AS</span> prj <span class=\"keyword\">ON</span> prj.id = pr.prj_id</span><br><span class=\"line\">    <span class=\"keyword\">JOIN</span> mmplan.mmp_plan <span class=\"keyword\">AS</span> p <span class=\"keyword\">ON</span> p.id = prj.plan_id </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    u.investing_money &gt; <span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> r.STATUS = <span class=\"number\">1</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> r.is_capital = <span class=\"number\">1</span> </span><br><span class=\"line\">    ) <span class=\"keyword\">AS</span> tmp </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">    user_id</span><br></pre></td></tr></table></figure></p>\n<p>使用case when … then … else … end 来统计</p>\n<h3 id=\"mysql创建用户-授权-更改密码-撤销用户权限-删除用户\"><a href=\"#mysql创建用户-授权-更改密码-撤销用户权限-删除用户\" class=\"headerlink\" title=\"mysql创建用户,授权,更改密码,撤销用户权限,删除用户\"></a>mysql创建用户,授权,更改密码,撤销用户权限,删除用户</h3><ul>\n<li>创建用户:<code>create user &quot;username&quot;@&quot;%&quot; identified by &quot;123456&quot;</code></li>\n<li>授权:<code>grant select , insert on test.user to &quot;username&quot;@&quot;%&quot;</code></li>\n<li>更改用户密码:<code>set password for &quot;username&quot;@&quot;%&quot;=password(&quot;newpassword&quot;)</code></li>\n<li>撤销用户权限:<code>revoke select on *.* from &quot;username&quot;@&quot;%&quot;</code></li>\n<li>删除:<code>drop user &quot;username&quot;@&quot;%&quot;</code></li>\n</ul>\n<h3 id=\"mysql备份\"><a href=\"#mysql备份\" class=\"headerlink\" title=\"mysql备份\"></a>mysql备份</h3><ul>\n<li><code>mysqldump -h xxx -uxx -p dbname &gt; name.dump</code>:备份, <code>-d</code>:只导出结构  <code>dbtable</code>:指定表</li>\n<li><code>mysql dbname &lt; name.dump</code>:恢复 </li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>写的一些sql语句 记下来</p>","more":"<h3 id=\"按字段a分组之后-根据字段b的不同情况-统计字段c的和\"><a href=\"#按字段a分组之后-根据字段b的不同情况-统计字段c的和\" class=\"headerlink\" title=\"按字段a分组之后 根据字段b的不同情况 统计字段c的和\"></a>按字段a分组之后 根据字段b的不同情况 统计字段c的和</h3><p>统计用户在投资金中,两个产品的和<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    user_id,</span><br><span class=\"line\">    money,</span><br><span class=\"line\">    money_return,</span><br><span class=\"line\">    investing_money,</span><br><span class=\"line\">    <span class=\"keyword\">sum</span>( <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"keyword\">type</span> = <span class=\"number\">1</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">type</span> = <span class=\"number\">2</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">type</span> = <span class=\"number\">3</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">type</span> = <span class=\"number\">7</span> <span class=\"keyword\">THEN</span> amount <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> mm,</span><br><span class=\"line\">    <span class=\"keyword\">sum</span>( <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"keyword\">type</span> = <span class=\"number\">4</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">type</span> = <span class=\"number\">5</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">type</span> = <span class=\"number\">6</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">type</span> = <span class=\"number\">8</span> <span class=\"keyword\">THEN</span> amount <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> cfd </span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    (</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    u.user_id <span class=\"keyword\">AS</span> user_id,</span><br><span class=\"line\">    p.id <span class=\"keyword\">AS</span> plan_id,</span><br><span class=\"line\">    p.type <span class=\"keyword\">AS</span> <span class=\"keyword\">type</span>,</span><br><span class=\"line\">    u.money,</span><br><span class=\"line\">    u.money_return,</span><br><span class=\"line\">    u.investing_money,</span><br><span class=\"line\">    r.amount </span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    tp_coupon.stpc_user <span class=\"keyword\">AS</span> u</span><br><span class=\"line\">    <span class=\"keyword\">JOIN</span> mmplan.mmp_return <span class=\"keyword\">AS</span> r <span class=\"keyword\">ON</span> r.uid = u.user_id</span><br><span class=\"line\">    <span class=\"keyword\">JOIN</span> mmplan.mmp_project_record <span class=\"keyword\">AS</span> pr <span class=\"keyword\">ON</span> pr.id = r.pr_id</span><br><span class=\"line\">    <span class=\"keyword\">JOIN</span> mmplan.mmp_project <span class=\"keyword\">AS</span> prj <span class=\"keyword\">ON</span> prj.id = pr.prj_id</span><br><span class=\"line\">    <span class=\"keyword\">JOIN</span> mmplan.mmp_plan <span class=\"keyword\">AS</span> p <span class=\"keyword\">ON</span> p.id = prj.plan_id </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    u.investing_money &gt; <span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> r.STATUS = <span class=\"number\">1</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> r.is_capital = <span class=\"number\">1</span> </span><br><span class=\"line\">    ) <span class=\"keyword\">AS</span> tmp </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">    user_id</span><br></pre></td></tr></table></figure></p>\n<p>使用case when … then … else … end 来统计</p>\n<h3 id=\"mysql创建用户-授权-更改密码-撤销用户权限-删除用户\"><a href=\"#mysql创建用户-授权-更改密码-撤销用户权限-删除用户\" class=\"headerlink\" title=\"mysql创建用户,授权,更改密码,撤销用户权限,删除用户\"></a>mysql创建用户,授权,更改密码,撤销用户权限,删除用户</h3><ul>\n<li>创建用户:<code>create user &quot;username&quot;@&quot;%&quot; identified by &quot;123456&quot;</code></li>\n<li>授权:<code>grant select , insert on test.user to &quot;username&quot;@&quot;%&quot;</code></li>\n<li>更改用户密码:<code>set password for &quot;username&quot;@&quot;%&quot;=password(&quot;newpassword&quot;)</code></li>\n<li>撤销用户权限:<code>revoke select on *.* from &quot;username&quot;@&quot;%&quot;</code></li>\n<li>删除:<code>drop user &quot;username&quot;@&quot;%&quot;</code></li>\n</ul>\n<h3 id=\"mysql备份\"><a href=\"#mysql备份\" class=\"headerlink\" title=\"mysql备份\"></a>mysql备份</h3><ul>\n<li><code>mysqldump -h xxx -uxx -p dbname &gt; name.dump</code>:备份, <code>-d</code>:只导出结构  <code>dbtable</code>:指定表</li>\n<li><code>mysql dbname &lt; name.dump</code>:恢复 </li>\n</ul>"},{"title":"pipeline的理解","date":"2018-11-09T20:57:18.000Z","_content":"\nlaravel里面有一个比较绕,但是非常优雅的中间件的实现--`pipeline`\n\n<!-- more -->\n\n\n### 起因\nlaravel中有如下一段代码看起来很费劲,好好研究一下\n```php\n(new Pipeline($this->app))\n                    ->send($request)\n                    ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware)\n                    ->then($this->dispatchToRouter());\n\n/**\n * Set the object being sent through the pipeline.\n *\n * @param  mixed  $passable\n * @return $this\n */\npublic function send($passable)\n{\n    $this->passable = $passable;\n\n    return $this;\n}\n\n/**\n * Set the array of pipes.\n *\n * @param  array|mixed  $pipes\n * @return $this\n */\npublic function through($pipes)\n{\n    $this->pipes = is_array($pipes) ? $pipes : func_get_args();\n\n    return $this;\n}\n\n/**\n * Run the pipeline with a final destination callback.\n *\n * @param  \\Closure  $destination\n * @return mixed\n */\npublic function then(Closure $destination)\n{\n    $pipeline = array_reduce(\n        array_reverse($this->pipes), $this->carry(), $this->prepareDestination($destination)\n    );\n    return $pipeline($this->passable);\n}\n```\n\n### array_reduce用法分析\narray_reduce 和 array_map , array_filter 一起是三个常用的高阶函数(函数的参数可以接收别的函数)\n\n下面来自php手册:\n\n>mixed array_reduce ( array $array , callable $callback [, mixed $initial = NULL ] )\n>    \n>array\n>输入的 array。\n>    \n>callback\n>mixed callback ( mixed $carry , mixed $item )\n>    carry\n>    携带上次迭代里的值； 如果本次迭代是第一次，那么这个值是 initial。\n>    \n>    item\n>    携带了本次迭代的值。\n>    \n>initial\n>如果指定了可选参数 initial，该参数将在处理开始前使用，或者当处理结束，数组为空时的最后一个结果。\n\n```php\n<?php\nfunction sum($carry, $item)\n{\n    $carry += $item;\n    return $carry;\n}\n\nfunction product($carry, $item)\n{\n    $carry *= $item;\n    return $carry;\n}\n\n$a = array(1, 2, 3, 4, 5);\n$x = array();\n\nvar_dump(array_reduce($a, \"sum\")); // int(15)\nvar_dump(array_reduce($a, \"product\", 10)); // int(1200), because: 10*1*2*3*4*5\nvar_dump(array_reduce($x, \"sum\", \"No data to reduce\")); // string(17) \"No data to reduce\"\n?>\n```\n上面的例子比较容易理解,但是理解了这个似乎还是看不懂Pipeline的then是如何调用的,请看下面一个例子\n```php\n<?php\n$array = [\n    function ($i, $next) {\n        return $next($i + 1);\n    },\n    function ($j, $next) {\n        return $next($j * 2);\n    },\n];\n\n$ret = array_reduce(array_reverse($array), function ($carry, $item) {\n    return function ($k) use ($carry, $item) {\n        return $item($k, $carry);\n    };\n}, function ($m) {\n    return $m * 100;\n});\n\nvar_dump($ret);\nvar_dump($ret(4));\n```\n打印结果:\n\n        object(Closure)#6 (2) { 第二步返回的闭包\n            [\"static\"]=> array(2) {   // use \n                [\"carry\"]=> object(Closure)#5 (2) { //第一步 返回的闭包\n                    [\"static\"]=> array(2) {  // use\n                        [\"carry\"]=> object(Closure)#4 (1) {[\"parameter\"]=> array(1) { [\"$m\"]=> string(10) \"\" } } //initial 10\n                        [\"item\"]=> object(Closure)#2 (1) {[\"parameter\"]=> array(2) { [\"$j\"]=> string(10) \"\" [\"$next\"]=> string(10) \"\" } } //array[1]  $carry(5 * 2)\n                    } \n                    [\"parameter\"]=> array(1) { [\"$k\"]=> string(10) \"\" } // 5\n                }\n                [\"item\"]=> object(Closure)#1 (1) {[\"parameter\"]=> array(2) { [\"$i\"]=> string(10) \"\" [\"$next\"]=> string(10) \"\" } } //array[0]  $carry(4+1)\n            } \n            [\"parameter\"]=> array(1) { [\"$k\"]=> string(10) \"\" } // 4\n        } \n        int(1000)\n\n分析闭包执行流程\n\n1. #5 是第一步返回的闭包,也就是$carray的值#5, #6则是第二步返回的闭包,也就是$carry/$ret的值\n2. 第一次传递参数4 执行$item(4,$carry) 返回$carry(5)  // $item 为$array[0]\n3. 第二次传递参数5 执行$item(5,$carry) 返回$carry(10) // $item 为$array[1]\n4. 第三次传递参数10 执行$carry(10)  返回1000 // $carry 为$initial\n\n### Pipeline分析\n有了上面的例子之后就比较容易理解Pipeline的then方法了,代码的意思就是在路由分发之前先把请求通过middleware\n\n继续看`dispatchToRouter`这个方法最终干了什么?\n\n```php\n/* Kenel */\n\n/**\n * Get the route dispatcher callback.\n *\n * @return \\Closure\n */\nprotected function dispatchToRouter()\n{\n    return function ($request) {\n        $this->app->instance('request', $request);\n\n        return $this->router->dispatch($request);\n    };\n}\n\n/* Router */\n\n/**\n * Dispatch the request to the application.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */\npublic function dispatch(Request $request)\n{\n    $this->currentRequest = $request;\n\n    return $this->dispatchToRoute($request);\n}\n\n\n/**\n * Dispatch the request to a route and return the response.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return mixed\n */\npublic function dispatchToRoute(Request $request)\n{\n    // First we will find a route that matches this request. We will also set the\n    // route resolver on the request so middlewares assigned to the route will\n    // receive access to this route instance for checking of the parameters.\n    $route = $this->findRoute($request);\n\n    $request->setRouteResolver(function () use ($route) {\n        return $route;\n    });\n\n    $this->events->dispatch(new Events\\RouteMatched($route, $request));\n\n    $response = $this->runRouteWithinStack($route, $request);\n\n    return $this->prepareResponse($request, $response);\n}\n\n/**\n * Run the given route within a Stack \"onion\" instance.\n *\n * @param  \\Illuminate\\Routing\\Route  $route\n * @param  \\Illuminate\\Http\\Request  $request\n * @return mixed\n */\nprotected function runRouteWithinStack(Route $route, Request $request)\n{\n    $shouldSkipMiddleware = $this->container->bound('middleware.disable') &&\n                            $this->container->make('middleware.disable') === true;\n\n    $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route);\n\n    return (new Pipeline($this->container))\n                    ->send($request)\n                    ->through($middleware)\n                    ->then(function ($request) use ($route) {\n                        return $this->prepareResponse(\n                            $request, $route->run()\n                        );\n                    });\n}\n\n/* Route */\n\n/**\n * Run the route action and return the response.\n *\n * @return mixed\n */\npublic function run()\n{\n    $this->container = $this->container ?: new Container;\n\n    try {\n        if ($this->isControllerAction()) {\n            return $this->runController();\n        }\n\n        return $this->runCallable();\n    } catch (HttpResponseException $e) {\n        return $e->getResponse();\n    }\n}\n```\n可以看到在Router里面又使用了一个Pipeline,但是两个使用的middleware并不是同一个\n\n从接受到请求到交给控制器处理,中间使用了两次Pipeline,经过了两组中间件\n","source":"_posts/pipeline的理解.md","raw":"---\ntitle: pipeline的理解\ndate: 2018-11-10 04:57:18\ntags:\n- php\n- laravel\n- pipeline\ncategories:\n- 源码分析\n---\n\nlaravel里面有一个比较绕,但是非常优雅的中间件的实现--`pipeline`\n\n<!-- more -->\n\n\n### 起因\nlaravel中有如下一段代码看起来很费劲,好好研究一下\n```php\n(new Pipeline($this->app))\n                    ->send($request)\n                    ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware)\n                    ->then($this->dispatchToRouter());\n\n/**\n * Set the object being sent through the pipeline.\n *\n * @param  mixed  $passable\n * @return $this\n */\npublic function send($passable)\n{\n    $this->passable = $passable;\n\n    return $this;\n}\n\n/**\n * Set the array of pipes.\n *\n * @param  array|mixed  $pipes\n * @return $this\n */\npublic function through($pipes)\n{\n    $this->pipes = is_array($pipes) ? $pipes : func_get_args();\n\n    return $this;\n}\n\n/**\n * Run the pipeline with a final destination callback.\n *\n * @param  \\Closure  $destination\n * @return mixed\n */\npublic function then(Closure $destination)\n{\n    $pipeline = array_reduce(\n        array_reverse($this->pipes), $this->carry(), $this->prepareDestination($destination)\n    );\n    return $pipeline($this->passable);\n}\n```\n\n### array_reduce用法分析\narray_reduce 和 array_map , array_filter 一起是三个常用的高阶函数(函数的参数可以接收别的函数)\n\n下面来自php手册:\n\n>mixed array_reduce ( array $array , callable $callback [, mixed $initial = NULL ] )\n>    \n>array\n>输入的 array。\n>    \n>callback\n>mixed callback ( mixed $carry , mixed $item )\n>    carry\n>    携带上次迭代里的值； 如果本次迭代是第一次，那么这个值是 initial。\n>    \n>    item\n>    携带了本次迭代的值。\n>    \n>initial\n>如果指定了可选参数 initial，该参数将在处理开始前使用，或者当处理结束，数组为空时的最后一个结果。\n\n```php\n<?php\nfunction sum($carry, $item)\n{\n    $carry += $item;\n    return $carry;\n}\n\nfunction product($carry, $item)\n{\n    $carry *= $item;\n    return $carry;\n}\n\n$a = array(1, 2, 3, 4, 5);\n$x = array();\n\nvar_dump(array_reduce($a, \"sum\")); // int(15)\nvar_dump(array_reduce($a, \"product\", 10)); // int(1200), because: 10*1*2*3*4*5\nvar_dump(array_reduce($x, \"sum\", \"No data to reduce\")); // string(17) \"No data to reduce\"\n?>\n```\n上面的例子比较容易理解,但是理解了这个似乎还是看不懂Pipeline的then是如何调用的,请看下面一个例子\n```php\n<?php\n$array = [\n    function ($i, $next) {\n        return $next($i + 1);\n    },\n    function ($j, $next) {\n        return $next($j * 2);\n    },\n];\n\n$ret = array_reduce(array_reverse($array), function ($carry, $item) {\n    return function ($k) use ($carry, $item) {\n        return $item($k, $carry);\n    };\n}, function ($m) {\n    return $m * 100;\n});\n\nvar_dump($ret);\nvar_dump($ret(4));\n```\n打印结果:\n\n        object(Closure)#6 (2) { 第二步返回的闭包\n            [\"static\"]=> array(2) {   // use \n                [\"carry\"]=> object(Closure)#5 (2) { //第一步 返回的闭包\n                    [\"static\"]=> array(2) {  // use\n                        [\"carry\"]=> object(Closure)#4 (1) {[\"parameter\"]=> array(1) { [\"$m\"]=> string(10) \"\" } } //initial 10\n                        [\"item\"]=> object(Closure)#2 (1) {[\"parameter\"]=> array(2) { [\"$j\"]=> string(10) \"\" [\"$next\"]=> string(10) \"\" } } //array[1]  $carry(5 * 2)\n                    } \n                    [\"parameter\"]=> array(1) { [\"$k\"]=> string(10) \"\" } // 5\n                }\n                [\"item\"]=> object(Closure)#1 (1) {[\"parameter\"]=> array(2) { [\"$i\"]=> string(10) \"\" [\"$next\"]=> string(10) \"\" } } //array[0]  $carry(4+1)\n            } \n            [\"parameter\"]=> array(1) { [\"$k\"]=> string(10) \"\" } // 4\n        } \n        int(1000)\n\n分析闭包执行流程\n\n1. #5 是第一步返回的闭包,也就是$carray的值#5, #6则是第二步返回的闭包,也就是$carry/$ret的值\n2. 第一次传递参数4 执行$item(4,$carry) 返回$carry(5)  // $item 为$array[0]\n3. 第二次传递参数5 执行$item(5,$carry) 返回$carry(10) // $item 为$array[1]\n4. 第三次传递参数10 执行$carry(10)  返回1000 // $carry 为$initial\n\n### Pipeline分析\n有了上面的例子之后就比较容易理解Pipeline的then方法了,代码的意思就是在路由分发之前先把请求通过middleware\n\n继续看`dispatchToRouter`这个方法最终干了什么?\n\n```php\n/* Kenel */\n\n/**\n * Get the route dispatcher callback.\n *\n * @return \\Closure\n */\nprotected function dispatchToRouter()\n{\n    return function ($request) {\n        $this->app->instance('request', $request);\n\n        return $this->router->dispatch($request);\n    };\n}\n\n/* Router */\n\n/**\n * Dispatch the request to the application.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */\npublic function dispatch(Request $request)\n{\n    $this->currentRequest = $request;\n\n    return $this->dispatchToRoute($request);\n}\n\n\n/**\n * Dispatch the request to a route and return the response.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return mixed\n */\npublic function dispatchToRoute(Request $request)\n{\n    // First we will find a route that matches this request. We will also set the\n    // route resolver on the request so middlewares assigned to the route will\n    // receive access to this route instance for checking of the parameters.\n    $route = $this->findRoute($request);\n\n    $request->setRouteResolver(function () use ($route) {\n        return $route;\n    });\n\n    $this->events->dispatch(new Events\\RouteMatched($route, $request));\n\n    $response = $this->runRouteWithinStack($route, $request);\n\n    return $this->prepareResponse($request, $response);\n}\n\n/**\n * Run the given route within a Stack \"onion\" instance.\n *\n * @param  \\Illuminate\\Routing\\Route  $route\n * @param  \\Illuminate\\Http\\Request  $request\n * @return mixed\n */\nprotected function runRouteWithinStack(Route $route, Request $request)\n{\n    $shouldSkipMiddleware = $this->container->bound('middleware.disable') &&\n                            $this->container->make('middleware.disable') === true;\n\n    $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route);\n\n    return (new Pipeline($this->container))\n                    ->send($request)\n                    ->through($middleware)\n                    ->then(function ($request) use ($route) {\n                        return $this->prepareResponse(\n                            $request, $route->run()\n                        );\n                    });\n}\n\n/* Route */\n\n/**\n * Run the route action and return the response.\n *\n * @return mixed\n */\npublic function run()\n{\n    $this->container = $this->container ?: new Container;\n\n    try {\n        if ($this->isControllerAction()) {\n            return $this->runController();\n        }\n\n        return $this->runCallable();\n    } catch (HttpResponseException $e) {\n        return $e->getResponse();\n    }\n}\n```\n可以看到在Router里面又使用了一个Pipeline,但是两个使用的middleware并不是同一个\n\n从接受到请求到交给控制器处理,中间使用了两次Pipeline,经过了两组中间件\n","slug":"pipeline的理解","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhc40014zbovfw8c9pff","content":"<p>laravel里面有一个比较绕,但是非常优雅的中间件的实现–<code>pipeline</code></p>\n<a id=\"more\"></a>\n<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>laravel中有如下一段代码看起来很费劲,好好研究一下<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">new</span> Pipeline(<span class=\"keyword\">$this</span>-&gt;app))</span><br><span class=\"line\">                    -&gt;send($request)</span><br><span class=\"line\">                    -&gt;through(<span class=\"keyword\">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class=\"keyword\">$this</span>-&gt;middleware)</span><br><span class=\"line\">                    -&gt;then(<span class=\"keyword\">$this</span>-&gt;dispatchToRouter());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Set the object being sent through the pipeline.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  mixed  $passable</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> $this</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span><span class=\"params\">($passable)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;passable = $passable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Set the array of pipes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  array|mixed  $pipes</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> $this</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">through</span><span class=\"params\">($pipes)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;pipes = is_array($pipes) ? $pipes : func_get_args();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Run the pipeline with a final destination callback.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Closure  $destination</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">then</span><span class=\"params\">(Closure $destination)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $pipeline = array_reduce(</span><br><span class=\"line\">        array_reverse(<span class=\"keyword\">$this</span>-&gt;pipes), <span class=\"keyword\">$this</span>-&gt;carry(), <span class=\"keyword\">$this</span>-&gt;prepareDestination($destination)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $pipeline(<span class=\"keyword\">$this</span>-&gt;passable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"array-reduce用法分析\"><a href=\"#array-reduce用法分析\" class=\"headerlink\" title=\"array_reduce用法分析\"></a>array_reduce用法分析</h3><p>array_reduce 和 array_map , array_filter 一起是三个常用的高阶函数(函数的参数可以接收别的函数)</p>\n<p>下面来自php手册:</p>\n<blockquote>\n<p>mixed array_reduce ( array $array , callable $callback [, mixed $initial = NULL ] )</p>\n<p>array<br>输入的 array。</p>\n<p>callback<br>mixed callback ( mixed $carry , mixed $item )<br>   carry<br>   携带上次迭代里的值； 如果本次迭代是第一次，那么这个值是 initial。</p>\n<p>   item<br>   携带了本次迭代的值。</p>\n<p>initial<br>如果指定了可选参数 initial，该参数将在处理开始前使用，或者当处理结束，数组为空时的最后一个结果。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span><span class=\"params\">($carry, $item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $carry += $item;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $carry;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">product</span><span class=\"params\">($carry, $item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $carry *= $item;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $carry;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$a = <span class=\"keyword\">array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">$x = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(array_reduce($a, <span class=\"string\">\"sum\"</span>)); <span class=\"comment\">// int(15)</span></span><br><span class=\"line\">var_dump(array_reduce($a, <span class=\"string\">\"product\"</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// int(1200), because: 10*1*2*3*4*5</span></span><br><span class=\"line\">var_dump(array_reduce($x, <span class=\"string\">\"sum\"</span>, <span class=\"string\">\"No data to reduce\"</span>)); <span class=\"comment\">// string(17) \"No data to reduce\"</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的例子比较容易理解,但是理解了这个似乎还是看不懂Pipeline的then是如何调用的,请看下面一个例子<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$array = [</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($i, $next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $next($i + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($j, $next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $next($j * <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">$ret = array_reduce(array_reverse($array), <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($carry, $item)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($k)</span> <span class=\"title\">use</span> <span class=\"params\">($carry, $item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $item($k, $carry);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $m * <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($ret);</span><br><span class=\"line\">var_dump($ret(<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure></p>\n<p>打印结果:</p>\n<pre><code>object(Closure)#6 (2) { 第二步返回的闭包\n    [&quot;static&quot;]=&gt; array(2) {   // use \n        [&quot;carry&quot;]=&gt; object(Closure)#5 (2) { //第一步 返回的闭包\n            [&quot;static&quot;]=&gt; array(2) {  // use\n                [&quot;carry&quot;]=&gt; object(Closure)#4 (1) {[&quot;parameter&quot;]=&gt; array(1) { [&quot;$m&quot;]=&gt; string(10) &quot;&quot; } } //initial 10\n                [&quot;item&quot;]=&gt; object(Closure)#2 (1) {[&quot;parameter&quot;]=&gt; array(2) { [&quot;$j&quot;]=&gt; string(10) &quot;&quot; [&quot;$next&quot;]=&gt; string(10) &quot;&quot; } } //array[1]  $carry(5 * 2)\n            } \n            [&quot;parameter&quot;]=&gt; array(1) { [&quot;$k&quot;]=&gt; string(10) &quot;&quot; } // 5\n        }\n        [&quot;item&quot;]=&gt; object(Closure)#1 (1) {[&quot;parameter&quot;]=&gt; array(2) { [&quot;$i&quot;]=&gt; string(10) &quot;&quot; [&quot;$next&quot;]=&gt; string(10) &quot;&quot; } } //array[0]  $carry(4+1)\n    } \n    [&quot;parameter&quot;]=&gt; array(1) { [&quot;$k&quot;]=&gt; string(10) &quot;&quot; } // 4\n} \nint(1000)\n</code></pre><p>分析闭包执行流程</p>\n<ol>\n<li>#5 是第一步返回的闭包,也就是$carray的值#5, #6则是第二步返回的闭包,也就是$carry/$ret的值</li>\n<li>第一次传递参数4 执行$item(4,$carry) 返回$carry(5)  // $item 为$array[0]</li>\n<li>第二次传递参数5 执行$item(5,$carry) 返回$carry(10) // $item 为$array[1]</li>\n<li>第三次传递参数10 执行$carry(10)  返回1000 // $carry 为$initial</li>\n</ol>\n<h3 id=\"Pipeline分析\"><a href=\"#Pipeline分析\" class=\"headerlink\" title=\"Pipeline分析\"></a>Pipeline分析</h3><p>有了上面的例子之后就比较容易理解Pipeline的then方法了,代码的意思就是在路由分发之前先把请求通过middleware</p>\n<p>继续看<code>dispatchToRouter</code>这个方法最终干了什么?</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Kenel */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Get the route dispatcher callback.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> \\Closure</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchToRouter</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;app-&gt;instance(<span class=\"string\">'request'</span>, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;router-&gt;dispatch($request);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Router */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dispatch the request to the application.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> \\Illuminate\\Http\\Response</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;currentRequest = $request;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;dispatchToRoute($request);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dispatch the request to a route and return the response.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchToRoute</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// First we will find a route that matches this request. We will also set the</span></span><br><span class=\"line\">    <span class=\"comment\">// route resolver on the request so middlewares assigned to the route will</span></span><br><span class=\"line\">    <span class=\"comment\">// receive access to this route instance for checking of the parameters.</span></span><br><span class=\"line\">    $route = <span class=\"keyword\">$this</span>-&gt;findRoute($request);</span><br><span class=\"line\"></span><br><span class=\"line\">    $request-&gt;setRouteResolver(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> <span class=\"title\">use</span> <span class=\"params\">($route)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $route;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;events-&gt;dispatch(<span class=\"keyword\">new</span> Events\\RouteMatched($route, $request));</span><br><span class=\"line\"></span><br><span class=\"line\">    $response = <span class=\"keyword\">$this</span>-&gt;runRouteWithinStack($route, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prepareResponse($request, $response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Run the given route within a Stack \"onion\" instance.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Routing\\Route  $route</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runRouteWithinStack</span><span class=\"params\">(Route $route, Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $shouldSkipMiddleware = <span class=\"keyword\">$this</span>-&gt;container-&gt;bound(<span class=\"string\">'middleware.disable'</span>) &amp;&amp;</span><br><span class=\"line\">                            <span class=\"keyword\">$this</span>-&gt;container-&gt;make(<span class=\"string\">'middleware.disable'</span>) === <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    $middleware = $shouldSkipMiddleware ? [] : <span class=\"keyword\">$this</span>-&gt;gatherRouteMiddleware($route);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> Pipeline(<span class=\"keyword\">$this</span>-&gt;container))</span><br><span class=\"line\">                    -&gt;send($request)</span><br><span class=\"line\">                    -&gt;through($middleware)</span><br><span class=\"line\">                    -&gt;then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($request)</span> <span class=\"title\">use</span> <span class=\"params\">($route)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prepareResponse(</span><br><span class=\"line\">                            $request, $route-&gt;run()</span><br><span class=\"line\">                        );</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Route */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Run the route action and return the response.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;container = <span class=\"keyword\">$this</span>-&gt;container ?: <span class=\"keyword\">new</span> Container;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;isControllerAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;runController();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;runCallable();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (HttpResponseException $e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $e-&gt;getResponse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到在Router里面又使用了一个Pipeline,但是两个使用的middleware并不是同一个</p>\n<p>从接受到请求到交给控制器处理,中间使用了两次Pipeline,经过了两组中间件</p>\n","site":{"data":{}},"excerpt":"<p>laravel里面有一个比较绕,但是非常优雅的中间件的实现–<code>pipeline</code></p>","more":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>laravel中有如下一段代码看起来很费劲,好好研究一下<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">new</span> Pipeline(<span class=\"keyword\">$this</span>-&gt;app))</span><br><span class=\"line\">                    -&gt;send($request)</span><br><span class=\"line\">                    -&gt;through(<span class=\"keyword\">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class=\"keyword\">$this</span>-&gt;middleware)</span><br><span class=\"line\">                    -&gt;then(<span class=\"keyword\">$this</span>-&gt;dispatchToRouter());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Set the object being sent through the pipeline.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  mixed  $passable</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> $this</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span><span class=\"params\">($passable)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;passable = $passable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Set the array of pipes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  array|mixed  $pipes</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> $this</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">through</span><span class=\"params\">($pipes)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;pipes = is_array($pipes) ? $pipes : func_get_args();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Run the pipeline with a final destination callback.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Closure  $destination</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">then</span><span class=\"params\">(Closure $destination)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $pipeline = array_reduce(</span><br><span class=\"line\">        array_reverse(<span class=\"keyword\">$this</span>-&gt;pipes), <span class=\"keyword\">$this</span>-&gt;carry(), <span class=\"keyword\">$this</span>-&gt;prepareDestination($destination)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $pipeline(<span class=\"keyword\">$this</span>-&gt;passable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"array-reduce用法分析\"><a href=\"#array-reduce用法分析\" class=\"headerlink\" title=\"array_reduce用法分析\"></a>array_reduce用法分析</h3><p>array_reduce 和 array_map , array_filter 一起是三个常用的高阶函数(函数的参数可以接收别的函数)</p>\n<p>下面来自php手册:</p>\n<blockquote>\n<p>mixed array_reduce ( array $array , callable $callback [, mixed $initial = NULL ] )</p>\n<p>array<br>输入的 array。</p>\n<p>callback<br>mixed callback ( mixed $carry , mixed $item )<br>   carry<br>   携带上次迭代里的值； 如果本次迭代是第一次，那么这个值是 initial。</p>\n<p>   item<br>   携带了本次迭代的值。</p>\n<p>initial<br>如果指定了可选参数 initial，该参数将在处理开始前使用，或者当处理结束，数组为空时的最后一个结果。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span><span class=\"params\">($carry, $item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $carry += $item;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $carry;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">product</span><span class=\"params\">($carry, $item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $carry *= $item;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $carry;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$a = <span class=\"keyword\">array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">$x = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(array_reduce($a, <span class=\"string\">\"sum\"</span>)); <span class=\"comment\">// int(15)</span></span><br><span class=\"line\">var_dump(array_reduce($a, <span class=\"string\">\"product\"</span>, <span class=\"number\">10</span>)); <span class=\"comment\">// int(1200), because: 10*1*2*3*4*5</span></span><br><span class=\"line\">var_dump(array_reduce($x, <span class=\"string\">\"sum\"</span>, <span class=\"string\">\"No data to reduce\"</span>)); <span class=\"comment\">// string(17) \"No data to reduce\"</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的例子比较容易理解,但是理解了这个似乎还是看不懂Pipeline的then是如何调用的,请看下面一个例子<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$array = [</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($i, $next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $next($i + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($j, $next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $next($j * <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">$ret = array_reduce(array_reverse($array), <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($carry, $item)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($k)</span> <span class=\"title\">use</span> <span class=\"params\">($carry, $item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $item($k, $carry);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $m * <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($ret);</span><br><span class=\"line\">var_dump($ret(<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure></p>\n<p>打印结果:</p>\n<pre><code>object(Closure)#6 (2) { 第二步返回的闭包\n    [&quot;static&quot;]=&gt; array(2) {   // use \n        [&quot;carry&quot;]=&gt; object(Closure)#5 (2) { //第一步 返回的闭包\n            [&quot;static&quot;]=&gt; array(2) {  // use\n                [&quot;carry&quot;]=&gt; object(Closure)#4 (1) {[&quot;parameter&quot;]=&gt; array(1) { [&quot;$m&quot;]=&gt; string(10) &quot;&quot; } } //initial 10\n                [&quot;item&quot;]=&gt; object(Closure)#2 (1) {[&quot;parameter&quot;]=&gt; array(2) { [&quot;$j&quot;]=&gt; string(10) &quot;&quot; [&quot;$next&quot;]=&gt; string(10) &quot;&quot; } } //array[1]  $carry(5 * 2)\n            } \n            [&quot;parameter&quot;]=&gt; array(1) { [&quot;$k&quot;]=&gt; string(10) &quot;&quot; } // 5\n        }\n        [&quot;item&quot;]=&gt; object(Closure)#1 (1) {[&quot;parameter&quot;]=&gt; array(2) { [&quot;$i&quot;]=&gt; string(10) &quot;&quot; [&quot;$next&quot;]=&gt; string(10) &quot;&quot; } } //array[0]  $carry(4+1)\n    } \n    [&quot;parameter&quot;]=&gt; array(1) { [&quot;$k&quot;]=&gt; string(10) &quot;&quot; } // 4\n} \nint(1000)\n</code></pre><p>分析闭包执行流程</p>\n<ol>\n<li>#5 是第一步返回的闭包,也就是$carray的值#5, #6则是第二步返回的闭包,也就是$carry/$ret的值</li>\n<li>第一次传递参数4 执行$item(4,$carry) 返回$carry(5)  // $item 为$array[0]</li>\n<li>第二次传递参数5 执行$item(5,$carry) 返回$carry(10) // $item 为$array[1]</li>\n<li>第三次传递参数10 执行$carry(10)  返回1000 // $carry 为$initial</li>\n</ol>\n<h3 id=\"Pipeline分析\"><a href=\"#Pipeline分析\" class=\"headerlink\" title=\"Pipeline分析\"></a>Pipeline分析</h3><p>有了上面的例子之后就比较容易理解Pipeline的then方法了,代码的意思就是在路由分发之前先把请求通过middleware</p>\n<p>继续看<code>dispatchToRouter</code>这个方法最终干了什么?</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Kenel */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Get the route dispatcher callback.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> \\Closure</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchToRouter</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;app-&gt;instance(<span class=\"string\">'request'</span>, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;router-&gt;dispatch($request);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Router */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dispatch the request to the application.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> \\Illuminate\\Http\\Response</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;currentRequest = $request;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;dispatchToRoute($request);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dispatch the request to a route and return the response.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchToRoute</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// First we will find a route that matches this request. We will also set the</span></span><br><span class=\"line\">    <span class=\"comment\">// route resolver on the request so middlewares assigned to the route will</span></span><br><span class=\"line\">    <span class=\"comment\">// receive access to this route instance for checking of the parameters.</span></span><br><span class=\"line\">    $route = <span class=\"keyword\">$this</span>-&gt;findRoute($request);</span><br><span class=\"line\"></span><br><span class=\"line\">    $request-&gt;setRouteResolver(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> <span class=\"title\">use</span> <span class=\"params\">($route)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $route;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;events-&gt;dispatch(<span class=\"keyword\">new</span> Events\\RouteMatched($route, $request));</span><br><span class=\"line\"></span><br><span class=\"line\">    $response = <span class=\"keyword\">$this</span>-&gt;runRouteWithinStack($route, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prepareResponse($request, $response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Run the given route within a Stack \"onion\" instance.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Routing\\Route  $route</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runRouteWithinStack</span><span class=\"params\">(Route $route, Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $shouldSkipMiddleware = <span class=\"keyword\">$this</span>-&gt;container-&gt;bound(<span class=\"string\">'middleware.disable'</span>) &amp;&amp;</span><br><span class=\"line\">                            <span class=\"keyword\">$this</span>-&gt;container-&gt;make(<span class=\"string\">'middleware.disable'</span>) === <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    $middleware = $shouldSkipMiddleware ? [] : <span class=\"keyword\">$this</span>-&gt;gatherRouteMiddleware($route);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> Pipeline(<span class=\"keyword\">$this</span>-&gt;container))</span><br><span class=\"line\">                    -&gt;send($request)</span><br><span class=\"line\">                    -&gt;through($middleware)</span><br><span class=\"line\">                    -&gt;then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($request)</span> <span class=\"title\">use</span> <span class=\"params\">($route)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prepareResponse(</span><br><span class=\"line\">                            $request, $route-&gt;run()</span><br><span class=\"line\">                        );</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Route */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Run the route action and return the response.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;container = <span class=\"keyword\">$this</span>-&gt;container ?: <span class=\"keyword\">new</span> Container;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;isControllerAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;runController();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;runCallable();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (HttpResponseException $e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $e-&gt;getResponse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到在Router里面又使用了一个Pipeline,但是两个使用的middleware并不是同一个</p>\n<p>从接受到请求到交给控制器处理,中间使用了两次Pipeline,经过了两组中间件</p>"},{"title":"小程序,app,服务端之间的通信","date":"2018-11-29T00:53:40.000Z","_content":"\n最近做一个支付的项目,但是自己不是支付宝或者微信的商户,和老大商量之后,做了一个类似代理支付的功能.即用户先充值到我们平台,然后通过我们的小程序扫码,我们作为客户支付给实际的商户.\n\n<!-- more -->\n\n### 起源\n自助设备支付时,会使用好几种支付方式:支付宝,微信支付,还有公众号里面的支付.Boss希望通过自己的小程序扫码直接完成支付.再在后台进行扣款.\n\n### 基础\n- 利用`adb`或者`app`唤起支付宝支付或转账 `adb shell am start -a android.intent.action.VIEW -d \"alipays://platformapi/startapp?saId=10000007&qrcode={$url}\"`. app里面直接隐式使用`Intent`然后`startActivity`就可以唤起\n\n- 利用`adb forward tcp:{$port_pc} tcp:{$port2_android}`可以建立`Android`和`PC`之间的连接,据此可以在`Android`建立`socket`服务端绑定指定端口,`PC`上建立客户端完成`socket`之间的通信\n\n- `Android`提供了`NotificationListenerService`来监听系统通知.当有应用消息来的时候会回调`onNotificationPosted`方法.据此可以或者支付宝支付成功的通知.\n\n### 具体流程\n如图:\n\n![小程序,服务器,Android设备支付生命周期](/images/img/pay_life_circle.png)\n\n### 具体实现\n\n- 小程序端(略)\n- `php`后端(略)\n- `php socket`客户端:使用`json`格式通信.`App`服务端使用`writeUTF`和`readUTF`,因此需要在客户端实现转码.`read`过程没有找到转码方法,用正则匹配出目标数据\n\n```php\n<?php\n\nclass SocketClient\n{\n    /* Get the port for the WWW service. */\n    private $_service_port = 10010;\n\n\t/* Get the IP address for the target host. */\n    private $_address = '127.0.0.1';\n\n    private $_socket;\n\n    public function __construct()\n    {\n\n        /* Create a TCP/IP socket. */\n        $this->_socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if ($this->_socket === false) {\n            throw new Exception(\"failed to creat socket\", 1);\n\n        }\n        $result = socket_connect($this->_socket, $this->_address, $this->_service_port);\n        if ($result === false) {\n            throw new Exception(\"failed to connect to the server! error:\" . socket_strerror(socket_last_error($this->_socket)) , 2);\n        }\n    }\n\n    public function getData($jsonStr)\n    {\n\n        self::writeUTF($this->_socket, $jsonStr);\n\n        while($ret = socket_read($this->_socket, 2048 )){\n            $out .=$ret;\n        }\n        \n        preg_match(\"/\\{.*$/\" , $out , $matches);\n        return json_decode($matches[0], true);\n\n    }\n\n    public function close()\n    {\n        socket_close($this->_socket);\n    }\n\n    public function __destruct()\n    {\n        $this->close();\n    }\n\n    public static function writeShort($socket, $i)\n    {\n        $data = pack('n', $i);\n        socket_write($socket, $data);\n    }\n\n    public static function writeUTF($socket, $i)\n    {\n        self::writeShort($socket, strlen($i));\n        socket_write($socket, $i);\n    }\n}\n```\n\n- `App`服务端:新建一个常驻后台线程.保证整个操作为原子操作.即一次支付请求返回一次支付结果.因此采用一组信号量(`semaCommand`初始为1,`semaNotify`初始为0)来进行线程控制.因此当`PC socket`请求进来时,`semaCommand`减1,然后服务端执行`PC socket`传递过来的命令,同时`semaNotify`减1,使`PC socket`阻塞.此时`App socket`服务端执行支付命令直到结束.结束之后支付宝推送支付成功消息`App NotificationListenerService`接受到消息.此时通知`App socket`服务端,并把数据传给服务端使用`ArrayList`保存消息内容,同时`semaNotify`加1,于是`PC socket`解除阻塞,并从服务端保存的`ArrayList`取出数据,然后返回结果.部分关键代码如下:\n\n```java\n  \tArrayList<ClientBean> msgList = new ArrayList<>();\n\n    public static Semaphore semaCommand = new Semaphore(1);\n\n    public static Semaphore semaNotify = new Semaphore(0);\n\nclass TaskThread extends Thread {\n  protected Socket socket;\n\n  public TaskThread(Socket socket) {\n     this.socket = socket;\n  \n  @Override\n  public void run() {\n     try {\n         while (true) {\n\n             DataInputStream inputStream = new DataInputStream(socket.getInputStream());\n             DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream());\n             String msg = inputStream.readUTF();\n\n             ClientBean client = JSON.parseObject(msg, ClientBean.class);\n\n             // local client\n             if (client.getGroupId() == TYPE_NOTIFY) {\n\n                 msgList.add(client);\n\n                 semaNotify.release();\n\n                 outputStream.writeUTF(\"ok\");\n\n                 socket.close();\n\n             } else {\n\n                 semaCommand.acquire();\n\n                 execPay(client.getMsg());\n\n                 semaNotify.acquire();\n\n                 ClientBean notifyMsg = msgList.remove(0);\n\n                 NotifyBean notifyBean = new NotifyBean();\n\n                 notifyBean.setMsg(notifyMsg.getMsg());\n\n                 String str = JSON.toJSONString(notifyBean);\n\n                 outputStream.writeUTF(str);\n\n                 semaCommand.release();\n\n                 socket.close();\n\n             }\n\n         }\n\n     } catch (Exception e) {\n         e.printStackTrace();\n     }\n}\n```\n\n- `App`客户端\n\n\n### 问题及改进\n- 意外情况的处理:包括`App`服务端进程挂了,支付宝没有返回支付消息,`readUTF`的处理\n","source":"_posts/小程序,app,服务端之间的通信.md","raw":"---\ntitle: 小程序,app,服务端之间的通信\ndate: 2018-11-29 08:53:40\ntags:\n- Android\n- 信号量\n- socket \ncategories:\n- 奇葩案例\n---\n\n最近做一个支付的项目,但是自己不是支付宝或者微信的商户,和老大商量之后,做了一个类似代理支付的功能.即用户先充值到我们平台,然后通过我们的小程序扫码,我们作为客户支付给实际的商户.\n\n<!-- more -->\n\n### 起源\n自助设备支付时,会使用好几种支付方式:支付宝,微信支付,还有公众号里面的支付.Boss希望通过自己的小程序扫码直接完成支付.再在后台进行扣款.\n\n### 基础\n- 利用`adb`或者`app`唤起支付宝支付或转账 `adb shell am start -a android.intent.action.VIEW -d \"alipays://platformapi/startapp?saId=10000007&qrcode={$url}\"`. app里面直接隐式使用`Intent`然后`startActivity`就可以唤起\n\n- 利用`adb forward tcp:{$port_pc} tcp:{$port2_android}`可以建立`Android`和`PC`之间的连接,据此可以在`Android`建立`socket`服务端绑定指定端口,`PC`上建立客户端完成`socket`之间的通信\n\n- `Android`提供了`NotificationListenerService`来监听系统通知.当有应用消息来的时候会回调`onNotificationPosted`方法.据此可以或者支付宝支付成功的通知.\n\n### 具体流程\n如图:\n\n![小程序,服务器,Android设备支付生命周期](/images/img/pay_life_circle.png)\n\n### 具体实现\n\n- 小程序端(略)\n- `php`后端(略)\n- `php socket`客户端:使用`json`格式通信.`App`服务端使用`writeUTF`和`readUTF`,因此需要在客户端实现转码.`read`过程没有找到转码方法,用正则匹配出目标数据\n\n```php\n<?php\n\nclass SocketClient\n{\n    /* Get the port for the WWW service. */\n    private $_service_port = 10010;\n\n\t/* Get the IP address for the target host. */\n    private $_address = '127.0.0.1';\n\n    private $_socket;\n\n    public function __construct()\n    {\n\n        /* Create a TCP/IP socket. */\n        $this->_socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if ($this->_socket === false) {\n            throw new Exception(\"failed to creat socket\", 1);\n\n        }\n        $result = socket_connect($this->_socket, $this->_address, $this->_service_port);\n        if ($result === false) {\n            throw new Exception(\"failed to connect to the server! error:\" . socket_strerror(socket_last_error($this->_socket)) , 2);\n        }\n    }\n\n    public function getData($jsonStr)\n    {\n\n        self::writeUTF($this->_socket, $jsonStr);\n\n        while($ret = socket_read($this->_socket, 2048 )){\n            $out .=$ret;\n        }\n        \n        preg_match(\"/\\{.*$/\" , $out , $matches);\n        return json_decode($matches[0], true);\n\n    }\n\n    public function close()\n    {\n        socket_close($this->_socket);\n    }\n\n    public function __destruct()\n    {\n        $this->close();\n    }\n\n    public static function writeShort($socket, $i)\n    {\n        $data = pack('n', $i);\n        socket_write($socket, $data);\n    }\n\n    public static function writeUTF($socket, $i)\n    {\n        self::writeShort($socket, strlen($i));\n        socket_write($socket, $i);\n    }\n}\n```\n\n- `App`服务端:新建一个常驻后台线程.保证整个操作为原子操作.即一次支付请求返回一次支付结果.因此采用一组信号量(`semaCommand`初始为1,`semaNotify`初始为0)来进行线程控制.因此当`PC socket`请求进来时,`semaCommand`减1,然后服务端执行`PC socket`传递过来的命令,同时`semaNotify`减1,使`PC socket`阻塞.此时`App socket`服务端执行支付命令直到结束.结束之后支付宝推送支付成功消息`App NotificationListenerService`接受到消息.此时通知`App socket`服务端,并把数据传给服务端使用`ArrayList`保存消息内容,同时`semaNotify`加1,于是`PC socket`解除阻塞,并从服务端保存的`ArrayList`取出数据,然后返回结果.部分关键代码如下:\n\n```java\n  \tArrayList<ClientBean> msgList = new ArrayList<>();\n\n    public static Semaphore semaCommand = new Semaphore(1);\n\n    public static Semaphore semaNotify = new Semaphore(0);\n\nclass TaskThread extends Thread {\n  protected Socket socket;\n\n  public TaskThread(Socket socket) {\n     this.socket = socket;\n  \n  @Override\n  public void run() {\n     try {\n         while (true) {\n\n             DataInputStream inputStream = new DataInputStream(socket.getInputStream());\n             DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream());\n             String msg = inputStream.readUTF();\n\n             ClientBean client = JSON.parseObject(msg, ClientBean.class);\n\n             // local client\n             if (client.getGroupId() == TYPE_NOTIFY) {\n\n                 msgList.add(client);\n\n                 semaNotify.release();\n\n                 outputStream.writeUTF(\"ok\");\n\n                 socket.close();\n\n             } else {\n\n                 semaCommand.acquire();\n\n                 execPay(client.getMsg());\n\n                 semaNotify.acquire();\n\n                 ClientBean notifyMsg = msgList.remove(0);\n\n                 NotifyBean notifyBean = new NotifyBean();\n\n                 notifyBean.setMsg(notifyMsg.getMsg());\n\n                 String str = JSON.toJSONString(notifyBean);\n\n                 outputStream.writeUTF(str);\n\n                 semaCommand.release();\n\n                 socket.close();\n\n             }\n\n         }\n\n     } catch (Exception e) {\n         e.printStackTrace();\n     }\n}\n```\n\n- `App`客户端\n\n\n### 问题及改进\n- 意外情况的处理:包括`App`服务端进程挂了,支付宝没有返回支付消息,`readUTF`的处理\n","slug":"小程序,app,服务端之间的通信","published":1,"updated":"2019-01-14T02:40:37.489Z","_id":"cjqvpvhc50017zbov1zreewmz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近做一个支付的项目,但是自己不是支付宝或者微信的商户,和老大商量之后,做了一个类似代理支付的功能.即用户先充值到我们平台,然后通过我们的小程序扫码,我们作为客户支付给实际的商户.</p>\n<a id=\"more\"></a>\n<h3 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h3><p>自助设备支付时,会使用好几种支付方式:支付宝,微信支付,还有公众号里面的支付.Boss希望通过自己的小程序扫码直接完成支付.再在后台进行扣款.</p>\n<h3 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h3><ul>\n<li><p>利用<code>adb</code>或者<code>app</code>唤起支付宝支付或转账 <code>adb shell am start -a android.intent.action.VIEW -d &quot;alipays://platformapi/startapp?saId=10000007&amp;qrcode={$url}&quot;</code>. app里面直接隐式使用<code>Intent</code>然后<code>startActivity</code>就可以唤起</p>\n</li>\n<li><p>利用<code>adb forward tcp:{$port_pc} tcp:{$port2_android}</code>可以建立<code>Android</code>和<code>PC</code>之间的连接,据此可以在<code>Android</code>建立<code>socket</code>服务端绑定指定端口,<code>PC</code>上建立客户端完成<code>socket</code>之间的通信</p>\n</li>\n<li><p><code>Android</code>提供了<code>NotificationListenerService</code>来监听系统通知.当有应用消息来的时候会回调<code>onNotificationPosted</code>方法.据此可以或者支付宝支付成功的通知.</p>\n</li>\n</ul>\n<h3 id=\"具体流程\"><a href=\"#具体流程\" class=\"headerlink\" title=\"具体流程\"></a>具体流程</h3><p>如图:</p>\n<p><img src=\"/images/img/pay_life_circle.png\" alt=\"小程序,服务器,Android设备支付生命周期\"></p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><ul>\n<li>小程序端(略)</li>\n<li><code>php</code>后端(略)</li>\n<li><code>php socket</code>客户端:使用<code>json</code>格式通信.<code>App</code>服务端使用<code>writeUTF</code>和<code>readUTF</code>,因此需要在客户端实现转码.<code>read</code>过程没有找到转码方法,用正则匹配出目标数据</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SocketClient</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Get the port for the WWW service. */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_service_port = <span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Get the IP address for the target host. */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_address = <span class=\"string\">'127.0.0.1'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_socket;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Create a TCP/IP socket. */</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;_socket === <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">\"failed to creat socket\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $result = socket_connect(<span class=\"keyword\">$this</span>-&gt;_socket, <span class=\"keyword\">$this</span>-&gt;_address, <span class=\"keyword\">$this</span>-&gt;_service_port);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($result === <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">\"failed to connect to the server! error:\"</span> . socket_strerror(socket_last_error(<span class=\"keyword\">$this</span>-&gt;_socket)) , <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span><span class=\"params\">($jsonStr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>::writeUTF(<span class=\"keyword\">$this</span>-&gt;_socket, $jsonStr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>($ret = socket_read(<span class=\"keyword\">$this</span>-&gt;_socket, <span class=\"number\">2048</span> ))&#123;</span><br><span class=\"line\">            $out .=$ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        preg_match(<span class=\"string\">\"/\\&#123;.*$/\"</span> , $out , $matches);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> json_decode($matches[<span class=\"number\">0</span>], <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        socket_close(<span class=\"keyword\">$this</span>-&gt;_socket);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeShort</span><span class=\"params\">($socket, $i)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $data = pack(<span class=\"string\">'n'</span>, $i);</span><br><span class=\"line\">        socket_write($socket, $data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeUTF</span><span class=\"params\">($socket, $i)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>::writeShort($socket, strlen($i));</span><br><span class=\"line\">        socket_write($socket, $i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>App</code>服务端:新建一个常驻后台线程.保证整个操作为原子操作.即一次支付请求返回一次支付结果.因此采用一组信号量(<code>semaCommand</code>初始为1,<code>semaNotify</code>初始为0)来进行线程控制.因此当<code>PC socket</code>请求进来时,<code>semaCommand</code>减1,然后服务端执行<code>PC socket</code>传递过来的命令,同时<code>semaNotify</code>减1,使<code>PC socket</code>阻塞.此时<code>App socket</code>服务端执行支付命令直到结束.结束之后支付宝推送支付成功消息<code>App NotificationListenerService</code>接受到消息.此时通知<code>App socket</code>服务端,并把数据传给服务端使用<code>ArrayList</code>保存消息内容,同时<code>semaNotify</code>加1,于是<code>PC socket</code>解除阻塞,并从服务端保存的<code>ArrayList</code>取出数据,然后返回结果.部分关键代码如下:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  \tArrayList&lt;ClientBean&gt; msgList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Semaphore semaCommand = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Semaphore semaNotify = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Socket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TaskThread</span><span class=\"params\">(Socket socket)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.socket = socket;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">             DataInputStream inputStream = <span class=\"keyword\">new</span> DataInputStream(socket.getInputStream());</span><br><span class=\"line\">             DataOutputStream outputStream = <span class=\"keyword\">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class=\"line\">             String msg = inputStream.readUTF();</span><br><span class=\"line\"></span><br><span class=\"line\">             ClientBean client = JSON.parseObject(msg, ClientBean.class);</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"comment\">// local client</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span> (client.getGroupId() == TYPE_NOTIFY) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                 msgList.add(client);</span><br><span class=\"line\"></span><br><span class=\"line\">                 semaNotify.release();</span><br><span class=\"line\"></span><br><span class=\"line\">                 outputStream.writeUTF(<span class=\"string\">\"ok\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                 socket.close();</span><br><span class=\"line\"></span><br><span class=\"line\">             &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                 semaCommand.acquire();</span><br><span class=\"line\"></span><br><span class=\"line\">                 execPay(client.getMsg());</span><br><span class=\"line\"></span><br><span class=\"line\">                 semaNotify.acquire();</span><br><span class=\"line\"></span><br><span class=\"line\">                 ClientBean notifyMsg = msgList.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                 NotifyBean notifyBean = <span class=\"keyword\">new</span> NotifyBean();</span><br><span class=\"line\"></span><br><span class=\"line\">                 notifyBean.setMsg(notifyMsg.getMsg());</span><br><span class=\"line\"></span><br><span class=\"line\">                 String str = JSON.toJSONString(notifyBean);</span><br><span class=\"line\"></span><br><span class=\"line\">                 outputStream.writeUTF(str);</span><br><span class=\"line\"></span><br><span class=\"line\">                 semaCommand.release();</span><br><span class=\"line\"></span><br><span class=\"line\">                 socket.close();</span><br><span class=\"line\"></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>App</code>客户端</li>\n</ul>\n<h3 id=\"问题及改进\"><a href=\"#问题及改进\" class=\"headerlink\" title=\"问题及改进\"></a>问题及改进</h3><ul>\n<li>意外情况的处理:包括<code>App</code>服务端进程挂了,支付宝没有返回支付消息,<code>readUTF</code>的处理</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近做一个支付的项目,但是自己不是支付宝或者微信的商户,和老大商量之后,做了一个类似代理支付的功能.即用户先充值到我们平台,然后通过我们的小程序扫码,我们作为客户支付给实际的商户.</p>","more":"<h3 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h3><p>自助设备支付时,会使用好几种支付方式:支付宝,微信支付,还有公众号里面的支付.Boss希望通过自己的小程序扫码直接完成支付.再在后台进行扣款.</p>\n<h3 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h3><ul>\n<li><p>利用<code>adb</code>或者<code>app</code>唤起支付宝支付或转账 <code>adb shell am start -a android.intent.action.VIEW -d &quot;alipays://platformapi/startapp?saId=10000007&amp;qrcode={$url}&quot;</code>. app里面直接隐式使用<code>Intent</code>然后<code>startActivity</code>就可以唤起</p>\n</li>\n<li><p>利用<code>adb forward tcp:{$port_pc} tcp:{$port2_android}</code>可以建立<code>Android</code>和<code>PC</code>之间的连接,据此可以在<code>Android</code>建立<code>socket</code>服务端绑定指定端口,<code>PC</code>上建立客户端完成<code>socket</code>之间的通信</p>\n</li>\n<li><p><code>Android</code>提供了<code>NotificationListenerService</code>来监听系统通知.当有应用消息来的时候会回调<code>onNotificationPosted</code>方法.据此可以或者支付宝支付成功的通知.</p>\n</li>\n</ul>\n<h3 id=\"具体流程\"><a href=\"#具体流程\" class=\"headerlink\" title=\"具体流程\"></a>具体流程</h3><p>如图:</p>\n<p><img src=\"/images/img/pay_life_circle.png\" alt=\"小程序,服务器,Android设备支付生命周期\"></p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><ul>\n<li>小程序端(略)</li>\n<li><code>php</code>后端(略)</li>\n<li><code>php socket</code>客户端:使用<code>json</code>格式通信.<code>App</code>服务端使用<code>writeUTF</code>和<code>readUTF</code>,因此需要在客户端实现转码.<code>read</code>过程没有找到转码方法,用正则匹配出目标数据</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SocketClient</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Get the port for the WWW service. */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_service_port = <span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Get the IP address for the target host. */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_address = <span class=\"string\">'127.0.0.1'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_socket;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Create a TCP/IP socket. */</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;_socket === <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">\"failed to creat socket\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $result = socket_connect(<span class=\"keyword\">$this</span>-&gt;_socket, <span class=\"keyword\">$this</span>-&gt;_address, <span class=\"keyword\">$this</span>-&gt;_service_port);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($result === <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">\"failed to connect to the server! error:\"</span> . socket_strerror(socket_last_error(<span class=\"keyword\">$this</span>-&gt;_socket)) , <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span><span class=\"params\">($jsonStr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>::writeUTF(<span class=\"keyword\">$this</span>-&gt;_socket, $jsonStr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>($ret = socket_read(<span class=\"keyword\">$this</span>-&gt;_socket, <span class=\"number\">2048</span> ))&#123;</span><br><span class=\"line\">            $out .=$ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        preg_match(<span class=\"string\">\"/\\&#123;.*$/\"</span> , $out , $matches);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> json_decode($matches[<span class=\"number\">0</span>], <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        socket_close(<span class=\"keyword\">$this</span>-&gt;_socket);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeShort</span><span class=\"params\">($socket, $i)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $data = pack(<span class=\"string\">'n'</span>, $i);</span><br><span class=\"line\">        socket_write($socket, $data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeUTF</span><span class=\"params\">($socket, $i)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>::writeShort($socket, strlen($i));</span><br><span class=\"line\">        socket_write($socket, $i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>App</code>服务端:新建一个常驻后台线程.保证整个操作为原子操作.即一次支付请求返回一次支付结果.因此采用一组信号量(<code>semaCommand</code>初始为1,<code>semaNotify</code>初始为0)来进行线程控制.因此当<code>PC socket</code>请求进来时,<code>semaCommand</code>减1,然后服务端执行<code>PC socket</code>传递过来的命令,同时<code>semaNotify</code>减1,使<code>PC socket</code>阻塞.此时<code>App socket</code>服务端执行支付命令直到结束.结束之后支付宝推送支付成功消息<code>App NotificationListenerService</code>接受到消息.此时通知<code>App socket</code>服务端,并把数据传给服务端使用<code>ArrayList</code>保存消息内容,同时<code>semaNotify</code>加1,于是<code>PC socket</code>解除阻塞,并从服务端保存的<code>ArrayList</code>取出数据,然后返回结果.部分关键代码如下:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  \tArrayList&lt;ClientBean&gt; msgList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Semaphore semaCommand = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Semaphore semaNotify = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Socket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TaskThread</span><span class=\"params\">(Socket socket)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.socket = socket;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">             DataInputStream inputStream = <span class=\"keyword\">new</span> DataInputStream(socket.getInputStream());</span><br><span class=\"line\">             DataOutputStream outputStream = <span class=\"keyword\">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class=\"line\">             String msg = inputStream.readUTF();</span><br><span class=\"line\"></span><br><span class=\"line\">             ClientBean client = JSON.parseObject(msg, ClientBean.class);</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"comment\">// local client</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span> (client.getGroupId() == TYPE_NOTIFY) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                 msgList.add(client);</span><br><span class=\"line\"></span><br><span class=\"line\">                 semaNotify.release();</span><br><span class=\"line\"></span><br><span class=\"line\">                 outputStream.writeUTF(<span class=\"string\">\"ok\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                 socket.close();</span><br><span class=\"line\"></span><br><span class=\"line\">             &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                 semaCommand.acquire();</span><br><span class=\"line\"></span><br><span class=\"line\">                 execPay(client.getMsg());</span><br><span class=\"line\"></span><br><span class=\"line\">                 semaNotify.acquire();</span><br><span class=\"line\"></span><br><span class=\"line\">                 ClientBean notifyMsg = msgList.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                 NotifyBean notifyBean = <span class=\"keyword\">new</span> NotifyBean();</span><br><span class=\"line\"></span><br><span class=\"line\">                 notifyBean.setMsg(notifyMsg.getMsg());</span><br><span class=\"line\"></span><br><span class=\"line\">                 String str = JSON.toJSONString(notifyBean);</span><br><span class=\"line\"></span><br><span class=\"line\">                 outputStream.writeUTF(str);</span><br><span class=\"line\"></span><br><span class=\"line\">                 semaCommand.release();</span><br><span class=\"line\"></span><br><span class=\"line\">                 socket.close();</span><br><span class=\"line\"></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>App</code>客户端</li>\n</ul>\n<h3 id=\"问题及改进\"><a href=\"#问题及改进\" class=\"headerlink\" title=\"问题及改进\"></a>问题及改进</h3><ul>\n<li>意外情况的处理:包括<code>App</code>服务端进程挂了,支付宝没有返回支付消息,<code>readUTF</code>的处理</li>\n</ul>"},{"title":"增长黑客","date":"2019-01-09T03:39:03.000Z","_content":"\n平时都是作为方案的实现者,最近boss让我思考一下数据分析框架驱动产品,让我来出方案.我...对,我蒙了...然后副总转手就扔来一本失传已久的pdf--增长黑客\n<!-- more -->\n\n### 增长黑客的崛起\n\n- .创业家的黑暗前传: 很多产品问世伊始便已经宣告夭折\n\n- .增长黑客的胜利:`Hotmail`事件,在每一封用`Hotmail`发出的邮件末尾签名处增加一行附言,达到了6个月100万用户.其思想被人归纳总结成为一套低成本驱动初创公司产品增长的有效方法(增长黑客)\n\n> I love you. Get your free E-mail at Hotmail.\n\n- .什么是`增长黑客`:以数据驱动营销,以市场指导产品,通过技术化手段贯彻增长目标的人.他们通常既了解技术,又深谙用户心理,擅长发挥创意,绕过限制,通过低成本的手段解决初创公司产品早起的增长问题.\n    - 介于极客,发明家和广告狂人的综合\n    - A     `acquisition`       `how do users find us`\n    - A     `activation`        `do users have a great first experience`\n    - R     `retention`         `do users come back`\n    - R     `revenue`           `how do you make money`\n    - R     `referral`          `do users tell others`\n\n- .增长黑客的职责和特质:\n    - 数据为王\n    - 专注目标\n    - 关注细节\n    - 富于创意\n    - 信息通透\n\n- .一切用数据说话:\n\n- .增长黑客担任的团队角色:\n\n- .如何成为增长黑客\n> 你不可能从现在预测到未来,只有回头看时,才会发现事物之间的联系.所以你必须相信,那些生命中的点点滴滴,将会在你未来的生命里,以某种方式串联起来.你必须始终相信一些东西----你的勇气,宿命,生活,因缘,随便什么,它们将给你追寻内心真正所想的自信,带你走离平凡,变得与众不同.\n\n### 创造正确的产品\n\n- .`Instagram`重生记:\n> Burbn出师不利,是一个错误的开始.但世界上最好的公司都曾经脱胎于其他产品.你需要的是发现,让它进化成别的东西.\n\n- .`PMF`,探寻产品与市场的完美契合:互联网是快速试错和收集信息的平台,也是一个公正的仲裁者,永远能反应客观的市场动向.聪明的团队应该从产品每一次调整所带来的反馈中汲取营养,不断强化优势,及时纠正错误,找到适合自己的`PMF`状态,成为被市场接受的玩家,而不是因循守旧地沉沦在既有的产品创意中,完全罔顾市场的需求和反馈.\n\n- .拒绝昂贵的失败:叮咚小区用1亿元的昂贵失败,为我们证明了PMF的重要性\n\n- .需求,催生产品的第一原动力\n    - 需求是真是存在还是伪需求\n    - 是否刚需\n    - 需求量是否够大,市场是否够肥\n    - 需求变现能力\n\n- .用最小化可行产品验证需求\n    - `MVP`:`minimum viable product`\n\n- .产品早期是否需要适配新的平台环境\n\n- .\"行胜于言\"的用户调研\n\n### 获取用户\n\n> 在现代商业世界里,当一个才华横溢的创造者是没用的,除非你能同时把你创造的东西推销出去\n\n- .筛选你的种子用户\n    - 种子用户与冷启动\n\n- .从最笨的事情做起\n\n- .社交红利:蕴藏在开放平台下的流量矿藏\n\n- .用数据抓取\"借鸡下蛋\"\n\n- .内容营销:打造持续输出的传播引擎\n\n- .搜索引擎和应用商店的优化营销\n\n- .捆绑下载\n\n- .排排坐,吃果果\n\n- .用嵌入式代码和小挂件让你的品牌无所不在\n\n- .宣传报道的文案撰写\n\n- .从线下到线上\n\n- .海外扩张\n\n### 激发活跃\n\n> 鸟不鸣,信长杀之;鸟不鸣,秀吉使鸣之;鸟不鸣,家康待鸣之\n\n- .职场社交巨头的用户激活秘诀\n\n- .A/B测试,网站活跃率提升的法宝\n\n- .移动应用的A/B测试\n\n- .另辟蹊径,降低用户活跃门槛\n\n- .旷日持久的补贴大战\n\n- .游戏改变世界\n\n- .我,机器人--脚本自动化运营\n\n### 提高留存\n\n> 当陪你的人要下车时,即使不舍,也该心存感激,然后挥手道别\n\n- .留存与流失\n    - 存在程序漏洞,性能瓶颈\n    - 用户被频繁骚扰\n    - 话题产品的热度减退\n    - 有更好的替代品\n    - 其他因素\n\n- .优化产品性能\n\n- .有损服务--放下不必要的坚持o\n\n- .引导新用户快速上手\n\n- .社交维系与社交解绑\n\n- .设计唤醒机制\n    - 提供奖励\n    - 告知进展\n    - 个性化推荐\n    - 用户社交互动提示\n    - 图片推送通知\n    - 表情文字\n\n### 增加收入\n\n- .免费的世界\n    - 基本功能免费,高级功能付费\n    - 交叉补贴\n    - 三方市场的流量变现\n    - 开源代码盈利可能\n    - 公司上市,或被收购\n\n- .免费午餐的终结\n\n- .重定向广告,寻找消费者的热追踪弹\n\n- .看wet seal 如何抓住时尚的脉搏\n\n- .用互联网思维在微信里卖月饼\n","source":"_posts/增长黑客.md","raw":"---\ntitle: 增长黑客\ndate: 2019-01-09 11:39:03\ntags:\n- 增长黑客\ncategories:\n- 产品思维\n---\n\n平时都是作为方案的实现者,最近boss让我思考一下数据分析框架驱动产品,让我来出方案.我...对,我蒙了...然后副总转手就扔来一本失传已久的pdf--增长黑客\n<!-- more -->\n\n### 增长黑客的崛起\n\n- .创业家的黑暗前传: 很多产品问世伊始便已经宣告夭折\n\n- .增长黑客的胜利:`Hotmail`事件,在每一封用`Hotmail`发出的邮件末尾签名处增加一行附言,达到了6个月100万用户.其思想被人归纳总结成为一套低成本驱动初创公司产品增长的有效方法(增长黑客)\n\n> I love you. Get your free E-mail at Hotmail.\n\n- .什么是`增长黑客`:以数据驱动营销,以市场指导产品,通过技术化手段贯彻增长目标的人.他们通常既了解技术,又深谙用户心理,擅长发挥创意,绕过限制,通过低成本的手段解决初创公司产品早起的增长问题.\n    - 介于极客,发明家和广告狂人的综合\n    - A     `acquisition`       `how do users find us`\n    - A     `activation`        `do users have a great first experience`\n    - R     `retention`         `do users come back`\n    - R     `revenue`           `how do you make money`\n    - R     `referral`          `do users tell others`\n\n- .增长黑客的职责和特质:\n    - 数据为王\n    - 专注目标\n    - 关注细节\n    - 富于创意\n    - 信息通透\n\n- .一切用数据说话:\n\n- .增长黑客担任的团队角色:\n\n- .如何成为增长黑客\n> 你不可能从现在预测到未来,只有回头看时,才会发现事物之间的联系.所以你必须相信,那些生命中的点点滴滴,将会在你未来的生命里,以某种方式串联起来.你必须始终相信一些东西----你的勇气,宿命,生活,因缘,随便什么,它们将给你追寻内心真正所想的自信,带你走离平凡,变得与众不同.\n\n### 创造正确的产品\n\n- .`Instagram`重生记:\n> Burbn出师不利,是一个错误的开始.但世界上最好的公司都曾经脱胎于其他产品.你需要的是发现,让它进化成别的东西.\n\n- .`PMF`,探寻产品与市场的完美契合:互联网是快速试错和收集信息的平台,也是一个公正的仲裁者,永远能反应客观的市场动向.聪明的团队应该从产品每一次调整所带来的反馈中汲取营养,不断强化优势,及时纠正错误,找到适合自己的`PMF`状态,成为被市场接受的玩家,而不是因循守旧地沉沦在既有的产品创意中,完全罔顾市场的需求和反馈.\n\n- .拒绝昂贵的失败:叮咚小区用1亿元的昂贵失败,为我们证明了PMF的重要性\n\n- .需求,催生产品的第一原动力\n    - 需求是真是存在还是伪需求\n    - 是否刚需\n    - 需求量是否够大,市场是否够肥\n    - 需求变现能力\n\n- .用最小化可行产品验证需求\n    - `MVP`:`minimum viable product`\n\n- .产品早期是否需要适配新的平台环境\n\n- .\"行胜于言\"的用户调研\n\n### 获取用户\n\n> 在现代商业世界里,当一个才华横溢的创造者是没用的,除非你能同时把你创造的东西推销出去\n\n- .筛选你的种子用户\n    - 种子用户与冷启动\n\n- .从最笨的事情做起\n\n- .社交红利:蕴藏在开放平台下的流量矿藏\n\n- .用数据抓取\"借鸡下蛋\"\n\n- .内容营销:打造持续输出的传播引擎\n\n- .搜索引擎和应用商店的优化营销\n\n- .捆绑下载\n\n- .排排坐,吃果果\n\n- .用嵌入式代码和小挂件让你的品牌无所不在\n\n- .宣传报道的文案撰写\n\n- .从线下到线上\n\n- .海外扩张\n\n### 激发活跃\n\n> 鸟不鸣,信长杀之;鸟不鸣,秀吉使鸣之;鸟不鸣,家康待鸣之\n\n- .职场社交巨头的用户激活秘诀\n\n- .A/B测试,网站活跃率提升的法宝\n\n- .移动应用的A/B测试\n\n- .另辟蹊径,降低用户活跃门槛\n\n- .旷日持久的补贴大战\n\n- .游戏改变世界\n\n- .我,机器人--脚本自动化运营\n\n### 提高留存\n\n> 当陪你的人要下车时,即使不舍,也该心存感激,然后挥手道别\n\n- .留存与流失\n    - 存在程序漏洞,性能瓶颈\n    - 用户被频繁骚扰\n    - 话题产品的热度减退\n    - 有更好的替代品\n    - 其他因素\n\n- .优化产品性能\n\n- .有损服务--放下不必要的坚持o\n\n- .引导新用户快速上手\n\n- .社交维系与社交解绑\n\n- .设计唤醒机制\n    - 提供奖励\n    - 告知进展\n    - 个性化推荐\n    - 用户社交互动提示\n    - 图片推送通知\n    - 表情文字\n\n### 增加收入\n\n- .免费的世界\n    - 基本功能免费,高级功能付费\n    - 交叉补贴\n    - 三方市场的流量变现\n    - 开源代码盈利可能\n    - 公司上市,或被收购\n\n- .免费午餐的终结\n\n- .重定向广告,寻找消费者的热追踪弹\n\n- .看wet seal 如何抓住时尚的脉搏\n\n- .用互联网思维在微信里卖月饼\n","slug":"增长黑客","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhc6001azbovylujrhlp","content":"<p>平时都是作为方案的实现者,最近boss让我思考一下数据分析框架驱动产品,让我来出方案.我…对,我蒙了…然后副总转手就扔来一本失传已久的pdf–增长黑客<br><a id=\"more\"></a></p>\n<h3 id=\"增长黑客的崛起\"><a href=\"#增长黑客的崛起\" class=\"headerlink\" title=\"增长黑客的崛起\"></a>增长黑客的崛起</h3><ul>\n<li><p>.创业家的黑暗前传: 很多产品问世伊始便已经宣告夭折</p>\n</li>\n<li><p>.增长黑客的胜利:<code>Hotmail</code>事件,在每一封用<code>Hotmail</code>发出的邮件末尾签名处增加一行附言,达到了6个月100万用户.其思想被人归纳总结成为一套低成本驱动初创公司产品增长的有效方法(增长黑客)</p>\n</li>\n</ul>\n<blockquote>\n<p>I love you. Get your free E-mail at Hotmail.</p>\n</blockquote>\n<ul>\n<li><p>.什么是<code>增长黑客</code>:以数据驱动营销,以市场指导产品,通过技术化手段贯彻增长目标的人.他们通常既了解技术,又深谙用户心理,擅长发挥创意,绕过限制,通过低成本的手段解决初创公司产品早起的增长问题.</p>\n<ul>\n<li>介于极客,发明家和广告狂人的综合</li>\n<li>A     <code>acquisition</code>       <code>how do users find us</code></li>\n<li>A     <code>activation</code>        <code>do users have a great first experience</code></li>\n<li>R     <code>retention</code>         <code>do users come back</code></li>\n<li>R     <code>revenue</code>           <code>how do you make money</code></li>\n<li>R     <code>referral</code>          <code>do users tell others</code></li>\n</ul>\n</li>\n<li><p>.增长黑客的职责和特质:</p>\n<ul>\n<li>数据为王</li>\n<li>专注目标</li>\n<li>关注细节</li>\n<li>富于创意</li>\n<li>信息通透</li>\n</ul>\n</li>\n<li><p>.一切用数据说话:</p>\n</li>\n<li><p>.增长黑客担任的团队角色:</p>\n</li>\n<li><p>.如何成为增长黑客</p>\n<blockquote>\n<p>你不可能从现在预测到未来,只有回头看时,才会发现事物之间的联系.所以你必须相信,那些生命中的点点滴滴,将会在你未来的生命里,以某种方式串联起来.你必须始终相信一些东西—-你的勇气,宿命,生活,因缘,随便什么,它们将给你追寻内心真正所想的自信,带你走离平凡,变得与众不同.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"创造正确的产品\"><a href=\"#创造正确的产品\" class=\"headerlink\" title=\"创造正确的产品\"></a>创造正确的产品</h3><ul>\n<li><p>.<code>Instagram</code>重生记:</p>\n<blockquote>\n<p>Burbn出师不利,是一个错误的开始.但世界上最好的公司都曾经脱胎于其他产品.你需要的是发现,让它进化成别的东西.</p>\n</blockquote>\n</li>\n<li><p>.<code>PMF</code>,探寻产品与市场的完美契合:互联网是快速试错和收集信息的平台,也是一个公正的仲裁者,永远能反应客观的市场动向.聪明的团队应该从产品每一次调整所带来的反馈中汲取营养,不断强化优势,及时纠正错误,找到适合自己的<code>PMF</code>状态,成为被市场接受的玩家,而不是因循守旧地沉沦在既有的产品创意中,完全罔顾市场的需求和反馈.</p>\n</li>\n<li><p>.拒绝昂贵的失败:叮咚小区用1亿元的昂贵失败,为我们证明了PMF的重要性</p>\n</li>\n<li><p>.需求,催生产品的第一原动力</p>\n<ul>\n<li>需求是真是存在还是伪需求</li>\n<li>是否刚需</li>\n<li>需求量是否够大,市场是否够肥</li>\n<li>需求变现能力</li>\n</ul>\n</li>\n<li><p>.用最小化可行产品验证需求</p>\n<ul>\n<li><code>MVP</code>:<code>minimum viable product</code></li>\n</ul>\n</li>\n<li><p>.产品早期是否需要适配新的平台环境</p>\n</li>\n<li><p>.”行胜于言”的用户调研</p>\n</li>\n</ul>\n<h3 id=\"获取用户\"><a href=\"#获取用户\" class=\"headerlink\" title=\"获取用户\"></a>获取用户</h3><blockquote>\n<p>在现代商业世界里,当一个才华横溢的创造者是没用的,除非你能同时把你创造的东西推销出去</p>\n</blockquote>\n<ul>\n<li><p>.筛选你的种子用户</p>\n<ul>\n<li>种子用户与冷启动</li>\n</ul>\n</li>\n<li><p>.从最笨的事情做起</p>\n</li>\n<li><p>.社交红利:蕴藏在开放平台下的流量矿藏</p>\n</li>\n<li><p>.用数据抓取”借鸡下蛋”</p>\n</li>\n<li><p>.内容营销:打造持续输出的传播引擎</p>\n</li>\n<li><p>.搜索引擎和应用商店的优化营销</p>\n</li>\n<li><p>.捆绑下载</p>\n</li>\n<li><p>.排排坐,吃果果</p>\n</li>\n<li><p>.用嵌入式代码和小挂件让你的品牌无所不在</p>\n</li>\n<li><p>.宣传报道的文案撰写</p>\n</li>\n<li><p>.从线下到线上</p>\n</li>\n<li><p>.海外扩张</p>\n</li>\n</ul>\n<h3 id=\"激发活跃\"><a href=\"#激发活跃\" class=\"headerlink\" title=\"激发活跃\"></a>激发活跃</h3><blockquote>\n<p>鸟不鸣,信长杀之;鸟不鸣,秀吉使鸣之;鸟不鸣,家康待鸣之</p>\n</blockquote>\n<ul>\n<li><p>.职场社交巨头的用户激活秘诀</p>\n</li>\n<li><p>.A/B测试,网站活跃率提升的法宝</p>\n</li>\n<li><p>.移动应用的A/B测试</p>\n</li>\n<li><p>.另辟蹊径,降低用户活跃门槛</p>\n</li>\n<li><p>.旷日持久的补贴大战</p>\n</li>\n<li><p>.游戏改变世界</p>\n</li>\n<li><p>.我,机器人–脚本自动化运营</p>\n</li>\n</ul>\n<h3 id=\"提高留存\"><a href=\"#提高留存\" class=\"headerlink\" title=\"提高留存\"></a>提高留存</h3><blockquote>\n<p>当陪你的人要下车时,即使不舍,也该心存感激,然后挥手道别</p>\n</blockquote>\n<ul>\n<li><p>.留存与流失</p>\n<ul>\n<li>存在程序漏洞,性能瓶颈</li>\n<li>用户被频繁骚扰</li>\n<li>话题产品的热度减退</li>\n<li>有更好的替代品</li>\n<li>其他因素</li>\n</ul>\n</li>\n<li><p>.优化产品性能</p>\n</li>\n<li><p>.有损服务–放下不必要的坚持o</p>\n</li>\n<li><p>.引导新用户快速上手</p>\n</li>\n<li><p>.社交维系与社交解绑</p>\n</li>\n<li><p>.设计唤醒机制</p>\n<ul>\n<li>提供奖励</li>\n<li>告知进展</li>\n<li>个性化推荐</li>\n<li>用户社交互动提示</li>\n<li>图片推送通知</li>\n<li>表情文字</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"增加收入\"><a href=\"#增加收入\" class=\"headerlink\" title=\"增加收入\"></a>增加收入</h3><ul>\n<li><p>.免费的世界</p>\n<ul>\n<li>基本功能免费,高级功能付费</li>\n<li>交叉补贴</li>\n<li>三方市场的流量变现</li>\n<li>开源代码盈利可能</li>\n<li>公司上市,或被收购</li>\n</ul>\n</li>\n<li><p>.免费午餐的终结</p>\n</li>\n<li><p>.重定向广告,寻找消费者的热追踪弹</p>\n</li>\n<li><p>.看wet seal 如何抓住时尚的脉搏</p>\n</li>\n<li><p>.用互联网思维在微信里卖月饼</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>平时都是作为方案的实现者,最近boss让我思考一下数据分析框架驱动产品,让我来出方案.我…对,我蒙了…然后副总转手就扔来一本失传已久的pdf–增长黑客<br>","more":"</p>\n<h3 id=\"增长黑客的崛起\"><a href=\"#增长黑客的崛起\" class=\"headerlink\" title=\"增长黑客的崛起\"></a>增长黑客的崛起</h3><ul>\n<li><p>.创业家的黑暗前传: 很多产品问世伊始便已经宣告夭折</p>\n</li>\n<li><p>.增长黑客的胜利:<code>Hotmail</code>事件,在每一封用<code>Hotmail</code>发出的邮件末尾签名处增加一行附言,达到了6个月100万用户.其思想被人归纳总结成为一套低成本驱动初创公司产品增长的有效方法(增长黑客)</p>\n</li>\n</ul>\n<blockquote>\n<p>I love you. Get your free E-mail at Hotmail.</p>\n</blockquote>\n<ul>\n<li><p>.什么是<code>增长黑客</code>:以数据驱动营销,以市场指导产品,通过技术化手段贯彻增长目标的人.他们通常既了解技术,又深谙用户心理,擅长发挥创意,绕过限制,通过低成本的手段解决初创公司产品早起的增长问题.</p>\n<ul>\n<li>介于极客,发明家和广告狂人的综合</li>\n<li>A     <code>acquisition</code>       <code>how do users find us</code></li>\n<li>A     <code>activation</code>        <code>do users have a great first experience</code></li>\n<li>R     <code>retention</code>         <code>do users come back</code></li>\n<li>R     <code>revenue</code>           <code>how do you make money</code></li>\n<li>R     <code>referral</code>          <code>do users tell others</code></li>\n</ul>\n</li>\n<li><p>.增长黑客的职责和特质:</p>\n<ul>\n<li>数据为王</li>\n<li>专注目标</li>\n<li>关注细节</li>\n<li>富于创意</li>\n<li>信息通透</li>\n</ul>\n</li>\n<li><p>.一切用数据说话:</p>\n</li>\n<li><p>.增长黑客担任的团队角色:</p>\n</li>\n<li><p>.如何成为增长黑客</p>\n<blockquote>\n<p>你不可能从现在预测到未来,只有回头看时,才会发现事物之间的联系.所以你必须相信,那些生命中的点点滴滴,将会在你未来的生命里,以某种方式串联起来.你必须始终相信一些东西—-你的勇气,宿命,生活,因缘,随便什么,它们将给你追寻内心真正所想的自信,带你走离平凡,变得与众不同.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"创造正确的产品\"><a href=\"#创造正确的产品\" class=\"headerlink\" title=\"创造正确的产品\"></a>创造正确的产品</h3><ul>\n<li><p>.<code>Instagram</code>重生记:</p>\n<blockquote>\n<p>Burbn出师不利,是一个错误的开始.但世界上最好的公司都曾经脱胎于其他产品.你需要的是发现,让它进化成别的东西.</p>\n</blockquote>\n</li>\n<li><p>.<code>PMF</code>,探寻产品与市场的完美契合:互联网是快速试错和收集信息的平台,也是一个公正的仲裁者,永远能反应客观的市场动向.聪明的团队应该从产品每一次调整所带来的反馈中汲取营养,不断强化优势,及时纠正错误,找到适合自己的<code>PMF</code>状态,成为被市场接受的玩家,而不是因循守旧地沉沦在既有的产品创意中,完全罔顾市场的需求和反馈.</p>\n</li>\n<li><p>.拒绝昂贵的失败:叮咚小区用1亿元的昂贵失败,为我们证明了PMF的重要性</p>\n</li>\n<li><p>.需求,催生产品的第一原动力</p>\n<ul>\n<li>需求是真是存在还是伪需求</li>\n<li>是否刚需</li>\n<li>需求量是否够大,市场是否够肥</li>\n<li>需求变现能力</li>\n</ul>\n</li>\n<li><p>.用最小化可行产品验证需求</p>\n<ul>\n<li><code>MVP</code>:<code>minimum viable product</code></li>\n</ul>\n</li>\n<li><p>.产品早期是否需要适配新的平台环境</p>\n</li>\n<li><p>.”行胜于言”的用户调研</p>\n</li>\n</ul>\n<h3 id=\"获取用户\"><a href=\"#获取用户\" class=\"headerlink\" title=\"获取用户\"></a>获取用户</h3><blockquote>\n<p>在现代商业世界里,当一个才华横溢的创造者是没用的,除非你能同时把你创造的东西推销出去</p>\n</blockquote>\n<ul>\n<li><p>.筛选你的种子用户</p>\n<ul>\n<li>种子用户与冷启动</li>\n</ul>\n</li>\n<li><p>.从最笨的事情做起</p>\n</li>\n<li><p>.社交红利:蕴藏在开放平台下的流量矿藏</p>\n</li>\n<li><p>.用数据抓取”借鸡下蛋”</p>\n</li>\n<li><p>.内容营销:打造持续输出的传播引擎</p>\n</li>\n<li><p>.搜索引擎和应用商店的优化营销</p>\n</li>\n<li><p>.捆绑下载</p>\n</li>\n<li><p>.排排坐,吃果果</p>\n</li>\n<li><p>.用嵌入式代码和小挂件让你的品牌无所不在</p>\n</li>\n<li><p>.宣传报道的文案撰写</p>\n</li>\n<li><p>.从线下到线上</p>\n</li>\n<li><p>.海外扩张</p>\n</li>\n</ul>\n<h3 id=\"激发活跃\"><a href=\"#激发活跃\" class=\"headerlink\" title=\"激发活跃\"></a>激发活跃</h3><blockquote>\n<p>鸟不鸣,信长杀之;鸟不鸣,秀吉使鸣之;鸟不鸣,家康待鸣之</p>\n</blockquote>\n<ul>\n<li><p>.职场社交巨头的用户激活秘诀</p>\n</li>\n<li><p>.A/B测试,网站活跃率提升的法宝</p>\n</li>\n<li><p>.移动应用的A/B测试</p>\n</li>\n<li><p>.另辟蹊径,降低用户活跃门槛</p>\n</li>\n<li><p>.旷日持久的补贴大战</p>\n</li>\n<li><p>.游戏改变世界</p>\n</li>\n<li><p>.我,机器人–脚本自动化运营</p>\n</li>\n</ul>\n<h3 id=\"提高留存\"><a href=\"#提高留存\" class=\"headerlink\" title=\"提高留存\"></a>提高留存</h3><blockquote>\n<p>当陪你的人要下车时,即使不舍,也该心存感激,然后挥手道别</p>\n</blockquote>\n<ul>\n<li><p>.留存与流失</p>\n<ul>\n<li>存在程序漏洞,性能瓶颈</li>\n<li>用户被频繁骚扰</li>\n<li>话题产品的热度减退</li>\n<li>有更好的替代品</li>\n<li>其他因素</li>\n</ul>\n</li>\n<li><p>.优化产品性能</p>\n</li>\n<li><p>.有损服务–放下不必要的坚持o</p>\n</li>\n<li><p>.引导新用户快速上手</p>\n</li>\n<li><p>.社交维系与社交解绑</p>\n</li>\n<li><p>.设计唤醒机制</p>\n<ul>\n<li>提供奖励</li>\n<li>告知进展</li>\n<li>个性化推荐</li>\n<li>用户社交互动提示</li>\n<li>图片推送通知</li>\n<li>表情文字</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"增加收入\"><a href=\"#增加收入\" class=\"headerlink\" title=\"增加收入\"></a>增加收入</h3><ul>\n<li><p>.免费的世界</p>\n<ul>\n<li>基本功能免费,高级功能付费</li>\n<li>交叉补贴</li>\n<li>三方市场的流量变现</li>\n<li>开源代码盈利可能</li>\n<li>公司上市,或被收购</li>\n</ul>\n</li>\n<li><p>.免费午餐的终结</p>\n</li>\n<li><p>.重定向广告,寻找消费者的热追踪弹</p>\n</li>\n<li><p>.看wet seal 如何抓住时尚的脉搏</p>\n</li>\n<li><p>.用互联网思维在微信里卖月饼</p>\n</li>\n</ul>"},{"title":"轮询Android屏幕颜色","date":"2018-12-02T08:12:58.000Z","_content":"\n轮询Android手机屏幕指定点颜色\n\n<!-- more -->\n\n### 问题由来\n\n调起支付宝支付界面,需要等待手机反应过来,才能够执行点击事件完成支付.要么`sleep`足够长的时间,要么进行轮询.\n\n### 基础\n\n- 读取`framebuffer`数据,从中找出指定像素点的颜色.\n- `screencap`截屏然后从文件中获得指定像素点的颜色.\n- 利用两个线程实现轮询\n\n### 具体采用方法\n\n- 采用`screencap`方式获取屏幕文件信息`tmp.dump`文件\n\n\n屏幕`(x,y)`位置的对应的颜色文件位置在`position = width*y + x +3`,为十六进制使用`dd if=\"position\" bs=4 count=1 skip=\" + position + \" 2>/dev/null | hd`可以打印出十六进制数据类似:`0x00000000 FF FF FF FF                                     ....`,遗憾的在app里面写的时候无法获得,但是去掉`| hd`之后可以获得数据,于是把这个数据转换成16进制数据.可以得到想要的数据.\n\n- 采用一对信号量对读写进行控制:读者首先阻塞,待写者写入数据之后,读者运行,写者`sleep`一段时间,然后继续,直到读者读到想要的数据,跳出循环.\n\n```java\n\npublic static Semaphore semaScreenRead = new Semaphore(0);\n\npublic static Semaphore semaScreenCap = new Semaphore(1);\n\npublic static final String LOCATION = \"/sdcard/tmp.dump\";\n\npublic static final String BUTTON_COLOR = \"23 94 E5 FF\";\n\n\npublic static boolean ready = false;\n\nprivate void tellIfReady() {\n        // reader\n\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            while (true) {\n                Log.e(\"read loop\", \"entered\");\n                try {\n                    semaScreenRead.acquire();\n                    int position = width * AXIS_Y + AXIS_X + 3;\n                    String ret = execShellCmd(\"dd if='\" + LOCATION + \"' bs=4 count=1 skip=\" + position + \" 2>/dev/null \", true);\n                    Log.e(\"read ret:\", ret + \"this is ret\");\n                    if (ret.contains(BUTTON_COLOR)) {\n                        ready = true;\n                        semaScreenCap.release();\n                        break;\n                    }\n                    semaScreenCap.release();\n\n\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    Log.e(\"read error\", \"occurred!\");\n                }\n            }\n        }\n    }).start();\n\n\n    while (true) {\n        Log.e(\"write loop\", \"entered\");\n        try {\n            semaScreenCap.acquire();\n\n            execShellCmd(\"screencap \" + LOCATION, false);\n\n            semaScreenRead.release();\n\n            Thread.sleep(100);\n\n            if (ready) {\n\n                break;\n            }\n\n            Log.e(\"in cap ready status\", String.valueOf(ready));\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            Log.e(\"write error\", \"occurred\");\n        }\n    }\n\n    ready = false;\n}\n```\n\n\n","source":"_posts/轮询Android屏幕颜色.md","raw":"---\ntitle: 轮询Android屏幕颜色\ndate: 2018-12-02 16:12:58\ntags:\n- linux\n- Android\n- 信号量\n- 轮询\ncategories:\n- 奇葩案例\n---\n\n轮询Android手机屏幕指定点颜色\n\n<!-- more -->\n\n### 问题由来\n\n调起支付宝支付界面,需要等待手机反应过来,才能够执行点击事件完成支付.要么`sleep`足够长的时间,要么进行轮询.\n\n### 基础\n\n- 读取`framebuffer`数据,从中找出指定像素点的颜色.\n- `screencap`截屏然后从文件中获得指定像素点的颜色.\n- 利用两个线程实现轮询\n\n### 具体采用方法\n\n- 采用`screencap`方式获取屏幕文件信息`tmp.dump`文件\n\n\n屏幕`(x,y)`位置的对应的颜色文件位置在`position = width*y + x +3`,为十六进制使用`dd if=\"position\" bs=4 count=1 skip=\" + position + \" 2>/dev/null | hd`可以打印出十六进制数据类似:`0x00000000 FF FF FF FF                                     ....`,遗憾的在app里面写的时候无法获得,但是去掉`| hd`之后可以获得数据,于是把这个数据转换成16进制数据.可以得到想要的数据.\n\n- 采用一对信号量对读写进行控制:读者首先阻塞,待写者写入数据之后,读者运行,写者`sleep`一段时间,然后继续,直到读者读到想要的数据,跳出循环.\n\n```java\n\npublic static Semaphore semaScreenRead = new Semaphore(0);\n\npublic static Semaphore semaScreenCap = new Semaphore(1);\n\npublic static final String LOCATION = \"/sdcard/tmp.dump\";\n\npublic static final String BUTTON_COLOR = \"23 94 E5 FF\";\n\n\npublic static boolean ready = false;\n\nprivate void tellIfReady() {\n        // reader\n\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            while (true) {\n                Log.e(\"read loop\", \"entered\");\n                try {\n                    semaScreenRead.acquire();\n                    int position = width * AXIS_Y + AXIS_X + 3;\n                    String ret = execShellCmd(\"dd if='\" + LOCATION + \"' bs=4 count=1 skip=\" + position + \" 2>/dev/null \", true);\n                    Log.e(\"read ret:\", ret + \"this is ret\");\n                    if (ret.contains(BUTTON_COLOR)) {\n                        ready = true;\n                        semaScreenCap.release();\n                        break;\n                    }\n                    semaScreenCap.release();\n\n\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    Log.e(\"read error\", \"occurred!\");\n                }\n            }\n        }\n    }).start();\n\n\n    while (true) {\n        Log.e(\"write loop\", \"entered\");\n        try {\n            semaScreenCap.acquire();\n\n            execShellCmd(\"screencap \" + LOCATION, false);\n\n            semaScreenRead.release();\n\n            Thread.sleep(100);\n\n            if (ready) {\n\n                break;\n            }\n\n            Log.e(\"in cap ready status\", String.valueOf(ready));\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            Log.e(\"write error\", \"occurred\");\n        }\n    }\n\n    ready = false;\n}\n```\n\n\n","slug":"轮询Android屏幕颜色","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhc7001dzbovx5cpkupw","content":"<p>轮询Android手机屏幕指定点颜色</p>\n<a id=\"more\"></a>\n<h3 id=\"问题由来\"><a href=\"#问题由来\" class=\"headerlink\" title=\"问题由来\"></a>问题由来</h3><p>调起支付宝支付界面,需要等待手机反应过来,才能够执行点击事件完成支付.要么<code>sleep</code>足够长的时间,要么进行轮询.</p>\n<h3 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h3><ul>\n<li>读取<code>framebuffer</code>数据,从中找出指定像素点的颜色.</li>\n<li><code>screencap</code>截屏然后从文件中获得指定像素点的颜色.</li>\n<li>利用两个线程实现轮询</li>\n</ul>\n<h3 id=\"具体采用方法\"><a href=\"#具体采用方法\" class=\"headerlink\" title=\"具体采用方法\"></a>具体采用方法</h3><ul>\n<li>采用<code>screencap</code>方式获取屏幕文件信息<code>tmp.dump</code>文件</li>\n</ul>\n<p>屏幕<code>(x,y)</code>位置的对应的颜色文件位置在<code>position = width*y + x +3</code>,为十六进制使用<code>dd if=&quot;position&quot; bs=4 count=1 skip=&quot; + position + &quot; 2&gt;/dev/null | hd</code>可以打印出十六进制数据类似:<code>0x00000000 FF FF FF FF                                     ....</code>,遗憾的在app里面写的时候无法获得,但是去掉<code>| hd</code>之后可以获得数据,于是把这个数据转换成16进制数据.可以得到想要的数据.</p>\n<ul>\n<li>采用一对信号量对读写进行控制:读者首先阻塞,待写者写入数据之后,读者运行,写者<code>sleep</code>一段时间,然后继续,直到读者读到想要的数据,跳出循环.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Semaphore semaScreenRead = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Semaphore semaScreenCap = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOCATION = <span class=\"string\">\"/sdcard/tmp.dump\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BUTTON_COLOR = <span class=\"string\">\"23 94 E5 FF\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> ready = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">tellIfReady</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// reader</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                Log.e(<span class=\"string\">\"read loop\"</span>, <span class=\"string\">\"entered\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    semaScreenRead.acquire();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> position = width * AXIS_Y + AXIS_X + <span class=\"number\">3</span>;</span><br><span class=\"line\">                    String ret = execShellCmd(<span class=\"string\">\"dd if='\"</span> + LOCATION + <span class=\"string\">\"' bs=4 count=1 skip=\"</span> + position + <span class=\"string\">\" 2&gt;/dev/null \"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    Log.e(<span class=\"string\">\"read ret:\"</span>, ret + <span class=\"string\">\"this is ret\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ret.contains(BUTTON_COLOR)) &#123;</span><br><span class=\"line\">                        ready = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        semaScreenCap.release();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    semaScreenCap.release();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                    Log.e(<span class=\"string\">\"read error\"</span>, <span class=\"string\">\"occurred!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">\"write loop\"</span>, <span class=\"string\">\"entered\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            semaScreenCap.acquire();</span><br><span class=\"line\"></span><br><span class=\"line\">            execShellCmd(<span class=\"string\">\"screencap \"</span> + LOCATION, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            semaScreenRead.release();</span><br><span class=\"line\"></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ready) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Log.e(<span class=\"string\">\"in cap ready status\"</span>, String.valueOf(ready));</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            Log.e(<span class=\"string\">\"write error\"</span>, <span class=\"string\">\"occurred\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ready = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>轮询Android手机屏幕指定点颜色</p>","more":"<h3 id=\"问题由来\"><a href=\"#问题由来\" class=\"headerlink\" title=\"问题由来\"></a>问题由来</h3><p>调起支付宝支付界面,需要等待手机反应过来,才能够执行点击事件完成支付.要么<code>sleep</code>足够长的时间,要么进行轮询.</p>\n<h3 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h3><ul>\n<li>读取<code>framebuffer</code>数据,从中找出指定像素点的颜色.</li>\n<li><code>screencap</code>截屏然后从文件中获得指定像素点的颜色.</li>\n<li>利用两个线程实现轮询</li>\n</ul>\n<h3 id=\"具体采用方法\"><a href=\"#具体采用方法\" class=\"headerlink\" title=\"具体采用方法\"></a>具体采用方法</h3><ul>\n<li>采用<code>screencap</code>方式获取屏幕文件信息<code>tmp.dump</code>文件</li>\n</ul>\n<p>屏幕<code>(x,y)</code>位置的对应的颜色文件位置在<code>position = width*y + x +3</code>,为十六进制使用<code>dd if=&quot;position&quot; bs=4 count=1 skip=&quot; + position + &quot; 2&gt;/dev/null | hd</code>可以打印出十六进制数据类似:<code>0x00000000 FF FF FF FF                                     ....</code>,遗憾的在app里面写的时候无法获得,但是去掉<code>| hd</code>之后可以获得数据,于是把这个数据转换成16进制数据.可以得到想要的数据.</p>\n<ul>\n<li>采用一对信号量对读写进行控制:读者首先阻塞,待写者写入数据之后,读者运行,写者<code>sleep</code>一段时间,然后继续,直到读者读到想要的数据,跳出循环.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Semaphore semaScreenRead = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Semaphore semaScreenCap = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOCATION = <span class=\"string\">\"/sdcard/tmp.dump\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BUTTON_COLOR = <span class=\"string\">\"23 94 E5 FF\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> ready = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">tellIfReady</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// reader</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                Log.e(<span class=\"string\">\"read loop\"</span>, <span class=\"string\">\"entered\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    semaScreenRead.acquire();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> position = width * AXIS_Y + AXIS_X + <span class=\"number\">3</span>;</span><br><span class=\"line\">                    String ret = execShellCmd(<span class=\"string\">\"dd if='\"</span> + LOCATION + <span class=\"string\">\"' bs=4 count=1 skip=\"</span> + position + <span class=\"string\">\" 2&gt;/dev/null \"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    Log.e(<span class=\"string\">\"read ret:\"</span>, ret + <span class=\"string\">\"this is ret\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ret.contains(BUTTON_COLOR)) &#123;</span><br><span class=\"line\">                        ready = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        semaScreenCap.release();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    semaScreenCap.release();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                    Log.e(<span class=\"string\">\"read error\"</span>, <span class=\"string\">\"occurred!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">\"write loop\"</span>, <span class=\"string\">\"entered\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            semaScreenCap.acquire();</span><br><span class=\"line\"></span><br><span class=\"line\">            execShellCmd(<span class=\"string\">\"screencap \"</span> + LOCATION, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            semaScreenRead.release();</span><br><span class=\"line\"></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ready) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Log.e(<span class=\"string\">\"in cap ready status\"</span>, String.valueOf(ready));</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            Log.e(<span class=\"string\">\"write error\"</span>, <span class=\"string\">\"occurred\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ready = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"高性能mysql","date":"2018-07-31T08:24:42.000Z","_content":"\n高性能mysql读书笔记\n\n<!-- more -->\n\n## mysql架构\n### mysql的逻辑架构\n- 各种服务:连接处理,授权认证,安全等等\n- 查询解析,分析,优化,缓存及各种内建函数.存储过程,触发器,视图\n- 存储引擎\n### 并发控制\n- 共享锁/读锁  排它锁/写锁\n- 锁粒度\n  - 表锁\n  - 行级锁\n### 事务\n- Atomicity原子性\n- Consistency一致性\n- Isolation隔离性\n- Durability持久性\n- 隔离级\n  - READ UNCOMMITTED 读取未提交内容 脏读\n  - READ COMMITTED 读取提交内容 不可重复读\n  - REPEATALBE READ 可重读 幻读 (mysql 默认事务隔离级)\n  - SERIALIZABLE 可串行化\n- 死锁\n- 事务日志\n- mysql中的事务\n  - AUTOCOMMIT 自动提交\n  - 在事务中混合使用存储引擎 对于非事务性表进行事务操作通常不会得到警告或报错 但有时回滚事务会产出警告信息\n  - 隐式和显示锁定\n    - 隐式 事务执行过程中任何时候可以获得锁,commit或者rollback释放\n    - 显式 select ... lock in share mode ; select ... for update;\n### 多版本并发控制\n### mysql的存储引擎\n- show table status;\n- myisam\n- innodb\n\n## 寻找瓶颈:基准测试与性能分析\n### 为什么要进行基准测试\n- \n\n## 架构优化和索引\n### 选择优化的数据类型\n- 更小通常更好\n- 简单就好\n- 尽量避免null\n\n","source":"_posts/高性能mysql.md","raw":"---\ntitle: 高性能mysql\ndate: 2018-07-31 16:24:42\ntags:\n- mysql\ncategories:\n- 计算机基础\n---\n\n高性能mysql读书笔记\n\n<!-- more -->\n\n## mysql架构\n### mysql的逻辑架构\n- 各种服务:连接处理,授权认证,安全等等\n- 查询解析,分析,优化,缓存及各种内建函数.存储过程,触发器,视图\n- 存储引擎\n### 并发控制\n- 共享锁/读锁  排它锁/写锁\n- 锁粒度\n  - 表锁\n  - 行级锁\n### 事务\n- Atomicity原子性\n- Consistency一致性\n- Isolation隔离性\n- Durability持久性\n- 隔离级\n  - READ UNCOMMITTED 读取未提交内容 脏读\n  - READ COMMITTED 读取提交内容 不可重复读\n  - REPEATALBE READ 可重读 幻读 (mysql 默认事务隔离级)\n  - SERIALIZABLE 可串行化\n- 死锁\n- 事务日志\n- mysql中的事务\n  - AUTOCOMMIT 自动提交\n  - 在事务中混合使用存储引擎 对于非事务性表进行事务操作通常不会得到警告或报错 但有时回滚事务会产出警告信息\n  - 隐式和显示锁定\n    - 隐式 事务执行过程中任何时候可以获得锁,commit或者rollback释放\n    - 显式 select ... lock in share mode ; select ... for update;\n### 多版本并发控制\n### mysql的存储引擎\n- show table status;\n- myisam\n- innodb\n\n## 寻找瓶颈:基准测试与性能分析\n### 为什么要进行基准测试\n- \n\n## 架构优化和索引\n### 选择优化的数据类型\n- 更小通常更好\n- 简单就好\n- 尽量避免null\n\n","slug":"高性能mysql","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhc7001gzbovl447uqkp","content":"<p>高性能mysql读书笔记</p>\n<a id=\"more\"></a>\n<h2 id=\"mysql架构\"><a href=\"#mysql架构\" class=\"headerlink\" title=\"mysql架构\"></a>mysql架构</h2><h3 id=\"mysql的逻辑架构\"><a href=\"#mysql的逻辑架构\" class=\"headerlink\" title=\"mysql的逻辑架构\"></a>mysql的逻辑架构</h3><ul>\n<li>各种服务:连接处理,授权认证,安全等等</li>\n<li>查询解析,分析,优化,缓存及各种内建函数.存储过程,触发器,视图</li>\n<li>存储引擎<h3 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h3></li>\n<li>共享锁/读锁  排它锁/写锁</li>\n<li>锁粒度<ul>\n<li>表锁</li>\n<li>行级锁<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3></li>\n</ul>\n</li>\n<li>Atomicity原子性</li>\n<li>Consistency一致性</li>\n<li>Isolation隔离性</li>\n<li>Durability持久性</li>\n<li>隔离级<ul>\n<li>READ UNCOMMITTED 读取未提交内容 脏读</li>\n<li>READ COMMITTED 读取提交内容 不可重复读</li>\n<li>REPEATALBE READ 可重读 幻读 (mysql 默认事务隔离级)</li>\n<li>SERIALIZABLE 可串行化</li>\n</ul>\n</li>\n<li>死锁</li>\n<li>事务日志</li>\n<li>mysql中的事务<ul>\n<li>AUTOCOMMIT 自动提交</li>\n<li>在事务中混合使用存储引擎 对于非事务性表进行事务操作通常不会得到警告或报错 但有时回滚事务会产出警告信息</li>\n<li>隐式和显示锁定<ul>\n<li>隐式 事务执行过程中任何时候可以获得锁,commit或者rollback释放</li>\n<li>显式 select … lock in share mode ; select … for update;<h3 id=\"多版本并发控制\"><a href=\"#多版本并发控制\" class=\"headerlink\" title=\"多版本并发控制\"></a>多版本并发控制</h3><h3 id=\"mysql的存储引擎\"><a href=\"#mysql的存储引擎\" class=\"headerlink\" title=\"mysql的存储引擎\"></a>mysql的存储引擎</h3></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>show table status;</li>\n<li>myisam</li>\n<li>innodb</li>\n</ul>\n<h2 id=\"寻找瓶颈-基准测试与性能分析\"><a href=\"#寻找瓶颈-基准测试与性能分析\" class=\"headerlink\" title=\"寻找瓶颈:基准测试与性能分析\"></a>寻找瓶颈:基准测试与性能分析</h2><h3 id=\"为什么要进行基准测试\"><a href=\"#为什么要进行基准测试\" class=\"headerlink\" title=\"为什么要进行基准测试\"></a>为什么要进行基准测试</h3><ul>\n<li><h2 id=\"架构优化和索引\"><a href=\"#架构优化和索引\" class=\"headerlink\" title=\"架构优化和索引\"></a>架构优化和索引</h2><h3 id=\"选择优化的数据类型\"><a href=\"#选择优化的数据类型\" class=\"headerlink\" title=\"选择优化的数据类型\"></a>选择优化的数据类型</h3></li>\n<li>更小通常更好</li>\n<li>简单就好</li>\n<li>尽量避免null</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>高性能mysql读书笔记</p>","more":"<h2 id=\"mysql架构\"><a href=\"#mysql架构\" class=\"headerlink\" title=\"mysql架构\"></a>mysql架构</h2><h3 id=\"mysql的逻辑架构\"><a href=\"#mysql的逻辑架构\" class=\"headerlink\" title=\"mysql的逻辑架构\"></a>mysql的逻辑架构</h3><ul>\n<li>各种服务:连接处理,授权认证,安全等等</li>\n<li>查询解析,分析,优化,缓存及各种内建函数.存储过程,触发器,视图</li>\n<li>存储引擎<h3 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h3></li>\n<li>共享锁/读锁  排它锁/写锁</li>\n<li>锁粒度<ul>\n<li>表锁</li>\n<li>行级锁<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3></li>\n</ul>\n</li>\n<li>Atomicity原子性</li>\n<li>Consistency一致性</li>\n<li>Isolation隔离性</li>\n<li>Durability持久性</li>\n<li>隔离级<ul>\n<li>READ UNCOMMITTED 读取未提交内容 脏读</li>\n<li>READ COMMITTED 读取提交内容 不可重复读</li>\n<li>REPEATALBE READ 可重读 幻读 (mysql 默认事务隔离级)</li>\n<li>SERIALIZABLE 可串行化</li>\n</ul>\n</li>\n<li>死锁</li>\n<li>事务日志</li>\n<li>mysql中的事务<ul>\n<li>AUTOCOMMIT 自动提交</li>\n<li>在事务中混合使用存储引擎 对于非事务性表进行事务操作通常不会得到警告或报错 但有时回滚事务会产出警告信息</li>\n<li>隐式和显示锁定<ul>\n<li>隐式 事务执行过程中任何时候可以获得锁,commit或者rollback释放</li>\n<li>显式 select … lock in share mode ; select … for update;<h3 id=\"多版本并发控制\"><a href=\"#多版本并发控制\" class=\"headerlink\" title=\"多版本并发控制\"></a>多版本并发控制</h3><h3 id=\"mysql的存储引擎\"><a href=\"#mysql的存储引擎\" class=\"headerlink\" title=\"mysql的存储引擎\"></a>mysql的存储引擎</h3></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>show table status;</li>\n<li>myisam</li>\n<li>innodb</li>\n</ul>\n<h2 id=\"寻找瓶颈-基准测试与性能分析\"><a href=\"#寻找瓶颈-基准测试与性能分析\" class=\"headerlink\" title=\"寻找瓶颈:基准测试与性能分析\"></a>寻找瓶颈:基准测试与性能分析</h2><h3 id=\"为什么要进行基准测试\"><a href=\"#为什么要进行基准测试\" class=\"headerlink\" title=\"为什么要进行基准测试\"></a>为什么要进行基准测试</h3><ul>\n<li><h2 id=\"架构优化和索引\"><a href=\"#架构优化和索引\" class=\"headerlink\" title=\"架构优化和索引\"></a>架构优化和索引</h2><h3 id=\"选择优化的数据类型\"><a href=\"#选择优化的数据类型\" class=\"headerlink\" title=\"选择优化的数据类型\"></a>选择优化的数据类型</h3></li>\n<li>更小通常更好</li>\n<li>简单就好</li>\n<li>尽量避免null</li>\n</ul>"},{"title":"laravel路由分发","date":"2018-11-13T06:23:15.000Z","_content":"\nlaravel有一个路由文件,那么如何通过定义的REQUEST_URI找到相应的控制器方法并执行呢?\n\n<!-- more -->\n\n### 一个请求从进入index.php之后到完成响应的流程\n第一步:自动加载,实例化Ioc容器.绑定Kernel,.具体过程在bootstrap目录里面.如下:\n```php\n/*\tindex.php*/\n\n/*\n|--------------------------------------------------------------------------\n| Register The Auto Loader\n|--------------------------------------------------------------------------\n|\n| Composer provides a convenient, automatically generated class loader for\n| our application. We just need to utilize it! We'll simply require it\n| into the script here so that we don't have to worry about manual\n| loading any of our classes later on. It feels great to relax.\n|\n*/\n\nrequire __DIR__.'/../bootstrap/autoload.php';\n\n/*\n|--------------------------------------------------------------------------\n| Turn On The Lights\n|--------------------------------------------------------------------------\n|\n| We need to illuminate PHP development, so let us turn on the lights.\n| This bootstraps the framework and gets it ready for use, then it\n| will load up this application so that we can run it and send\n| the responses back to the browser and delight our users.\n|\n*/\n\n$app = require_once __DIR__.'/../bootstrap/app.php';\n\n\n\n/* Application Container*/\n\n/**\n * Create a new Illuminate application instance.\n *\n * @param  string|null  $basePath\n * @return void\n */\npublic function __construct($basePath = null)\n{\n    if ($basePath) {\n        $this->setBasePath($basePath);\n    }\n\n    $this->registerBaseBindings();\n\n    $this->registerBaseServiceProviders();\n\n    $this->registerCoreContainerAliases();\n\n}\n\n/**\n * Register the basic bindings into the container.\n *\n * @return void\n */\nprotected function registerBaseBindings()\n{\n    static::setInstance($this);\n\n    $this->instance('app', $this);\n\n    $this->instance(Container::class, $this);\n}\n\n/**\n * Register all of the base service providers.\n *\n * @return void\n */\nprotected function registerBaseServiceProviders()\n{\n    $this->register(new EventServiceProvider($this));\n\n    $this->register(new LogServiceProvider($this));\n\n    $this->register(new RoutingServiceProvider($this));\n}\n\n/**\n * Register the core class aliases in the container.\n *\n * @return void\n */\npublic function registerCoreContainerAliases()\n{\n\t//todo\n}\n\n```\n第二步: 实例化Httpkernel并处理请求\n```php\n/* index.php */\n/*\n|--------------------------------------------------------------------------\n| Run The Application\n|--------------------------------------------------------------------------\n|\n| Once we have the application, we can handle the incoming request\n| through the kernel, and send the associated response back to\n| the client's browser allowing them to enjoy the creative\n| and wonderful application we have prepared for them.\n|\n*/\n\n$kernel = $app->make(Illuminate\\Contracts\\Http\\Kernel::class);\n\n$response = $kernel->handle(\n    $request = Illuminate\\Http\\Request::capture()\n);\n\n/* kernel */\n \n /**\n * Handle an incoming HTTP request.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */\npublic function handle($request)\n{\n    try {\n        $request->enableHttpMethodParameterOverride();\n\n        $response = $this->sendRequestThroughRouter($request);\n    } catch (Exception $e) {\n        $this->reportException($e);\n\n        $response = $this->renderException($request, $e);\n    } catch (Throwable $e) {\n        $this->reportException($e = new FatalThrowableError($e));\n\n        $response = $this->renderException($request, $e);\n    }\n\n    $this->app['events']->dispatch(\n        new Events\\RequestHandled($request, $response)\n    );\n\n    return $response;\n}\n\n /**\n * Send the given request through the middleware / router.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */\nprotected function sendRequestThroughRouter($request)\n{\n    $this->app->instance('request', $request);\n\n    Facade::clearResolvedInstance('request');\n\n    $this->bootstrap();\n\n    return (new Pipeline($this->app))\n                ->send($request)\n                ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware)\n                ->then($this->dispatchToRouter());\n}\n\n/**\n * Bootstrap the application for HTTP requests.\n *\n * @return void\n */\npublic function bootstrap()\n{\n    if (! $this->app->hasBeenBootstrapped()) {\n        $this->app->bootstrapWith($this->bootstrappers());\n    }\n}\n\n /**\n * The bootstrap classes for the application.\n *\n * @var array\n */\nprotected $bootstrappers = [\n    \\Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class,\n    \\Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::class,\n    \\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class,\n    \\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class,\n    \\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class,\n    \\Illuminate\\Foundation\\Bootstrap\\BootProviders::class,\n];\n\n/**\n * Run the given array of bootstrap classes.\n *\n * @param  array  $bootstrappers\n * @return void\n */\npublic function bootstrapWith(array $bootstrappers)\n{\n    $this->hasBeenBootstrapped = true;\n\n    foreach ($bootstrappers as $bootstrapper) {\n        $this['events']->fire('bootstrapping: '.$bootstrapper, [$this]);\n\n        $this->make($bootstrapper)->bootstrap($this);\n\n        $this['events']->fire('bootstrapped: '.$bootstrapper, [$this]);\n    }\n}\n\n/* BootProviders */\n\nclass BootProviders\n{\n    /**\n     * Bootstrap the given application.\n     *\n     * @param  \\Illuminate\\Contracts\\Foundation\\Application  $app\n     * @return void\n     */\n    public function bootstrap(Application $app)\n    {\n        $app->boot();\n    }\n}\n\n/* Application */\n  \n/**\n * Boot the application's service providers.\n *\n * @return void\n */\npublic function boot()\n{\n    if ($this->booted) {\n        return;\n    }\n\n    // Once the application has booted we will also fire some \"booted\" callbacks\n    // for any listeners that need to do work after this initial booting gets\n    // finished. This is useful when ordering the boot-up processes we run.\n    $this->fireAppCallbacks($this->bootingCallbacks);\n\n    array_walk($this->serviceProviders, function ($p) {\n        $this->bootProvider($p);\n    });\n\n    $this->booted = true;\n\n    $this->fireAppCallbacks($this->bootedCallbacks);\n}\n\n/**\n * Boot the given service provider.\n *\n * @param  \\Illuminate\\Support\\ServiceProvider  $provider\n * @return mixed\n */\nprotected function bootProvider(ServiceProvider $provider)\n{\n    if (method_exists($provider, 'boot')) {\n        return $this->call([$provider, 'boot']);\n    }\n}\n\n```\n中间比较重要的是`kernel`中`bootstrap()`方法,我们具体来看看给定的几个Bootstrap class, 这几个类中`bootstrap()`方法会依次执行\n\n1. `\\Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class`:加载并设置环境变量,设置`$_ENV`,`$_SERVER`的值,涉及到的类`\\Dotenv\\Dotenv`, `\\Dotenv\\Loader`,涉及相关的函数`putenv()`等等\n\n2. `\\Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::class`:向`app`容器里面添加`config`到`instance`中,其中`config`读取`config`目录下的`php`文件\n\n3. `\\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class`: 注册错误,异常,关闭处理函数,涉及相关的函数`set_error_handler()`,`set_exception_handler()`,`register_shutdown_function()`等等\n\n4. `\\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class`:把`config`里面的`app['alias']`设置自动加载,相关类`AliasLoader`,相关函数`spl_autoload_register()`,`class_alias()`等等\n\n5. `\\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class`:注册`config`里面`app['providers']`,这里有个`compileManifest`文件,位置在`bootstrap/cache/services.php`,第一次生成的时候需要实例化每一个`serviceprovide`来判断他们的一些属性如`isdefer`,`when`等等,而这些行为一般不会变化,因此第一次执行的时候实例化他们,并保存起来,以后就不用每次都实例化了.如果发生了变化呢?代码里面是通过比较`providers`的值是否变化,如果变化了则重新编译.这样的结果就把各个`serviceprovider`按照一些特性分组了,如果`eager`则实例化这个`serviceprovider`并调用它的`register()` 方法,如果是`isdefered`则只是把它和并到这个数组里面.\n\n6. `\\Illuminate\\Foundation\\Bootstrap\\BootProviders::class`:这一步就是把执行各个`serviceprovider`里面的`boot`方法\n\n`bootstrap()`之后的就是利用`Pipeline`经过中间件之后到`dispatchToRouter()`\n```php\n\n/*Router*/\n\n/**\n * Dispatch the request to a route and return the response.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return mixed\n */\npublic function dispatchToRoute(Request $request)\n{\n    // First we will find a route that matches this request. We will also set the\n    // route resolver on the request so middlewares assigned to the route will\n    // receive access to this route instance for checking of the parameters.\n    $route = $this->findRoute($request);\n\n    $request->setRouteResolver(function () use ($route) {\n        return $route;\n    });\n\n\n    $this->events->dispatch(new Events\\RouteMatched($route, $request));\n\n    $response = $this->runRouteWithinStack($route, $request);\n\n    return $this->prepareResponse($request, $response);\n}\n\n /**\n * Run the given route within a Stack \"onion\" instance.\n *\n * @param  \\Illuminate\\Routing\\Route  $route\n * @param  \\Illuminate\\Http\\Request  $request\n * @return mixed\n */\nprotected function runRouteWithinStack(Route $route, Request $request)\n{\n    $shouldSkipMiddleware = $this->container->bound('middleware.disable') &&\n                            $this->container->make('middleware.disable') === true;\n\n    $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route);\n\n    return (new Pipeline($this->container))\n                    ->send($request)\n                    ->through($middleware)\n                    ->then(function ($request) use ($route) {\n                        return $this->prepareResponse(\n                            $request, $route->run()\n                        );\n                    });\n}\n\n/* RouteCollection */\n\n/**\n * Find the first route matching a given request.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Routing\\Route\n *\n * @throws \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException\n */\npublic function match(Request $request)\n{\n    $routes = $this->get($request->getMethod());\n\n    // First, we will see if we can find a matching route for this current request\n    // method. If we can, great, we can just return it so that it can be called\n    // by the consumer. Otherwise we will check for routes with another verb.\n    $route = $this->matchAgainstRoutes($routes, $request);\n\n    if (! is_null($route)) {\n        return $route->bind($request);\n    }\n\n    // If no route was found we will now check if a matching route is specified by\n    // another HTTP verb. If it is we will need to throw a MethodNotAllowed and\n    // inform the user agent of which HTTP verb it should use for this route.\n    $others = $this->checkForAlternateVerbs($request);\n\n    if (count($others) > 0) {\n        return $this->getRouteForMethods($request, $others);\n    }\n\n    throw new NotFoundHttpException;\n}\n\n /**\n * Determine if a route in the array matches the request.\n *\n * @param  array  $routes\n * @param  \\Illuminate\\http\\Request  $request\n * @param  bool  $includingMethod\n * @return \\Illuminate\\Routing\\Route|null\n */\nprotected function matchAgainstRoutes(array $routes, $request, $includingMethod = true)\n{\n    return Arr::first($routes, function ($value) use ($request, $includingMethod) {\n            return $value->matches($request, $includingMethod);\n        });\n}\n\n/* Route */\n\n/**\n * Determine if the route matches given request.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @param  bool  $includingMethod\n * @return bool\n */\npublic function matches(Request $request, $includingMethod = true)\n{\n    $this->compileRoute();\n\n    foreach ($this->getValidators() as $validator) {\n        if (! $includingMethod && $validator instanceof MethodValidator) {\n            continue;\n        }\n\n        if (! $validator->matches($this, $request)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n\n/**\n * Run the route action and return the response.\n *\n * @return mixed\n */\npublic function run()\n{\n    $this->container = $this->container ?: new Container;\n\n    try {\n        if ($this->isControllerAction()) {\n            return $this->runController();\n        }\n\n        return $this->runCallable();\n    } catch (HttpResponseException $e) {\n        return $e->getResponse();\n    }\n}\n\n\n/* ControllerDispatcher */\n\n/**\n * Dispatch a request to a given controller and method.\n *\n * @param  \\Illuminate\\Routing\\Route  $route\n * @param  mixed  $controller\n * @param  string  $method\n * @return mixed\n */\npublic function dispatch(Route $route, $controller, $method)\n{\n    $parameters = $this->resolveClassMethodDependencies(\n        $route->parametersWithoutNulls(), $controller, $method\n    );\n\n    if (method_exists($controller, 'callAction')) {\n        return $controller->callAction($method, $parameters);\n    }\n\n    return $controller->{$method}(...array_values($parameters));\n}\n\n```\n可以看出`dispatchToRoute`首先是`findRoute()`就是在`routeCollections`里面寻找第一个匹配的路由.具体的做法是编译路由会产生正则表达式,然后使用`validator`来验证这个路由是否和这个请求匹配.找到路由之后经过一组路由中间件然后执行对应到的控制器方法,最后执行这个方法返回结果.具体过程也使用了`ControllerDispatcher`类\n\n第三步:处理结束请求的回调\n```php\n/* index.php */\n\n$kernel->terminate($request, $response);\n\n/* Application */\n\n/**\n * Terminate the application.\n *\n * @return void\n */\npublic function terminate()\n{\n    foreach ($this->terminatingCallbacks as $terminating) {\n        $this->call($terminating);\n    }\n}\n```\n\n### 几个问题\n分析了整个请求从`index.php`到响应客户端的过程回答下面几个问题就很容易了:\n\n1. `routes`目录下面的路由是何时加载的?\n\n从分析中可以看出:`app/Providers/RouteServiceProvider.php`中的`map()`方法.也就是在`Kernel`执行`bootstrap()`中对`ServiceProvider`并执行`boot()`之后,路由文件就加载进去了.\n","source":"_posts/laravel路由分发.md","raw":"---\ntitle: laravel路由分发\ndate: 2018-11-13 14:23:15\ntags: \n- laravel\n- php\ncategories:\n- 源码分析\n---\n\nlaravel有一个路由文件,那么如何通过定义的REQUEST_URI找到相应的控制器方法并执行呢?\n\n<!-- more -->\n\n### 一个请求从进入index.php之后到完成响应的流程\n第一步:自动加载,实例化Ioc容器.绑定Kernel,.具体过程在bootstrap目录里面.如下:\n```php\n/*\tindex.php*/\n\n/*\n|--------------------------------------------------------------------------\n| Register The Auto Loader\n|--------------------------------------------------------------------------\n|\n| Composer provides a convenient, automatically generated class loader for\n| our application. We just need to utilize it! We'll simply require it\n| into the script here so that we don't have to worry about manual\n| loading any of our classes later on. It feels great to relax.\n|\n*/\n\nrequire __DIR__.'/../bootstrap/autoload.php';\n\n/*\n|--------------------------------------------------------------------------\n| Turn On The Lights\n|--------------------------------------------------------------------------\n|\n| We need to illuminate PHP development, so let us turn on the lights.\n| This bootstraps the framework and gets it ready for use, then it\n| will load up this application so that we can run it and send\n| the responses back to the browser and delight our users.\n|\n*/\n\n$app = require_once __DIR__.'/../bootstrap/app.php';\n\n\n\n/* Application Container*/\n\n/**\n * Create a new Illuminate application instance.\n *\n * @param  string|null  $basePath\n * @return void\n */\npublic function __construct($basePath = null)\n{\n    if ($basePath) {\n        $this->setBasePath($basePath);\n    }\n\n    $this->registerBaseBindings();\n\n    $this->registerBaseServiceProviders();\n\n    $this->registerCoreContainerAliases();\n\n}\n\n/**\n * Register the basic bindings into the container.\n *\n * @return void\n */\nprotected function registerBaseBindings()\n{\n    static::setInstance($this);\n\n    $this->instance('app', $this);\n\n    $this->instance(Container::class, $this);\n}\n\n/**\n * Register all of the base service providers.\n *\n * @return void\n */\nprotected function registerBaseServiceProviders()\n{\n    $this->register(new EventServiceProvider($this));\n\n    $this->register(new LogServiceProvider($this));\n\n    $this->register(new RoutingServiceProvider($this));\n}\n\n/**\n * Register the core class aliases in the container.\n *\n * @return void\n */\npublic function registerCoreContainerAliases()\n{\n\t//todo\n}\n\n```\n第二步: 实例化Httpkernel并处理请求\n```php\n/* index.php */\n/*\n|--------------------------------------------------------------------------\n| Run The Application\n|--------------------------------------------------------------------------\n|\n| Once we have the application, we can handle the incoming request\n| through the kernel, and send the associated response back to\n| the client's browser allowing them to enjoy the creative\n| and wonderful application we have prepared for them.\n|\n*/\n\n$kernel = $app->make(Illuminate\\Contracts\\Http\\Kernel::class);\n\n$response = $kernel->handle(\n    $request = Illuminate\\Http\\Request::capture()\n);\n\n/* kernel */\n \n /**\n * Handle an incoming HTTP request.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */\npublic function handle($request)\n{\n    try {\n        $request->enableHttpMethodParameterOverride();\n\n        $response = $this->sendRequestThroughRouter($request);\n    } catch (Exception $e) {\n        $this->reportException($e);\n\n        $response = $this->renderException($request, $e);\n    } catch (Throwable $e) {\n        $this->reportException($e = new FatalThrowableError($e));\n\n        $response = $this->renderException($request, $e);\n    }\n\n    $this->app['events']->dispatch(\n        new Events\\RequestHandled($request, $response)\n    );\n\n    return $response;\n}\n\n /**\n * Send the given request through the middleware / router.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */\nprotected function sendRequestThroughRouter($request)\n{\n    $this->app->instance('request', $request);\n\n    Facade::clearResolvedInstance('request');\n\n    $this->bootstrap();\n\n    return (new Pipeline($this->app))\n                ->send($request)\n                ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware)\n                ->then($this->dispatchToRouter());\n}\n\n/**\n * Bootstrap the application for HTTP requests.\n *\n * @return void\n */\npublic function bootstrap()\n{\n    if (! $this->app->hasBeenBootstrapped()) {\n        $this->app->bootstrapWith($this->bootstrappers());\n    }\n}\n\n /**\n * The bootstrap classes for the application.\n *\n * @var array\n */\nprotected $bootstrappers = [\n    \\Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class,\n    \\Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::class,\n    \\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class,\n    \\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class,\n    \\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class,\n    \\Illuminate\\Foundation\\Bootstrap\\BootProviders::class,\n];\n\n/**\n * Run the given array of bootstrap classes.\n *\n * @param  array  $bootstrappers\n * @return void\n */\npublic function bootstrapWith(array $bootstrappers)\n{\n    $this->hasBeenBootstrapped = true;\n\n    foreach ($bootstrappers as $bootstrapper) {\n        $this['events']->fire('bootstrapping: '.$bootstrapper, [$this]);\n\n        $this->make($bootstrapper)->bootstrap($this);\n\n        $this['events']->fire('bootstrapped: '.$bootstrapper, [$this]);\n    }\n}\n\n/* BootProviders */\n\nclass BootProviders\n{\n    /**\n     * Bootstrap the given application.\n     *\n     * @param  \\Illuminate\\Contracts\\Foundation\\Application  $app\n     * @return void\n     */\n    public function bootstrap(Application $app)\n    {\n        $app->boot();\n    }\n}\n\n/* Application */\n  \n/**\n * Boot the application's service providers.\n *\n * @return void\n */\npublic function boot()\n{\n    if ($this->booted) {\n        return;\n    }\n\n    // Once the application has booted we will also fire some \"booted\" callbacks\n    // for any listeners that need to do work after this initial booting gets\n    // finished. This is useful when ordering the boot-up processes we run.\n    $this->fireAppCallbacks($this->bootingCallbacks);\n\n    array_walk($this->serviceProviders, function ($p) {\n        $this->bootProvider($p);\n    });\n\n    $this->booted = true;\n\n    $this->fireAppCallbacks($this->bootedCallbacks);\n}\n\n/**\n * Boot the given service provider.\n *\n * @param  \\Illuminate\\Support\\ServiceProvider  $provider\n * @return mixed\n */\nprotected function bootProvider(ServiceProvider $provider)\n{\n    if (method_exists($provider, 'boot')) {\n        return $this->call([$provider, 'boot']);\n    }\n}\n\n```\n中间比较重要的是`kernel`中`bootstrap()`方法,我们具体来看看给定的几个Bootstrap class, 这几个类中`bootstrap()`方法会依次执行\n\n1. `\\Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class`:加载并设置环境变量,设置`$_ENV`,`$_SERVER`的值,涉及到的类`\\Dotenv\\Dotenv`, `\\Dotenv\\Loader`,涉及相关的函数`putenv()`等等\n\n2. `\\Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::class`:向`app`容器里面添加`config`到`instance`中,其中`config`读取`config`目录下的`php`文件\n\n3. `\\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class`: 注册错误,异常,关闭处理函数,涉及相关的函数`set_error_handler()`,`set_exception_handler()`,`register_shutdown_function()`等等\n\n4. `\\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class`:把`config`里面的`app['alias']`设置自动加载,相关类`AliasLoader`,相关函数`spl_autoload_register()`,`class_alias()`等等\n\n5. `\\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class`:注册`config`里面`app['providers']`,这里有个`compileManifest`文件,位置在`bootstrap/cache/services.php`,第一次生成的时候需要实例化每一个`serviceprovide`来判断他们的一些属性如`isdefer`,`when`等等,而这些行为一般不会变化,因此第一次执行的时候实例化他们,并保存起来,以后就不用每次都实例化了.如果发生了变化呢?代码里面是通过比较`providers`的值是否变化,如果变化了则重新编译.这样的结果就把各个`serviceprovider`按照一些特性分组了,如果`eager`则实例化这个`serviceprovider`并调用它的`register()` 方法,如果是`isdefered`则只是把它和并到这个数组里面.\n\n6. `\\Illuminate\\Foundation\\Bootstrap\\BootProviders::class`:这一步就是把执行各个`serviceprovider`里面的`boot`方法\n\n`bootstrap()`之后的就是利用`Pipeline`经过中间件之后到`dispatchToRouter()`\n```php\n\n/*Router*/\n\n/**\n * Dispatch the request to a route and return the response.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return mixed\n */\npublic function dispatchToRoute(Request $request)\n{\n    // First we will find a route that matches this request. We will also set the\n    // route resolver on the request so middlewares assigned to the route will\n    // receive access to this route instance for checking of the parameters.\n    $route = $this->findRoute($request);\n\n    $request->setRouteResolver(function () use ($route) {\n        return $route;\n    });\n\n\n    $this->events->dispatch(new Events\\RouteMatched($route, $request));\n\n    $response = $this->runRouteWithinStack($route, $request);\n\n    return $this->prepareResponse($request, $response);\n}\n\n /**\n * Run the given route within a Stack \"onion\" instance.\n *\n * @param  \\Illuminate\\Routing\\Route  $route\n * @param  \\Illuminate\\Http\\Request  $request\n * @return mixed\n */\nprotected function runRouteWithinStack(Route $route, Request $request)\n{\n    $shouldSkipMiddleware = $this->container->bound('middleware.disable') &&\n                            $this->container->make('middleware.disable') === true;\n\n    $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route);\n\n    return (new Pipeline($this->container))\n                    ->send($request)\n                    ->through($middleware)\n                    ->then(function ($request) use ($route) {\n                        return $this->prepareResponse(\n                            $request, $route->run()\n                        );\n                    });\n}\n\n/* RouteCollection */\n\n/**\n * Find the first route matching a given request.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Routing\\Route\n *\n * @throws \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException\n */\npublic function match(Request $request)\n{\n    $routes = $this->get($request->getMethod());\n\n    // First, we will see if we can find a matching route for this current request\n    // method. If we can, great, we can just return it so that it can be called\n    // by the consumer. Otherwise we will check for routes with another verb.\n    $route = $this->matchAgainstRoutes($routes, $request);\n\n    if (! is_null($route)) {\n        return $route->bind($request);\n    }\n\n    // If no route was found we will now check if a matching route is specified by\n    // another HTTP verb. If it is we will need to throw a MethodNotAllowed and\n    // inform the user agent of which HTTP verb it should use for this route.\n    $others = $this->checkForAlternateVerbs($request);\n\n    if (count($others) > 0) {\n        return $this->getRouteForMethods($request, $others);\n    }\n\n    throw new NotFoundHttpException;\n}\n\n /**\n * Determine if a route in the array matches the request.\n *\n * @param  array  $routes\n * @param  \\Illuminate\\http\\Request  $request\n * @param  bool  $includingMethod\n * @return \\Illuminate\\Routing\\Route|null\n */\nprotected function matchAgainstRoutes(array $routes, $request, $includingMethod = true)\n{\n    return Arr::first($routes, function ($value) use ($request, $includingMethod) {\n            return $value->matches($request, $includingMethod);\n        });\n}\n\n/* Route */\n\n/**\n * Determine if the route matches given request.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @param  bool  $includingMethod\n * @return bool\n */\npublic function matches(Request $request, $includingMethod = true)\n{\n    $this->compileRoute();\n\n    foreach ($this->getValidators() as $validator) {\n        if (! $includingMethod && $validator instanceof MethodValidator) {\n            continue;\n        }\n\n        if (! $validator->matches($this, $request)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n\n/**\n * Run the route action and return the response.\n *\n * @return mixed\n */\npublic function run()\n{\n    $this->container = $this->container ?: new Container;\n\n    try {\n        if ($this->isControllerAction()) {\n            return $this->runController();\n        }\n\n        return $this->runCallable();\n    } catch (HttpResponseException $e) {\n        return $e->getResponse();\n    }\n}\n\n\n/* ControllerDispatcher */\n\n/**\n * Dispatch a request to a given controller and method.\n *\n * @param  \\Illuminate\\Routing\\Route  $route\n * @param  mixed  $controller\n * @param  string  $method\n * @return mixed\n */\npublic function dispatch(Route $route, $controller, $method)\n{\n    $parameters = $this->resolveClassMethodDependencies(\n        $route->parametersWithoutNulls(), $controller, $method\n    );\n\n    if (method_exists($controller, 'callAction')) {\n        return $controller->callAction($method, $parameters);\n    }\n\n    return $controller->{$method}(...array_values($parameters));\n}\n\n```\n可以看出`dispatchToRoute`首先是`findRoute()`就是在`routeCollections`里面寻找第一个匹配的路由.具体的做法是编译路由会产生正则表达式,然后使用`validator`来验证这个路由是否和这个请求匹配.找到路由之后经过一组路由中间件然后执行对应到的控制器方法,最后执行这个方法返回结果.具体过程也使用了`ControllerDispatcher`类\n\n第三步:处理结束请求的回调\n```php\n/* index.php */\n\n$kernel->terminate($request, $response);\n\n/* Application */\n\n/**\n * Terminate the application.\n *\n * @return void\n */\npublic function terminate()\n{\n    foreach ($this->terminatingCallbacks as $terminating) {\n        $this->call($terminating);\n    }\n}\n```\n\n### 几个问题\n分析了整个请求从`index.php`到响应客户端的过程回答下面几个问题就很容易了:\n\n1. `routes`目录下面的路由是何时加载的?\n\n从分析中可以看出:`app/Providers/RouteServiceProvider.php`中的`map()`方法.也就是在`Kernel`执行`bootstrap()`中对`ServiceProvider`并执行`boot()`之后,路由文件就加载进去了.\n","slug":"laravel路由分发","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhgq002yzbovgaxmehjo","content":"<p>laravel有一个路由文件,那么如何通过定义的REQUEST_URI找到相应的控制器方法并执行呢?</p>\n<a id=\"more\"></a>\n<h3 id=\"一个请求从进入index-php之后到完成响应的流程\"><a href=\"#一个请求从进入index-php之后到完成响应的流程\" class=\"headerlink\" title=\"一个请求从进入index.php之后到完成响应的流程\"></a>一个请求从进入index.php之后到完成响应的流程</h3><p>第一步:自动加载,实例化Ioc容器.绑定Kernel,.具体过程在bootstrap目录里面.如下:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*\tindex.php*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| Register The Auto Loader</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">| Composer provides a convenient, automatically generated class loader for</span></span><br><span class=\"line\"><span class=\"comment\">| our application. We just need to utilize it! We'll simply require it</span></span><br><span class=\"line\"><span class=\"comment\">| into the script here so that we don't have to worry about manual</span></span><br><span class=\"line\"><span class=\"comment\">| loading any of our classes later on. It feels great to relax.</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span>.<span class=\"string\">'/../bootstrap/autoload.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| Turn On The Lights</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">| We need to illuminate PHP development, so let us turn on the lights.</span></span><br><span class=\"line\"><span class=\"comment\">| This bootstraps the framework and gets it ready for use, then it</span></span><br><span class=\"line\"><span class=\"comment\">| will load up this application so that we can run it and send</span></span><br><span class=\"line\"><span class=\"comment\">| the responses back to the browser and delight our users.</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">$app = <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span>.<span class=\"string\">'/../bootstrap/app.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Application Container*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create a new Illuminate application instance.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string|null  $basePath</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($basePath = null)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($basePath) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setBasePath($basePath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;registerBaseBindings();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;registerBaseServiceProviders();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;registerCoreContainerAliases();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Register the basic bindings into the container.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerBaseBindings</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>::setInstance(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;instance(<span class=\"string\">'app'</span>, <span class=\"keyword\">$this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;instance(Container::class, <span class=\"keyword\">$this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Register all of the base service providers.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerBaseServiceProviders</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;register(<span class=\"keyword\">new</span> EventServiceProvider(<span class=\"keyword\">$this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;register(<span class=\"keyword\">new</span> LogServiceProvider(<span class=\"keyword\">$this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;register(<span class=\"keyword\">new</span> RoutingServiceProvider(<span class=\"keyword\">$this</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Register the core class aliases in the container.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerCoreContainerAliases</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//todo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二步: 实例化Httpkernel并处理请求<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* index.php */</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| Run The Application</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">| Once we have the application, we can handle the incoming request</span></span><br><span class=\"line\"><span class=\"comment\">| through the kernel, and send the associated response back to</span></span><br><span class=\"line\"><span class=\"comment\">| the client's browser allowing them to enjoy the creative</span></span><br><span class=\"line\"><span class=\"comment\">| and wonderful application we have prepared for them.</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">$kernel = $app-&gt;make(Illuminate\\Contracts\\Http\\Kernel::class);</span><br><span class=\"line\"></span><br><span class=\"line\">$response = $kernel-&gt;handle(</span><br><span class=\"line\">    $request = Illuminate\\Http\\Request::capture()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* kernel */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Handle an incoming HTTP request.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> \\Illuminate\\Http\\Response</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">($request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        $request-&gt;enableHttpMethodParameterOverride();</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;sendRequestThroughRouter($request);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;reportException($e);</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;renderException($request, $e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable $e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;reportException($e = <span class=\"keyword\">new</span> FatalThrowableError($e));</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;renderException($request, $e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;app[<span class=\"string\">'events'</span>]-&gt;dispatch(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Events\\RequestHandled($request, $response)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $response;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Send the given request through the middleware / router.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> \\Illuminate\\Http\\Response</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendRequestThroughRouter</span><span class=\"params\">($request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;app-&gt;instance(<span class=\"string\">'request'</span>, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">    Facade::clearResolvedInstance(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> Pipeline(<span class=\"keyword\">$this</span>-&gt;app))</span><br><span class=\"line\">                -&gt;send($request)</span><br><span class=\"line\">                -&gt;through(<span class=\"keyword\">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class=\"keyword\">$this</span>-&gt;middleware)</span><br><span class=\"line\">                -&gt;then(<span class=\"keyword\">$this</span>-&gt;dispatchToRouter());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Bootstrap the application for HTTP requests.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (! <span class=\"keyword\">$this</span>-&gt;app-&gt;hasBeenBootstrapped()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;app-&gt;bootstrapWith(<span class=\"keyword\">$this</span>-&gt;bootstrappers());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The bootstrap classes for the application.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $bootstrappers = [</span><br><span class=\"line\">    \\Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class,</span><br><span class=\"line\">    \\Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::class,</span><br><span class=\"line\">    \\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class,</span><br><span class=\"line\">    \\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class,</span><br><span class=\"line\">    \\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class,</span><br><span class=\"line\">    \\Illuminate\\Foundation\\Bootstrap\\BootProviders::class,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Run the given array of bootstrap classes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  array  $bootstrappers</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrapWith</span><span class=\"params\">(array $bootstrappers)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;hasBeenBootstrapped = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($bootstrappers <span class=\"keyword\">as</span> $bootstrapper) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>[<span class=\"string\">'events'</span>]-&gt;fire(<span class=\"string\">'bootstrapping: '</span>.$bootstrapper, [<span class=\"keyword\">$this</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;make($bootstrapper)-&gt;bootstrap(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>[<span class=\"string\">'events'</span>]-&gt;fire(<span class=\"string\">'bootstrapped: '</span>.$bootstrapper, [<span class=\"keyword\">$this</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* BootProviders */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BootProviders</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Bootstrap the given application.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  \\Illuminate\\Contracts\\Foundation\\Application  $app</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span><span class=\"params\">(Application $app)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $app-&gt;boot();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Application */</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Boot the application's service providers.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boot</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;booted) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Once the application has booted we will also fire some \"booted\" callbacks</span></span><br><span class=\"line\">    <span class=\"comment\">// for any listeners that need to do work after this initial booting gets</span></span><br><span class=\"line\">    <span class=\"comment\">// finished. This is useful when ordering the boot-up processes we run.</span></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;fireAppCallbacks(<span class=\"keyword\">$this</span>-&gt;bootingCallbacks);</span><br><span class=\"line\"></span><br><span class=\"line\">    array_walk(<span class=\"keyword\">$this</span>-&gt;serviceProviders, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;bootProvider($p);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;booted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;fireAppCallbacks(<span class=\"keyword\">$this</span>-&gt;bootedCallbacks);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Boot the given service provider.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Support\\ServiceProvider  $provider</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootProvider</span><span class=\"params\">(ServiceProvider $provider)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method_exists($provider, <span class=\"string\">'boot'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;call([$provider, <span class=\"string\">'boot'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>中间比较重要的是<code>kernel</code>中<code>bootstrap()</code>方法,我们具体来看看给定的几个Bootstrap class, 这几个类中<code>bootstrap()</code>方法会依次执行</p>\n<ol>\n<li><p><code>\\Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class</code>:加载并设置环境变量,设置<code>$_ENV</code>,<code>$_SERVER</code>的值,涉及到的类<code>\\Dotenv\\Dotenv</code>, <code>\\Dotenv\\Loader</code>,涉及相关的函数<code>putenv()</code>等等</p>\n</li>\n<li><p><code>\\Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::class</code>:向<code>app</code>容器里面添加<code>config</code>到<code>instance</code>中,其中<code>config</code>读取<code>config</code>目录下的<code>php</code>文件</p>\n</li>\n<li><p><code>\\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class</code>: 注册错误,异常,关闭处理函数,涉及相关的函数<code>set_error_handler()</code>,<code>set_exception_handler()</code>,<code>register_shutdown_function()</code>等等</p>\n</li>\n<li><p><code>\\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class</code>:把<code>config</code>里面的<code>app[&#39;alias&#39;]</code>设置自动加载,相关类<code>AliasLoader</code>,相关函数<code>spl_autoload_register()</code>,<code>class_alias()</code>等等</p>\n</li>\n<li><p><code>\\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class</code>:注册<code>config</code>里面<code>app[&#39;providers&#39;]</code>,这里有个<code>compileManifest</code>文件,位置在<code>bootstrap/cache/services.php</code>,第一次生成的时候需要实例化每一个<code>serviceprovide</code>来判断他们的一些属性如<code>isdefer</code>,<code>when</code>等等,而这些行为一般不会变化,因此第一次执行的时候实例化他们,并保存起来,以后就不用每次都实例化了.如果发生了变化呢?代码里面是通过比较<code>providers</code>的值是否变化,如果变化了则重新编译.这样的结果就把各个<code>serviceprovider</code>按照一些特性分组了,如果<code>eager</code>则实例化这个<code>serviceprovider</code>并调用它的<code>register()</code> 方法,如果是<code>isdefered</code>则只是把它和并到这个数组里面.</p>\n</li>\n<li><p><code>\\Illuminate\\Foundation\\Bootstrap\\BootProviders::class</code>:这一步就是把执行各个<code>serviceprovider</code>里面的<code>boot</code>方法</p>\n</li>\n</ol>\n<p><code>bootstrap()</code>之后的就是利用<code>Pipeline</code>经过中间件之后到<code>dispatchToRouter()</code><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Router*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dispatch the request to a route and return the response.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchToRoute</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// First we will find a route that matches this request. We will also set the</span></span><br><span class=\"line\">    <span class=\"comment\">// route resolver on the request so middlewares assigned to the route will</span></span><br><span class=\"line\">    <span class=\"comment\">// receive access to this route instance for checking of the parameters.</span></span><br><span class=\"line\">    $route = <span class=\"keyword\">$this</span>-&gt;findRoute($request);</span><br><span class=\"line\"></span><br><span class=\"line\">    $request-&gt;setRouteResolver(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> <span class=\"title\">use</span> <span class=\"params\">($route)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $route;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;events-&gt;dispatch(<span class=\"keyword\">new</span> Events\\RouteMatched($route, $request));</span><br><span class=\"line\"></span><br><span class=\"line\">    $response = <span class=\"keyword\">$this</span>-&gt;runRouteWithinStack($route, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prepareResponse($request, $response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Run the given route within a Stack \"onion\" instance.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Routing\\Route  $route</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runRouteWithinStack</span><span class=\"params\">(Route $route, Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $shouldSkipMiddleware = <span class=\"keyword\">$this</span>-&gt;container-&gt;bound(<span class=\"string\">'middleware.disable'</span>) &amp;&amp;</span><br><span class=\"line\">                            <span class=\"keyword\">$this</span>-&gt;container-&gt;make(<span class=\"string\">'middleware.disable'</span>) === <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    $middleware = $shouldSkipMiddleware ? [] : <span class=\"keyword\">$this</span>-&gt;gatherRouteMiddleware($route);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> Pipeline(<span class=\"keyword\">$this</span>-&gt;container))</span><br><span class=\"line\">                    -&gt;send($request)</span><br><span class=\"line\">                    -&gt;through($middleware)</span><br><span class=\"line\">                    -&gt;then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($request)</span> <span class=\"title\">use</span> <span class=\"params\">($route)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prepareResponse(</span><br><span class=\"line\">                            $request, $route-&gt;run()</span><br><span class=\"line\">                        );</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* RouteCollection */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Find the first route matching a given request.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> \\Illuminate\\Routing\\Route</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $routes = <span class=\"keyword\">$this</span>-&gt;get($request-&gt;getMethod());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// First, we will see if we can find a matching route for this current request</span></span><br><span class=\"line\">    <span class=\"comment\">// method. If we can, great, we can just return it so that it can be called</span></span><br><span class=\"line\">    <span class=\"comment\">// by the consumer. Otherwise we will check for routes with another verb.</span></span><br><span class=\"line\">    $route = <span class=\"keyword\">$this</span>-&gt;matchAgainstRoutes($routes, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (! is_null($route)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $route-&gt;bind($request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If no route was found we will now check if a matching route is specified by</span></span><br><span class=\"line\">    <span class=\"comment\">// another HTTP verb. If it is we will need to throw a MethodNotAllowed and</span></span><br><span class=\"line\">    <span class=\"comment\">// inform the user agent of which HTTP verb it should use for this route.</span></span><br><span class=\"line\">    $others = <span class=\"keyword\">$this</span>-&gt;checkForAlternateVerbs($request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count($others) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;getRouteForMethods($request, $others);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotFoundHttpException;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Determine if a route in the array matches the request.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  array  $routes</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  bool  $includingMethod</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> \\Illuminate\\Routing\\Route|null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matchAgainstRoutes</span><span class=\"params\">(array $routes, $request, $includingMethod = true)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Arr::first($routes, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($value)</span> <span class=\"title\">use</span> <span class=\"params\">($request, $includingMethod)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $value-&gt;matches($request, $includingMethod);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Route */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Determine if the route matches given request.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  bool  $includingMethod</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matches</span><span class=\"params\">(Request $request, $includingMethod = true)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;compileRoute();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;getValidators() <span class=\"keyword\">as</span> $validator) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! $includingMethod &amp;&amp; $validator <span class=\"keyword\">instanceof</span> MethodValidator) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! $validator-&gt;matches(<span class=\"keyword\">$this</span>, $request)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Run the route action and return the response.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;container = <span class=\"keyword\">$this</span>-&gt;container ?: <span class=\"keyword\">new</span> Container;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;isControllerAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;runController();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;runCallable();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (HttpResponseException $e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $e-&gt;getResponse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ControllerDispatcher */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dispatch a request to a given controller and method.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Routing\\Route  $route</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  mixed  $controller</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string  $method</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span><span class=\"params\">(Route $route, $controller, $method)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $parameters = <span class=\"keyword\">$this</span>-&gt;resolveClassMethodDependencies(</span><br><span class=\"line\">        $route-&gt;parametersWithoutNulls(), $controller, $method</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method_exists($controller, <span class=\"string\">'callAction'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $controller-&gt;callAction($method, $parameters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $controller-&gt;&#123;$method&#125;(...array_values($parameters));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出<code>dispatchToRoute</code>首先是<code>findRoute()</code>就是在<code>routeCollections</code>里面寻找第一个匹配的路由.具体的做法是编译路由会产生正则表达式,然后使用<code>validator</code>来验证这个路由是否和这个请求匹配.找到路由之后经过一组路由中间件然后执行对应到的控制器方法,最后执行这个方法返回结果.具体过程也使用了<code>ControllerDispatcher</code>类</p>\n<p>第三步:处理结束请求的回调<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* index.php */</span></span><br><span class=\"line\"></span><br><span class=\"line\">$kernel-&gt;terminate($request, $response);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Application */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Terminate the application.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">terminate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;terminatingCallbacks <span class=\"keyword\">as</span> $terminating) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;call($terminating);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"几个问题\"><a href=\"#几个问题\" class=\"headerlink\" title=\"几个问题\"></a>几个问题</h3><p>分析了整个请求从<code>index.php</code>到响应客户端的过程回答下面几个问题就很容易了:</p>\n<ol>\n<li><code>routes</code>目录下面的路由是何时加载的?</li>\n</ol>\n<p>从分析中可以看出:<code>app/Providers/RouteServiceProvider.php</code>中的<code>map()</code>方法.也就是在<code>Kernel</code>执行<code>bootstrap()</code>中对<code>ServiceProvider</code>并执行<code>boot()</code>之后,路由文件就加载进去了.</p>\n","site":{"data":{}},"excerpt":"<p>laravel有一个路由文件,那么如何通过定义的REQUEST_URI找到相应的控制器方法并执行呢?</p>","more":"<h3 id=\"一个请求从进入index-php之后到完成响应的流程\"><a href=\"#一个请求从进入index-php之后到完成响应的流程\" class=\"headerlink\" title=\"一个请求从进入index.php之后到完成响应的流程\"></a>一个请求从进入index.php之后到完成响应的流程</h3><p>第一步:自动加载,实例化Ioc容器.绑定Kernel,.具体过程在bootstrap目录里面.如下:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*\tindex.php*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| Register The Auto Loader</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">| Composer provides a convenient, automatically generated class loader for</span></span><br><span class=\"line\"><span class=\"comment\">| our application. We just need to utilize it! We'll simply require it</span></span><br><span class=\"line\"><span class=\"comment\">| into the script here so that we don't have to worry about manual</span></span><br><span class=\"line\"><span class=\"comment\">| loading any of our classes later on. It feels great to relax.</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span>.<span class=\"string\">'/../bootstrap/autoload.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| Turn On The Lights</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">| We need to illuminate PHP development, so let us turn on the lights.</span></span><br><span class=\"line\"><span class=\"comment\">| This bootstraps the framework and gets it ready for use, then it</span></span><br><span class=\"line\"><span class=\"comment\">| will load up this application so that we can run it and send</span></span><br><span class=\"line\"><span class=\"comment\">| the responses back to the browser and delight our users.</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">$app = <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span>.<span class=\"string\">'/../bootstrap/app.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Application Container*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create a new Illuminate application instance.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string|null  $basePath</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($basePath = null)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($basePath) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setBasePath($basePath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;registerBaseBindings();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;registerBaseServiceProviders();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;registerCoreContainerAliases();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Register the basic bindings into the container.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerBaseBindings</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>::setInstance(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;instance(<span class=\"string\">'app'</span>, <span class=\"keyword\">$this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;instance(Container::class, <span class=\"keyword\">$this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Register all of the base service providers.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerBaseServiceProviders</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;register(<span class=\"keyword\">new</span> EventServiceProvider(<span class=\"keyword\">$this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;register(<span class=\"keyword\">new</span> LogServiceProvider(<span class=\"keyword\">$this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;register(<span class=\"keyword\">new</span> RoutingServiceProvider(<span class=\"keyword\">$this</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Register the core class aliases in the container.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerCoreContainerAliases</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//todo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二步: 实例化Httpkernel并处理请求<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* index.php */</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| Run The Application</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">| Once we have the application, we can handle the incoming request</span></span><br><span class=\"line\"><span class=\"comment\">| through the kernel, and send the associated response back to</span></span><br><span class=\"line\"><span class=\"comment\">| the client's browser allowing them to enjoy the creative</span></span><br><span class=\"line\"><span class=\"comment\">| and wonderful application we have prepared for them.</span></span><br><span class=\"line\"><span class=\"comment\">|</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">$kernel = $app-&gt;make(Illuminate\\Contracts\\Http\\Kernel::class);</span><br><span class=\"line\"></span><br><span class=\"line\">$response = $kernel-&gt;handle(</span><br><span class=\"line\">    $request = Illuminate\\Http\\Request::capture()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* kernel */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Handle an incoming HTTP request.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> \\Illuminate\\Http\\Response</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">($request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        $request-&gt;enableHttpMethodParameterOverride();</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;sendRequestThroughRouter($request);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;reportException($e);</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;renderException($request, $e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable $e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;reportException($e = <span class=\"keyword\">new</span> FatalThrowableError($e));</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;renderException($request, $e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;app[<span class=\"string\">'events'</span>]-&gt;dispatch(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Events\\RequestHandled($request, $response)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $response;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Send the given request through the middleware / router.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> \\Illuminate\\Http\\Response</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendRequestThroughRouter</span><span class=\"params\">($request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;app-&gt;instance(<span class=\"string\">'request'</span>, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">    Facade::clearResolvedInstance(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> Pipeline(<span class=\"keyword\">$this</span>-&gt;app))</span><br><span class=\"line\">                -&gt;send($request)</span><br><span class=\"line\">                -&gt;through(<span class=\"keyword\">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class=\"keyword\">$this</span>-&gt;middleware)</span><br><span class=\"line\">                -&gt;then(<span class=\"keyword\">$this</span>-&gt;dispatchToRouter());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Bootstrap the application for HTTP requests.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (! <span class=\"keyword\">$this</span>-&gt;app-&gt;hasBeenBootstrapped()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;app-&gt;bootstrapWith(<span class=\"keyword\">$this</span>-&gt;bootstrappers());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The bootstrap classes for the application.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $bootstrappers = [</span><br><span class=\"line\">    \\Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class,</span><br><span class=\"line\">    \\Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::class,</span><br><span class=\"line\">    \\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class,</span><br><span class=\"line\">    \\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class,</span><br><span class=\"line\">    \\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class,</span><br><span class=\"line\">    \\Illuminate\\Foundation\\Bootstrap\\BootProviders::class,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Run the given array of bootstrap classes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  array  $bootstrappers</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrapWith</span><span class=\"params\">(array $bootstrappers)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;hasBeenBootstrapped = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($bootstrappers <span class=\"keyword\">as</span> $bootstrapper) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>[<span class=\"string\">'events'</span>]-&gt;fire(<span class=\"string\">'bootstrapping: '</span>.$bootstrapper, [<span class=\"keyword\">$this</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;make($bootstrapper)-&gt;bootstrap(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>[<span class=\"string\">'events'</span>]-&gt;fire(<span class=\"string\">'bootstrapped: '</span>.$bootstrapper, [<span class=\"keyword\">$this</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* BootProviders */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BootProviders</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Bootstrap the given application.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  \\Illuminate\\Contracts\\Foundation\\Application  $app</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span><span class=\"params\">(Application $app)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $app-&gt;boot();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Application */</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Boot the application's service providers.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boot</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;booted) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Once the application has booted we will also fire some \"booted\" callbacks</span></span><br><span class=\"line\">    <span class=\"comment\">// for any listeners that need to do work after this initial booting gets</span></span><br><span class=\"line\">    <span class=\"comment\">// finished. This is useful when ordering the boot-up processes we run.</span></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;fireAppCallbacks(<span class=\"keyword\">$this</span>-&gt;bootingCallbacks);</span><br><span class=\"line\"></span><br><span class=\"line\">    array_walk(<span class=\"keyword\">$this</span>-&gt;serviceProviders, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;bootProvider($p);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;booted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;fireAppCallbacks(<span class=\"keyword\">$this</span>-&gt;bootedCallbacks);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Boot the given service provider.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Support\\ServiceProvider  $provider</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootProvider</span><span class=\"params\">(ServiceProvider $provider)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method_exists($provider, <span class=\"string\">'boot'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;call([$provider, <span class=\"string\">'boot'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>中间比较重要的是<code>kernel</code>中<code>bootstrap()</code>方法,我们具体来看看给定的几个Bootstrap class, 这几个类中<code>bootstrap()</code>方法会依次执行</p>\n<ol>\n<li><p><code>\\Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class</code>:加载并设置环境变量,设置<code>$_ENV</code>,<code>$_SERVER</code>的值,涉及到的类<code>\\Dotenv\\Dotenv</code>, <code>\\Dotenv\\Loader</code>,涉及相关的函数<code>putenv()</code>等等</p>\n</li>\n<li><p><code>\\Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::class</code>:向<code>app</code>容器里面添加<code>config</code>到<code>instance</code>中,其中<code>config</code>读取<code>config</code>目录下的<code>php</code>文件</p>\n</li>\n<li><p><code>\\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class</code>: 注册错误,异常,关闭处理函数,涉及相关的函数<code>set_error_handler()</code>,<code>set_exception_handler()</code>,<code>register_shutdown_function()</code>等等</p>\n</li>\n<li><p><code>\\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class</code>:把<code>config</code>里面的<code>app[&#39;alias&#39;]</code>设置自动加载,相关类<code>AliasLoader</code>,相关函数<code>spl_autoload_register()</code>,<code>class_alias()</code>等等</p>\n</li>\n<li><p><code>\\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class</code>:注册<code>config</code>里面<code>app[&#39;providers&#39;]</code>,这里有个<code>compileManifest</code>文件,位置在<code>bootstrap/cache/services.php</code>,第一次生成的时候需要实例化每一个<code>serviceprovide</code>来判断他们的一些属性如<code>isdefer</code>,<code>when</code>等等,而这些行为一般不会变化,因此第一次执行的时候实例化他们,并保存起来,以后就不用每次都实例化了.如果发生了变化呢?代码里面是通过比较<code>providers</code>的值是否变化,如果变化了则重新编译.这样的结果就把各个<code>serviceprovider</code>按照一些特性分组了,如果<code>eager</code>则实例化这个<code>serviceprovider</code>并调用它的<code>register()</code> 方法,如果是<code>isdefered</code>则只是把它和并到这个数组里面.</p>\n</li>\n<li><p><code>\\Illuminate\\Foundation\\Bootstrap\\BootProviders::class</code>:这一步就是把执行各个<code>serviceprovider</code>里面的<code>boot</code>方法</p>\n</li>\n</ol>\n<p><code>bootstrap()</code>之后的就是利用<code>Pipeline</code>经过中间件之后到<code>dispatchToRouter()</code><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Router*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dispatch the request to a route and return the response.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchToRoute</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// First we will find a route that matches this request. We will also set the</span></span><br><span class=\"line\">    <span class=\"comment\">// route resolver on the request so middlewares assigned to the route will</span></span><br><span class=\"line\">    <span class=\"comment\">// receive access to this route instance for checking of the parameters.</span></span><br><span class=\"line\">    $route = <span class=\"keyword\">$this</span>-&gt;findRoute($request);</span><br><span class=\"line\"></span><br><span class=\"line\">    $request-&gt;setRouteResolver(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> <span class=\"title\">use</span> <span class=\"params\">($route)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $route;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;events-&gt;dispatch(<span class=\"keyword\">new</span> Events\\RouteMatched($route, $request));</span><br><span class=\"line\"></span><br><span class=\"line\">    $response = <span class=\"keyword\">$this</span>-&gt;runRouteWithinStack($route, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prepareResponse($request, $response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Run the given route within a Stack \"onion\" instance.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Routing\\Route  $route</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runRouteWithinStack</span><span class=\"params\">(Route $route, Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $shouldSkipMiddleware = <span class=\"keyword\">$this</span>-&gt;container-&gt;bound(<span class=\"string\">'middleware.disable'</span>) &amp;&amp;</span><br><span class=\"line\">                            <span class=\"keyword\">$this</span>-&gt;container-&gt;make(<span class=\"string\">'middleware.disable'</span>) === <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    $middleware = $shouldSkipMiddleware ? [] : <span class=\"keyword\">$this</span>-&gt;gatherRouteMiddleware($route);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> Pipeline(<span class=\"keyword\">$this</span>-&gt;container))</span><br><span class=\"line\">                    -&gt;send($request)</span><br><span class=\"line\">                    -&gt;through($middleware)</span><br><span class=\"line\">                    -&gt;then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($request)</span> <span class=\"title\">use</span> <span class=\"params\">($route)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;prepareResponse(</span><br><span class=\"line\">                            $request, $route-&gt;run()</span><br><span class=\"line\">                        );</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* RouteCollection */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Find the first route matching a given request.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> \\Illuminate\\Routing\\Route</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span><span class=\"params\">(Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $routes = <span class=\"keyword\">$this</span>-&gt;get($request-&gt;getMethod());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// First, we will see if we can find a matching route for this current request</span></span><br><span class=\"line\">    <span class=\"comment\">// method. If we can, great, we can just return it so that it can be called</span></span><br><span class=\"line\">    <span class=\"comment\">// by the consumer. Otherwise we will check for routes with another verb.</span></span><br><span class=\"line\">    $route = <span class=\"keyword\">$this</span>-&gt;matchAgainstRoutes($routes, $request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (! is_null($route)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $route-&gt;bind($request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If no route was found we will now check if a matching route is specified by</span></span><br><span class=\"line\">    <span class=\"comment\">// another HTTP verb. If it is we will need to throw a MethodNotAllowed and</span></span><br><span class=\"line\">    <span class=\"comment\">// inform the user agent of which HTTP verb it should use for this route.</span></span><br><span class=\"line\">    $others = <span class=\"keyword\">$this</span>-&gt;checkForAlternateVerbs($request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count($others) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;getRouteForMethods($request, $others);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotFoundHttpException;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Determine if a route in the array matches the request.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  array  $routes</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  bool  $includingMethod</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> \\Illuminate\\Routing\\Route|null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matchAgainstRoutes</span><span class=\"params\">(array $routes, $request, $includingMethod = true)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Arr::first($routes, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($value)</span> <span class=\"title\">use</span> <span class=\"params\">($request, $includingMethod)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $value-&gt;matches($request, $includingMethod);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Route */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Determine if the route matches given request.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Http\\Request  $request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  bool  $includingMethod</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matches</span><span class=\"params\">(Request $request, $includingMethod = true)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;compileRoute();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;getValidators() <span class=\"keyword\">as</span> $validator) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! $includingMethod &amp;&amp; $validator <span class=\"keyword\">instanceof</span> MethodValidator) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! $validator-&gt;matches(<span class=\"keyword\">$this</span>, $request)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Run the route action and return the response.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;container = <span class=\"keyword\">$this</span>-&gt;container ?: <span class=\"keyword\">new</span> Container;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;isControllerAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;runController();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;runCallable();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (HttpResponseException $e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $e-&gt;getResponse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ControllerDispatcher */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dispatch a request to a given controller and method.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  \\Illuminate\\Routing\\Route  $route</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  mixed  $controller</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string  $method</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span><span class=\"params\">(Route $route, $controller, $method)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $parameters = <span class=\"keyword\">$this</span>-&gt;resolveClassMethodDependencies(</span><br><span class=\"line\">        $route-&gt;parametersWithoutNulls(), $controller, $method</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method_exists($controller, <span class=\"string\">'callAction'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $controller-&gt;callAction($method, $parameters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $controller-&gt;&#123;$method&#125;(...array_values($parameters));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出<code>dispatchToRoute</code>首先是<code>findRoute()</code>就是在<code>routeCollections</code>里面寻找第一个匹配的路由.具体的做法是编译路由会产生正则表达式,然后使用<code>validator</code>来验证这个路由是否和这个请求匹配.找到路由之后经过一组路由中间件然后执行对应到的控制器方法,最后执行这个方法返回结果.具体过程也使用了<code>ControllerDispatcher</code>类</p>\n<p>第三步:处理结束请求的回调<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* index.php */</span></span><br><span class=\"line\"></span><br><span class=\"line\">$kernel-&gt;terminate($request, $response);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Application */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Terminate the application.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">terminate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;terminatingCallbacks <span class=\"keyword\">as</span> $terminating) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;call($terminating);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"几个问题\"><a href=\"#几个问题\" class=\"headerlink\" title=\"几个问题\"></a>几个问题</h3><p>分析了整个请求从<code>index.php</code>到响应客户端的过程回答下面几个问题就很容易了:</p>\n<ol>\n<li><code>routes</code>目录下面的路由是何时加载的?</li>\n</ol>\n<p>从分析中可以看出:<code>app/Providers/RouteServiceProvider.php</code>中的<code>map()</code>方法.也就是在<code>Kernel</code>执行<code>bootstrap()</code>中对<code>ServiceProvider</code>并执行<code>boot()</code>之后,路由文件就加载进去了.</p>"},{"title":"php扩展","date":"2019-01-11T01:21:17.000Z","_content":"\n分析`php`执行流程,然后实现一个php扩展\n\n<!-- more -->\n\n### php执行流程分析--`cli`为例\n\n`php-src`目录中的`sapi`目录下面提供了`php`的多种执行方式,以`cli`来看`php`执行流程.\n\n为了简便起见,先不用分析不同平台条件编译和线程安全的代码.\n```c\n#ifdef PHP_CLI_WIN32_NO_CONSOLE\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)\n#else\nint main(int argc, char *argv[])\n#endif\n{\n#if defined(PHP_WIN32)\n# ifdef PHP_CLI_WIN32_NO_CONSOLE\n\tint argc = __argc;\n\tchar **argv = __argv;\n# else\n\tint num_args;\n\twchar_t **argv_wide;\n\tchar **argv_save = argv;\n\tBOOL using_wide_argv = 0;\n# endif\n#endif\n\n\tint c;\n\tint exit_status = SUCCESS;\n\tint module_started = 0, sapi_started = 0;\n\tchar *php_optarg = NULL;\n\tint php_optind = 1, use_extended_info = 0;\n\tchar *ini_path_override = NULL;\n\tchar *ini_entries = NULL;\n\tint ini_entries_len = 0;\n\tint ini_ignore = 0;\n\tsapi_module_struct *sapi_module = &cli_sapi_module;\n\n\t/*\n\t * Do not move this initialization. It needs to happen before argv is used\n\t * in any way.\n\t */\n\targv = save_ps_args(argc, argv);\n\n\tcli_sapi_module.additional_functions = additional_functions;\n\n#if defined(PHP_WIN32) && defined(_DEBUG) && defined(PHP_WIN32_DEBUG_HEAP)\n\t{\n\t\tint tmp_flag;\n\t\t_CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);\n\t\t_CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDERR);\n\t\t_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);\n\t\t_CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDERR);\n\t\t_CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE);\n\t\t_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);\n\t\ttmp_flag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);\n\t\ttmp_flag |= _CRTDBG_DELAY_FREE_MEM_DF;\n\t\ttmp_flag |= _CRTDBG_LEAK_CHECK_DF;\n\n\t\t_CrtSetDbgFlag(tmp_flag);\n\t}\n#endif\n\n#ifdef HAVE_SIGNAL_H\n#if defined(SIGPIPE) && defined(SIG_IGN)\n\tsignal(SIGPIPE, SIG_IGN); /* ignore SIGPIPE in standalone mode so\n\t\t\t\t\t\t\t\tthat sockets created via fsockopen()\n\t\t\t\t\t\t\t\tdon't kill PHP if the remote site\n\t\t\t\t\t\t\t\tcloses it.  in apache|apxs mode apache\n\t\t\t\t\t\t\t\tdoes that for us!  thies@thieso.net\n\t\t\t\t\t\t\t\t20000419 */\n#endif\n#endif\n\n\n#ifdef ZTS\n\ttsrm_startup(1, 1, 0, NULL);\n\t(void)ts_resource(0);\n\tZEND_TSRMLS_CACHE_UPDATE();\n#endif\n\n\tzend_signal_startup();\n\n#ifdef PHP_WIN32\n\t_fmode = _O_BINARY;\t\t\t/*sets default for file streams to binary */\n\tsetmode(_fileno(stdin), O_BINARY);\t\t/* make the stdio mode be binary */\n\tsetmode(_fileno(stdout), O_BINARY);\t\t/* make the stdio mode be binary */\n\tsetmode(_fileno(stderr), O_BINARY);\t\t/* make the stdio mode be binary */\n#endif\n\n\twhile ((c = php_getopt(argc, argv, OPTIONS, &php_optarg, &php_optind, 0, 2))!=-1) {\n\t\tswitch (c) {\n\t\t\tcase 'c':\n\t\t\t\tif (ini_path_override) {\n\t\t\t\t\tfree(ini_path_override);\n\t\t\t\t}\n \t\t\t\tini_path_override = strdup(php_optarg);\n\t\t\t\tbreak;\n\t\t\tcase 'n':\n\t\t\t\tini_ignore = 1;\n\t\t\t\tbreak;\n\t\t\tcase 'd': {\n\t\t\t\t/* define ini entries on command line */\n\t\t\t\tint len = (int)strlen(php_optarg);\n\t\t\t\tchar *val;\n\n\t\t\t\tif ((val = strchr(php_optarg, '='))) {\n\t\t\t\t\tval++;\n\t\t\t\t\tif (!isalnum(*val) && *val != '\"' && *val != '\\'' && *val != '\\0') {\n\t\t\t\t\t\tini_entries = realloc(ini_entries, ini_entries_len + len + sizeof(\"\\\"\\\"\\n\\0\"));\n\t\t\t\t\t\tmemcpy(ini_entries + ini_entries_len, php_optarg, (val - php_optarg));\n\t\t\t\t\t\tini_entries_len += (int)(val - php_optarg);\n\t\t\t\t\t\tmemcpy(ini_entries + ini_entries_len, \"\\\"\", 1);\n\t\t\t\t\t\tini_entries_len++;\n\t\t\t\t\t\tmemcpy(ini_entries + ini_entries_len, val, len - (val - php_optarg));\n\t\t\t\t\t\tini_entries_len += len - (int)(val - php_optarg);\n\t\t\t\t\t\tmemcpy(ini_entries + ini_entries_len, \"\\\"\\n\\0\", sizeof(\"\\\"\\n\\0\"));\n\t\t\t\t\t\tini_entries_len += sizeof(\"\\n\\0\\\"\") - 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tini_entries = realloc(ini_entries, ini_entries_len + len + sizeof(\"\\n\\0\"));\n\t\t\t\t\t\tmemcpy(ini_entries + ini_entries_len, php_optarg, len);\n\t\t\t\t\t\tmemcpy(ini_entries + ini_entries_len + len, \"\\n\\0\", sizeof(\"\\n\\0\"));\n\t\t\t\t\t\tini_entries_len += len + sizeof(\"\\n\\0\") - 2;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tini_entries = realloc(ini_entries, ini_entries_len + len + sizeof(\"=1\\n\\0\"));\n\t\t\t\t\tmemcpy(ini_entries + ini_entries_len, php_optarg, len);\n\t\t\t\t\tmemcpy(ini_entries + ini_entries_len + len, \"=1\\n\\0\", sizeof(\"=1\\n\\0\"));\n\t\t\t\t\tini_entries_len += len + sizeof(\"=1\\n\\0\") - 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n#ifndef PHP_CLI_WIN32_NO_CONSOLE\n\t\t\tcase 'S':\n\t\t\t\tsapi_module = &cli_server_sapi_module;\n\t\t\t\tcli_server_sapi_module.additional_functions = server_additional_functions;\n\t\t\t\tbreak;\n#endif\n\t\t\tcase 'h': /* help & quit */\n\t\t\tcase '?':\n\t\t\t\tphp_cli_usage(argv[0]);\n\t\t\t\tgoto out;\n\t\t\tcase 'i': case 'v': case 'm':\n\t\t\t\tsapi_module = &cli_sapi_module;\n\t\t\t\tgoto exit_loop;\n\t\t\tcase 'e': /* enable extended info output */\n\t\t\t\tuse_extended_info = 1;\n\t\t\t\tbreak;\n\t\t}\n\t}\nexit_loop:\n\n\tsapi_module->ini_defaults = sapi_cli_ini_defaults;\n\tsapi_module->php_ini_path_override = ini_path_override;\n\tsapi_module->phpinfo_as_text = 1;\n\tsapi_module->php_ini_ignore_cwd = 1;\n\tsapi_startup(sapi_module);\n\tsapi_started = 1;\n\n\tsapi_module->php_ini_ignore = ini_ignore;\n\n\tsapi_module->executable_location = argv[0];\n\n\tif (sapi_module == &cli_sapi_module) {\n\t\tif (ini_entries) {\n\t\t\tini_entries = realloc(ini_entries, ini_entries_len + sizeof(HARDCODED_INI));\n\t\t\tmemmove(ini_entries + sizeof(HARDCODED_INI) - 2, ini_entries, ini_entries_len + 1);\n\t\t\tmemcpy(ini_entries, HARDCODED_INI, sizeof(HARDCODED_INI) - 2);\n\t\t} else {\n\t\t\tini_entries = malloc(sizeof(HARDCODED_INI));\n\t\t\tmemcpy(ini_entries, HARDCODED_INI, sizeof(HARDCODED_INI));\n\t\t}\n\t\tini_entries_len += sizeof(HARDCODED_INI) - 2;\n\t}\n\n\tsapi_module->ini_entries = ini_entries;\n\n\t/* startup after we get the above ini override se we get things right */\n\tif (sapi_module->startup(sapi_module) == FAILURE) {\n\t\t/* there is no way to see if we must call zend_ini_deactivate()\n\t\t * since we cannot check if EG(ini_directives) has been initialised\n\t\t * because the executor's constructor does not set initialize it.\n\t\t * Apart from that there seems no need for zend_ini_deactivate() yet.\n\t\t * So we goto out_err.*/\n\t\texit_status = 1;\n\t\tgoto out;\n\t}\n\tmodule_started = 1;\n\n#if defined(PHP_WIN32) && !defined(PHP_CLI_WIN32_NO_CONSOLE)\n\tphp_win32_cp_cli_setup();\n\torig_cp = (php_win32_cp_get_orig())->id;\n\t/* Ignore the delivered argv and argc, read from W API. This place\n\t\tmight be too late though, but this is the earliest place ATW\n\t\twe can access the internal charset information from PHP. */\n\targv_wide = CommandLineToArgvW(GetCommandLineW(), &num_args);\n\tPHP_WIN32_CP_W_TO_ANY_ARRAY(argv_wide, num_args, argv, argc)\n\tusing_wide_argv = 1;\n\n\tSetConsoleCtrlHandler(php_cli_win32_ctrl_handler, TRUE);\n#endif\n\n\t/* -e option */\n\tif (use_extended_info) {\n\t\tCG(compiler_options) |= ZEND_COMPILE_EXTENDED_INFO;\n\t}\n\n\tzend_first_try {\n#ifndef PHP_CLI_WIN32_NO_CONSOLE\n\t\tif (sapi_module == &cli_sapi_module) {\n#endif\n\t\t\texit_status = do_cli(argc, argv);\n#ifndef PHP_CLI_WIN32_NO_CONSOLE\n\t\t} else {\n\t\t\texit_status = do_cli_server(argc, argv);\n\t\t}\n#endif\n\t} zend_end_try();\nout:\n\tif (ini_path_override) {\n\t\tfree(ini_path_override);\n\t}\n\tif (ini_entries) {\n\t\tfree(ini_entries);\n\t}\n\tif (module_started) {\n\t\tphp_module_shutdown();\n\t}\n\tif (sapi_started) {\n\t\tsapi_shutdown();\n\t}\n#ifdef ZTS\n\ttsrm_shutdown();\n#endif\n\n#if defined(PHP_WIN32) && !defined(PHP_CLI_WIN32_NO_CONSOLE)\n\t(void)php_win32_cp_cli_restore();\n\n\tif (using_wide_argv) {\n\t\tPHP_WIN32_CP_FREE_ARRAY(argv, argc);\n\t\tLocalFree(argv_wide);\n\t}\n\targv = argv_save;\n#endif\n\t/*\n\t * Do not move this de-initialization. It needs to happen right before\n\t * exiting.\n\t */\n\tcleanup_ps_args(argv);\n\texit(exit_status);\n}\n/* }}} */\n\n```\n\n- `sapi_module_struct`:\n\n`sapi_module_struct`类似于一个接口,所有的启动方式中,都需要实现这个结构体的内容.\n\n```c\nstruct _sapi_module_struct {\n\tchar *name;\n\tchar *pretty_name;\n\n\tint (*startup)(struct _sapi_module_struct *sapi_module);\n\tint (*shutdown)(struct _sapi_module_struct *sapi_module);\n\n\tint (*activate)(void);\n\tint (*deactivate)(void);\n\n\tsize_t (*ub_write)(const char *str, size_t str_length);\n\tvoid (*flush)(void *server_context);\n\tzend_stat_t *(*get_stat)(void);\n\tchar *(*getenv)(char *name, size_t name_len);\n\n\tvoid (*sapi_error)(int type, const char *error_msg, ...) ZEND_ATTRIBUTE_FORMAT(printf, 2, 3);\n\n\tint (*header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers);\n\tint (*send_headers)(sapi_headers_struct *sapi_headers);\n\tvoid (*send_header)(sapi_header_struct *sapi_header, void *server_context);\n\n\tsize_t (*read_post)(char *buffer, size_t count_bytes);\n\tchar *(*read_cookies)(void);\n\n\tvoid (*register_server_variables)(zval *track_vars_array);\n\tvoid (*log_message)(char *message, int syslog_type_int);\n\tdouble (*get_request_time)(void);\n\tvoid (*terminate_process)(void);\n\n\tchar *php_ini_path_override;\n\n\tvoid (*default_post_reader)(void);\n\tvoid (*treat_data)(int arg, char *str, zval *destArray);\n\tchar *executable_location;\n\n\tint php_ini_ignore;\n\tint php_ini_ignore_cwd; /* don't look for php.ini in the current directory */\n\n\tint (*get_fd)(int *fd);\n\n\tint (*force_http_10)(void);\n\n\tint (*get_target_uid)(uid_t *);\n\tint (*get_target_gid)(gid_t *);\n\n\tunsigned int (*input_filter)(int arg, char *var, char **val, size_t val_len, size_t *new_val_len);\n\n\tvoid (*ini_defaults)(HashTable *configuration_hash);\n\tint phpinfo_as_text;\n\n\tchar *ini_entries;\n\tconst zend_function_entry *additional_functions;\n\tunsigned int (*input_filter_init)(void);\n};\n\n\nstatic sapi_module_struct cli_sapi_module = {\n\t\"cli\",\t\t\t\t\t\t\t/* name */\n\t\"Command Line Interface\",    \t/* pretty name */\n\n\tphp_cli_startup,\t\t\t\t/* startup */\n\tphp_module_shutdown_wrapper,\t/* shutdown */\n\n\tNULL,\t\t\t\t\t\t\t/* activate */\n\tsapi_cli_deactivate,\t\t\t/* deactivate */\n\n\tsapi_cli_ub_write,\t\t    \t/* unbuffered write */\n\tsapi_cli_flush,\t\t\t\t    /* flush */\n\tNULL,\t\t\t\t\t\t\t/* get uid */\n\tNULL,\t\t\t\t\t\t\t/* getenv */\n\n\tphp_error,\t\t\t\t\t\t/* error handler */\n\n\tsapi_cli_header_handler,\t\t/* header handler */\n\tsapi_cli_send_headers,\t\t\t/* send headers handler */\n\tsapi_cli_send_header,\t\t\t/* send header handler */\n\n\tNULL,\t\t\t\t            /* read POST data */\n\tsapi_cli_read_cookies,          /* read Cookies */\n\n\tsapi_cli_register_variables,\t/* register server variables */\n\tsapi_cli_log_message,\t\t\t/* Log message */\n\tNULL,\t\t\t\t\t\t\t/* Get request time */\n\tNULL,\t\t\t\t\t\t\t/* Child terminate */\n\n\tSTANDARD_SAPI_MODULE_PROPERTIES\n};\n\n#define STANDARD_SAPI_MODULE_PROPERTIES \\\n\tNULL, /* php_ini_path_override   */ \\\n\tNULL, /* default_post_reader     */ \\\n\tNULL, /* treat_data              */ \\\n\tNULL, /* executable_location     */ \\\n\t0,    /* php_ini_ignore          */ \\\n\t0,    /* php_ini_ignore_cwd      */ \\\n\tNULL, /* get_fd                  */ \\\n\tNULL, /* force_http_10           */ \\\n\tNULL, /* get_target_uid          */ \\\n\tNULL, /* get_target_gid          */ \\\n\tNULL, /* input_filter            */ \\\n\tNULL, /* ini_defaults            */ \\\n\t0,    /* phpinfo_as_text;        */ \\\n\tNULL, /* ini_entries;            */ \\\n\tNULL, /* additional_functions    */ \\\n\tNULL  /* input_filter_init       */\n\n#endif /* SAPI_H */\n\n/* }}} */\n\n```\n\n- `zend_module_entry`\n\n```c\nstruct _zend_module_entry {\n\tunsigned short size;\n\tunsigned int zend_api;\n\tunsigned char zend_debug;\n\tunsigned char zts;\n\tconst struct _zend_ini_entry *ini_entry;\n\tconst struct _zend_module_dep *deps;\n\tconst char *name;\n\tconst struct _zend_function_entry *functions;\n\tint (*module_startup_func)(INIT_FUNC_ARGS);\n\tint (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);\n\tint (*request_startup_func)(INIT_FUNC_ARGS);\n\tint (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);\n\tvoid (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS);\n\tconst char *version;\n\tsize_t globals_size;\n#ifdef ZTS\n\tts_rsrc_id* globals_id_ptr;\n#else\n\tvoid* globals_ptr;\n#endif\n\tvoid (*globals_ctor)(void *global);\n\tvoid (*globals_dtor)(void *global);\n\tint (*post_deactivate_func)(void);\n\tint module_started;\n\tunsigned char type;\n\tvoid *handle;\n\tint module_number;\n\tconst char *build_id;\n};\n\ntypedef struct _zend_ini_entry_def {\n\tconst char *name;\n\tZEND_INI_MH((*on_modify));\n\tvoid *mh_arg1;\n\tvoid *mh_arg2;\n\tvoid *mh_arg3;\n\tconst char *value;\n\tvoid (*displayer)(zend_ini_entry *ini_entry, int type);\n\tint modifiable;\n\n\tuint name_length;\n\tuint value_length;\n} zend_ini_entry_def;\n\nstruct _zend_ini_entry {\n\tzend_string *name;\n\tZEND_INI_MH((*on_modify));\n\tvoid *mh_arg1;\n\tvoid *mh_arg2;\n\tvoid *mh_arg3;\n\tzend_string *value;\n\tzend_string *orig_value;\n\tvoid (*displayer)(zend_ini_entry *ini_entry, int type);\n\tint modifiable;\n\n\tint orig_modifiable;\n\tint modified;\n\tint module_number;\n};\n```\n- 首先是定义了一些变量(28-37)\n\n- `sapi_startup()`:`sapi_started = 1`\n\n\n\n\n\n- `sapi_module->startup()` :`module_started = 1`\n\n- `do_cli()`\n\n- `php_module_shutdown()`\n\n- `sapi_shutdown()`\n\n\n### php扩展试验\n\n- 进入源码的`ext`目录,试试help,会有提示.\n\n```\nsawyer@thinkpad:/usr/local/src/php-7.1.20/ext$ ./ext_skel --extname=mytest\nCreating directory mytest\nCreating basic files: config.m4 config.w32 .gitignore mytest.c php_mytest.h CREDITS EXPERIMENTAL tests/001.phpt mytest.php [done].\n\nTo use your new extension, you will have to execute the following steps:\n\n1.  $ cd ..\n2.  $ vi ext/mytest/config.m4\n3.  $ ./buildconf\n4.  $ ./configure --[with|enable]-mytest\n5.  $ make\n6.  $ ./sapi/cli/php -f ext/mytest/mytest.php\n7.  $ vi ext/mytest/mytest.c\n8.  $ make\n\nRepeat steps 3-6 until you are satisfied with ext/mytest/config.m4 and\nstep 6 confirms that your module is compiled into PHP. Then, start writing\ncode and repeat the last two steps as often as necessary.\n\n```\n    1. 略过\n    2. 需要修改`config.m4`,里面写了,不修改是没有效果的.这里解释了`enable`和`with`的区别.去掉`with`前面的`dnl`.\n```\ndnl If your extension references something external, use with:\n\ndnl PHP_ARG_WITH(mytest, for mytest support,\ndnl Make sure that the comment is aligned:\ndnl [  --with-mytest             Include mytest support])\n\ndnl Otherwise use enable:\n\ndnl PHP_ARG_ENABLE(mytest, whether to enable mytest support,\ndnl Make sure that the comment is aligned:\ndnl [  --enable-mytest           Enable mytest support])\n\n```\n    3. 给了一个提示.所以加了`--force`\n```\nYou should not run buildconf in a release package.\nuse buildconf --force to override this check.\n``` \n    4. 成功提示 `Thank you for using PHP` \n    5. make的时候放弃了...然后可以直接用安装`php`扩展的方式进行安装\n        - cd mytest\n        - phpize\n        - ./configure --with-php-config=/usr/bin/php7/bin/php-config\n        - sudo make && sudo make install\n        - 修改`php.ini`发现有了这个`php`扩展\n    6. 开始写代码了...\n    7. 补充:第五步放弃的,是静态编译扩展到php里面.这个与使用`with`和`enable`没有必然的关系\n","source":"_posts/php扩展.md","raw":"---\ntitle: php扩展\ndate: 2019-01-11 09:21:17\ntags:\n- php\n- php扩展\n- php实现\ncategories:\n- 源码分析\n---\n\n分析`php`执行流程,然后实现一个php扩展\n\n<!-- more -->\n\n### php执行流程分析--`cli`为例\n\n`php-src`目录中的`sapi`目录下面提供了`php`的多种执行方式,以`cli`来看`php`执行流程.\n\n为了简便起见,先不用分析不同平台条件编译和线程安全的代码.\n```c\n#ifdef PHP_CLI_WIN32_NO_CONSOLE\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)\n#else\nint main(int argc, char *argv[])\n#endif\n{\n#if defined(PHP_WIN32)\n# ifdef PHP_CLI_WIN32_NO_CONSOLE\n\tint argc = __argc;\n\tchar **argv = __argv;\n# else\n\tint num_args;\n\twchar_t **argv_wide;\n\tchar **argv_save = argv;\n\tBOOL using_wide_argv = 0;\n# endif\n#endif\n\n\tint c;\n\tint exit_status = SUCCESS;\n\tint module_started = 0, sapi_started = 0;\n\tchar *php_optarg = NULL;\n\tint php_optind = 1, use_extended_info = 0;\n\tchar *ini_path_override = NULL;\n\tchar *ini_entries = NULL;\n\tint ini_entries_len = 0;\n\tint ini_ignore = 0;\n\tsapi_module_struct *sapi_module = &cli_sapi_module;\n\n\t/*\n\t * Do not move this initialization. It needs to happen before argv is used\n\t * in any way.\n\t */\n\targv = save_ps_args(argc, argv);\n\n\tcli_sapi_module.additional_functions = additional_functions;\n\n#if defined(PHP_WIN32) && defined(_DEBUG) && defined(PHP_WIN32_DEBUG_HEAP)\n\t{\n\t\tint tmp_flag;\n\t\t_CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);\n\t\t_CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDERR);\n\t\t_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);\n\t\t_CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDERR);\n\t\t_CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE);\n\t\t_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);\n\t\ttmp_flag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);\n\t\ttmp_flag |= _CRTDBG_DELAY_FREE_MEM_DF;\n\t\ttmp_flag |= _CRTDBG_LEAK_CHECK_DF;\n\n\t\t_CrtSetDbgFlag(tmp_flag);\n\t}\n#endif\n\n#ifdef HAVE_SIGNAL_H\n#if defined(SIGPIPE) && defined(SIG_IGN)\n\tsignal(SIGPIPE, SIG_IGN); /* ignore SIGPIPE in standalone mode so\n\t\t\t\t\t\t\t\tthat sockets created via fsockopen()\n\t\t\t\t\t\t\t\tdon't kill PHP if the remote site\n\t\t\t\t\t\t\t\tcloses it.  in apache|apxs mode apache\n\t\t\t\t\t\t\t\tdoes that for us!  thies@thieso.net\n\t\t\t\t\t\t\t\t20000419 */\n#endif\n#endif\n\n\n#ifdef ZTS\n\ttsrm_startup(1, 1, 0, NULL);\n\t(void)ts_resource(0);\n\tZEND_TSRMLS_CACHE_UPDATE();\n#endif\n\n\tzend_signal_startup();\n\n#ifdef PHP_WIN32\n\t_fmode = _O_BINARY;\t\t\t/*sets default for file streams to binary */\n\tsetmode(_fileno(stdin), O_BINARY);\t\t/* make the stdio mode be binary */\n\tsetmode(_fileno(stdout), O_BINARY);\t\t/* make the stdio mode be binary */\n\tsetmode(_fileno(stderr), O_BINARY);\t\t/* make the stdio mode be binary */\n#endif\n\n\twhile ((c = php_getopt(argc, argv, OPTIONS, &php_optarg, &php_optind, 0, 2))!=-1) {\n\t\tswitch (c) {\n\t\t\tcase 'c':\n\t\t\t\tif (ini_path_override) {\n\t\t\t\t\tfree(ini_path_override);\n\t\t\t\t}\n \t\t\t\tini_path_override = strdup(php_optarg);\n\t\t\t\tbreak;\n\t\t\tcase 'n':\n\t\t\t\tini_ignore = 1;\n\t\t\t\tbreak;\n\t\t\tcase 'd': {\n\t\t\t\t/* define ini entries on command line */\n\t\t\t\tint len = (int)strlen(php_optarg);\n\t\t\t\tchar *val;\n\n\t\t\t\tif ((val = strchr(php_optarg, '='))) {\n\t\t\t\t\tval++;\n\t\t\t\t\tif (!isalnum(*val) && *val != '\"' && *val != '\\'' && *val != '\\0') {\n\t\t\t\t\t\tini_entries = realloc(ini_entries, ini_entries_len + len + sizeof(\"\\\"\\\"\\n\\0\"));\n\t\t\t\t\t\tmemcpy(ini_entries + ini_entries_len, php_optarg, (val - php_optarg));\n\t\t\t\t\t\tini_entries_len += (int)(val - php_optarg);\n\t\t\t\t\t\tmemcpy(ini_entries + ini_entries_len, \"\\\"\", 1);\n\t\t\t\t\t\tini_entries_len++;\n\t\t\t\t\t\tmemcpy(ini_entries + ini_entries_len, val, len - (val - php_optarg));\n\t\t\t\t\t\tini_entries_len += len - (int)(val - php_optarg);\n\t\t\t\t\t\tmemcpy(ini_entries + ini_entries_len, \"\\\"\\n\\0\", sizeof(\"\\\"\\n\\0\"));\n\t\t\t\t\t\tini_entries_len += sizeof(\"\\n\\0\\\"\") - 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tini_entries = realloc(ini_entries, ini_entries_len + len + sizeof(\"\\n\\0\"));\n\t\t\t\t\t\tmemcpy(ini_entries + ini_entries_len, php_optarg, len);\n\t\t\t\t\t\tmemcpy(ini_entries + ini_entries_len + len, \"\\n\\0\", sizeof(\"\\n\\0\"));\n\t\t\t\t\t\tini_entries_len += len + sizeof(\"\\n\\0\") - 2;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tini_entries = realloc(ini_entries, ini_entries_len + len + sizeof(\"=1\\n\\0\"));\n\t\t\t\t\tmemcpy(ini_entries + ini_entries_len, php_optarg, len);\n\t\t\t\t\tmemcpy(ini_entries + ini_entries_len + len, \"=1\\n\\0\", sizeof(\"=1\\n\\0\"));\n\t\t\t\t\tini_entries_len += len + sizeof(\"=1\\n\\0\") - 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n#ifndef PHP_CLI_WIN32_NO_CONSOLE\n\t\t\tcase 'S':\n\t\t\t\tsapi_module = &cli_server_sapi_module;\n\t\t\t\tcli_server_sapi_module.additional_functions = server_additional_functions;\n\t\t\t\tbreak;\n#endif\n\t\t\tcase 'h': /* help & quit */\n\t\t\tcase '?':\n\t\t\t\tphp_cli_usage(argv[0]);\n\t\t\t\tgoto out;\n\t\t\tcase 'i': case 'v': case 'm':\n\t\t\t\tsapi_module = &cli_sapi_module;\n\t\t\t\tgoto exit_loop;\n\t\t\tcase 'e': /* enable extended info output */\n\t\t\t\tuse_extended_info = 1;\n\t\t\t\tbreak;\n\t\t}\n\t}\nexit_loop:\n\n\tsapi_module->ini_defaults = sapi_cli_ini_defaults;\n\tsapi_module->php_ini_path_override = ini_path_override;\n\tsapi_module->phpinfo_as_text = 1;\n\tsapi_module->php_ini_ignore_cwd = 1;\n\tsapi_startup(sapi_module);\n\tsapi_started = 1;\n\n\tsapi_module->php_ini_ignore = ini_ignore;\n\n\tsapi_module->executable_location = argv[0];\n\n\tif (sapi_module == &cli_sapi_module) {\n\t\tif (ini_entries) {\n\t\t\tini_entries = realloc(ini_entries, ini_entries_len + sizeof(HARDCODED_INI));\n\t\t\tmemmove(ini_entries + sizeof(HARDCODED_INI) - 2, ini_entries, ini_entries_len + 1);\n\t\t\tmemcpy(ini_entries, HARDCODED_INI, sizeof(HARDCODED_INI) - 2);\n\t\t} else {\n\t\t\tini_entries = malloc(sizeof(HARDCODED_INI));\n\t\t\tmemcpy(ini_entries, HARDCODED_INI, sizeof(HARDCODED_INI));\n\t\t}\n\t\tini_entries_len += sizeof(HARDCODED_INI) - 2;\n\t}\n\n\tsapi_module->ini_entries = ini_entries;\n\n\t/* startup after we get the above ini override se we get things right */\n\tif (sapi_module->startup(sapi_module) == FAILURE) {\n\t\t/* there is no way to see if we must call zend_ini_deactivate()\n\t\t * since we cannot check if EG(ini_directives) has been initialised\n\t\t * because the executor's constructor does not set initialize it.\n\t\t * Apart from that there seems no need for zend_ini_deactivate() yet.\n\t\t * So we goto out_err.*/\n\t\texit_status = 1;\n\t\tgoto out;\n\t}\n\tmodule_started = 1;\n\n#if defined(PHP_WIN32) && !defined(PHP_CLI_WIN32_NO_CONSOLE)\n\tphp_win32_cp_cli_setup();\n\torig_cp = (php_win32_cp_get_orig())->id;\n\t/* Ignore the delivered argv and argc, read from W API. This place\n\t\tmight be too late though, but this is the earliest place ATW\n\t\twe can access the internal charset information from PHP. */\n\targv_wide = CommandLineToArgvW(GetCommandLineW(), &num_args);\n\tPHP_WIN32_CP_W_TO_ANY_ARRAY(argv_wide, num_args, argv, argc)\n\tusing_wide_argv = 1;\n\n\tSetConsoleCtrlHandler(php_cli_win32_ctrl_handler, TRUE);\n#endif\n\n\t/* -e option */\n\tif (use_extended_info) {\n\t\tCG(compiler_options) |= ZEND_COMPILE_EXTENDED_INFO;\n\t}\n\n\tzend_first_try {\n#ifndef PHP_CLI_WIN32_NO_CONSOLE\n\t\tif (sapi_module == &cli_sapi_module) {\n#endif\n\t\t\texit_status = do_cli(argc, argv);\n#ifndef PHP_CLI_WIN32_NO_CONSOLE\n\t\t} else {\n\t\t\texit_status = do_cli_server(argc, argv);\n\t\t}\n#endif\n\t} zend_end_try();\nout:\n\tif (ini_path_override) {\n\t\tfree(ini_path_override);\n\t}\n\tif (ini_entries) {\n\t\tfree(ini_entries);\n\t}\n\tif (module_started) {\n\t\tphp_module_shutdown();\n\t}\n\tif (sapi_started) {\n\t\tsapi_shutdown();\n\t}\n#ifdef ZTS\n\ttsrm_shutdown();\n#endif\n\n#if defined(PHP_WIN32) && !defined(PHP_CLI_WIN32_NO_CONSOLE)\n\t(void)php_win32_cp_cli_restore();\n\n\tif (using_wide_argv) {\n\t\tPHP_WIN32_CP_FREE_ARRAY(argv, argc);\n\t\tLocalFree(argv_wide);\n\t}\n\targv = argv_save;\n#endif\n\t/*\n\t * Do not move this de-initialization. It needs to happen right before\n\t * exiting.\n\t */\n\tcleanup_ps_args(argv);\n\texit(exit_status);\n}\n/* }}} */\n\n```\n\n- `sapi_module_struct`:\n\n`sapi_module_struct`类似于一个接口,所有的启动方式中,都需要实现这个结构体的内容.\n\n```c\nstruct _sapi_module_struct {\n\tchar *name;\n\tchar *pretty_name;\n\n\tint (*startup)(struct _sapi_module_struct *sapi_module);\n\tint (*shutdown)(struct _sapi_module_struct *sapi_module);\n\n\tint (*activate)(void);\n\tint (*deactivate)(void);\n\n\tsize_t (*ub_write)(const char *str, size_t str_length);\n\tvoid (*flush)(void *server_context);\n\tzend_stat_t *(*get_stat)(void);\n\tchar *(*getenv)(char *name, size_t name_len);\n\n\tvoid (*sapi_error)(int type, const char *error_msg, ...) ZEND_ATTRIBUTE_FORMAT(printf, 2, 3);\n\n\tint (*header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers);\n\tint (*send_headers)(sapi_headers_struct *sapi_headers);\n\tvoid (*send_header)(sapi_header_struct *sapi_header, void *server_context);\n\n\tsize_t (*read_post)(char *buffer, size_t count_bytes);\n\tchar *(*read_cookies)(void);\n\n\tvoid (*register_server_variables)(zval *track_vars_array);\n\tvoid (*log_message)(char *message, int syslog_type_int);\n\tdouble (*get_request_time)(void);\n\tvoid (*terminate_process)(void);\n\n\tchar *php_ini_path_override;\n\n\tvoid (*default_post_reader)(void);\n\tvoid (*treat_data)(int arg, char *str, zval *destArray);\n\tchar *executable_location;\n\n\tint php_ini_ignore;\n\tint php_ini_ignore_cwd; /* don't look for php.ini in the current directory */\n\n\tint (*get_fd)(int *fd);\n\n\tint (*force_http_10)(void);\n\n\tint (*get_target_uid)(uid_t *);\n\tint (*get_target_gid)(gid_t *);\n\n\tunsigned int (*input_filter)(int arg, char *var, char **val, size_t val_len, size_t *new_val_len);\n\n\tvoid (*ini_defaults)(HashTable *configuration_hash);\n\tint phpinfo_as_text;\n\n\tchar *ini_entries;\n\tconst zend_function_entry *additional_functions;\n\tunsigned int (*input_filter_init)(void);\n};\n\n\nstatic sapi_module_struct cli_sapi_module = {\n\t\"cli\",\t\t\t\t\t\t\t/* name */\n\t\"Command Line Interface\",    \t/* pretty name */\n\n\tphp_cli_startup,\t\t\t\t/* startup */\n\tphp_module_shutdown_wrapper,\t/* shutdown */\n\n\tNULL,\t\t\t\t\t\t\t/* activate */\n\tsapi_cli_deactivate,\t\t\t/* deactivate */\n\n\tsapi_cli_ub_write,\t\t    \t/* unbuffered write */\n\tsapi_cli_flush,\t\t\t\t    /* flush */\n\tNULL,\t\t\t\t\t\t\t/* get uid */\n\tNULL,\t\t\t\t\t\t\t/* getenv */\n\n\tphp_error,\t\t\t\t\t\t/* error handler */\n\n\tsapi_cli_header_handler,\t\t/* header handler */\n\tsapi_cli_send_headers,\t\t\t/* send headers handler */\n\tsapi_cli_send_header,\t\t\t/* send header handler */\n\n\tNULL,\t\t\t\t            /* read POST data */\n\tsapi_cli_read_cookies,          /* read Cookies */\n\n\tsapi_cli_register_variables,\t/* register server variables */\n\tsapi_cli_log_message,\t\t\t/* Log message */\n\tNULL,\t\t\t\t\t\t\t/* Get request time */\n\tNULL,\t\t\t\t\t\t\t/* Child terminate */\n\n\tSTANDARD_SAPI_MODULE_PROPERTIES\n};\n\n#define STANDARD_SAPI_MODULE_PROPERTIES \\\n\tNULL, /* php_ini_path_override   */ \\\n\tNULL, /* default_post_reader     */ \\\n\tNULL, /* treat_data              */ \\\n\tNULL, /* executable_location     */ \\\n\t0,    /* php_ini_ignore          */ \\\n\t0,    /* php_ini_ignore_cwd      */ \\\n\tNULL, /* get_fd                  */ \\\n\tNULL, /* force_http_10           */ \\\n\tNULL, /* get_target_uid          */ \\\n\tNULL, /* get_target_gid          */ \\\n\tNULL, /* input_filter            */ \\\n\tNULL, /* ini_defaults            */ \\\n\t0,    /* phpinfo_as_text;        */ \\\n\tNULL, /* ini_entries;            */ \\\n\tNULL, /* additional_functions    */ \\\n\tNULL  /* input_filter_init       */\n\n#endif /* SAPI_H */\n\n/* }}} */\n\n```\n\n- `zend_module_entry`\n\n```c\nstruct _zend_module_entry {\n\tunsigned short size;\n\tunsigned int zend_api;\n\tunsigned char zend_debug;\n\tunsigned char zts;\n\tconst struct _zend_ini_entry *ini_entry;\n\tconst struct _zend_module_dep *deps;\n\tconst char *name;\n\tconst struct _zend_function_entry *functions;\n\tint (*module_startup_func)(INIT_FUNC_ARGS);\n\tint (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);\n\tint (*request_startup_func)(INIT_FUNC_ARGS);\n\tint (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);\n\tvoid (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS);\n\tconst char *version;\n\tsize_t globals_size;\n#ifdef ZTS\n\tts_rsrc_id* globals_id_ptr;\n#else\n\tvoid* globals_ptr;\n#endif\n\tvoid (*globals_ctor)(void *global);\n\tvoid (*globals_dtor)(void *global);\n\tint (*post_deactivate_func)(void);\n\tint module_started;\n\tunsigned char type;\n\tvoid *handle;\n\tint module_number;\n\tconst char *build_id;\n};\n\ntypedef struct _zend_ini_entry_def {\n\tconst char *name;\n\tZEND_INI_MH((*on_modify));\n\tvoid *mh_arg1;\n\tvoid *mh_arg2;\n\tvoid *mh_arg3;\n\tconst char *value;\n\tvoid (*displayer)(zend_ini_entry *ini_entry, int type);\n\tint modifiable;\n\n\tuint name_length;\n\tuint value_length;\n} zend_ini_entry_def;\n\nstruct _zend_ini_entry {\n\tzend_string *name;\n\tZEND_INI_MH((*on_modify));\n\tvoid *mh_arg1;\n\tvoid *mh_arg2;\n\tvoid *mh_arg3;\n\tzend_string *value;\n\tzend_string *orig_value;\n\tvoid (*displayer)(zend_ini_entry *ini_entry, int type);\n\tint modifiable;\n\n\tint orig_modifiable;\n\tint modified;\n\tint module_number;\n};\n```\n- 首先是定义了一些变量(28-37)\n\n- `sapi_startup()`:`sapi_started = 1`\n\n\n\n\n\n- `sapi_module->startup()` :`module_started = 1`\n\n- `do_cli()`\n\n- `php_module_shutdown()`\n\n- `sapi_shutdown()`\n\n\n### php扩展试验\n\n- 进入源码的`ext`目录,试试help,会有提示.\n\n```\nsawyer@thinkpad:/usr/local/src/php-7.1.20/ext$ ./ext_skel --extname=mytest\nCreating directory mytest\nCreating basic files: config.m4 config.w32 .gitignore mytest.c php_mytest.h CREDITS EXPERIMENTAL tests/001.phpt mytest.php [done].\n\nTo use your new extension, you will have to execute the following steps:\n\n1.  $ cd ..\n2.  $ vi ext/mytest/config.m4\n3.  $ ./buildconf\n4.  $ ./configure --[with|enable]-mytest\n5.  $ make\n6.  $ ./sapi/cli/php -f ext/mytest/mytest.php\n7.  $ vi ext/mytest/mytest.c\n8.  $ make\n\nRepeat steps 3-6 until you are satisfied with ext/mytest/config.m4 and\nstep 6 confirms that your module is compiled into PHP. Then, start writing\ncode and repeat the last two steps as often as necessary.\n\n```\n    1. 略过\n    2. 需要修改`config.m4`,里面写了,不修改是没有效果的.这里解释了`enable`和`with`的区别.去掉`with`前面的`dnl`.\n```\ndnl If your extension references something external, use with:\n\ndnl PHP_ARG_WITH(mytest, for mytest support,\ndnl Make sure that the comment is aligned:\ndnl [  --with-mytest             Include mytest support])\n\ndnl Otherwise use enable:\n\ndnl PHP_ARG_ENABLE(mytest, whether to enable mytest support,\ndnl Make sure that the comment is aligned:\ndnl [  --enable-mytest           Enable mytest support])\n\n```\n    3. 给了一个提示.所以加了`--force`\n```\nYou should not run buildconf in a release package.\nuse buildconf --force to override this check.\n``` \n    4. 成功提示 `Thank you for using PHP` \n    5. make的时候放弃了...然后可以直接用安装`php`扩展的方式进行安装\n        - cd mytest\n        - phpize\n        - ./configure --with-php-config=/usr/bin/php7/bin/php-config\n        - sudo make && sudo make install\n        - 修改`php.ini`发现有了这个`php`扩展\n    6. 开始写代码了...\n    7. 补充:第五步放弃的,是静态编译扩展到php里面.这个与使用`with`和`enable`没有必然的关系\n","slug":"php扩展","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhgr002zzbovmy328sl2","content":"<p>分析<code>php</code>执行流程,然后实现一个php扩展</p>\n<a id=\"more\"></a>\n<h3 id=\"php执行流程分析–cli为例\"><a href=\"#php执行流程分析–cli为例\" class=\"headerlink\" title=\"php执行流程分析–cli为例\"></a>php执行流程分析–<code>cli</code>为例</h3><p><code>php-src</code>目录中的<code>sapi</code>目录下面提供了<code>php</code>的多种执行方式,以<code>cli</code>来看<code>php</code>执行流程.</p>\n<p>为了简便起见,先不用分析不同平台条件编译和线程安全的代码.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> PHP_CLI_WIN32_NO_CONSOLE</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> WINAPI <span class=\"title\">WinMain</span><span class=\"params\">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class=\"keyword\">int</span> nShowCmd)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(PHP_WIN32)</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">ifdef</span> PHP_CLI_WIN32_NO_CONSOLE</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> argc = __argc;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> **argv = __argv;</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num_args;</span><br><span class=\"line\">\t<span class=\"keyword\">wchar_t</span> **argv_wide;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> **argv_save = argv;</span><br><span class=\"line\">\tBOOL using_wide_argv = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> exit_status = SUCCESS;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> module_started = <span class=\"number\">0</span>, sapi_started = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *php_optarg = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> php_optind = <span class=\"number\">1</span>, use_extended_info = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *ini_path_override = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *ini_entries = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ini_entries_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ini_ignore = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsapi_module_struct *sapi_module = &amp;cli_sapi_module;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Do not move this initialization. It needs to happen before argv is used</span></span><br><span class=\"line\"><span class=\"comment\">\t * in any way.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\targv = save_ps_args(argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcli_sapi_module.additional_functions = additional_functions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(PHP_WIN32) &amp;&amp; defined(_DEBUG) &amp;&amp; defined(PHP_WIN32_DEBUG_HEAP)</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> tmp_flag;</span><br><span class=\"line\">\t\t_CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);</span><br><span class=\"line\">\t\t_CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDERR);</span><br><span class=\"line\">\t\t_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);</span><br><span class=\"line\">\t\t_CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDERR);</span><br><span class=\"line\">\t\t_CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE);</span><br><span class=\"line\">\t\t_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);</span><br><span class=\"line\">\t\ttmp_flag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);</span><br><span class=\"line\">\t\ttmp_flag |= _CRTDBG_DELAY_FREE_MEM_DF;</span><br><span class=\"line\">\t\ttmp_flag |= _CRTDBG_LEAK_CHECK_DF;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_CrtSetDbgFlag(tmp_flag);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_SIGNAL_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(SIGPIPE) &amp;&amp; defined(SIG_IGN)</span></span><br><span class=\"line\">\tsignal(SIGPIPE, SIG_IGN); <span class=\"comment\">/* ignore SIGPIPE in standalone mode so</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tthat sockets created via fsockopen()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tdon't kill PHP if the remote site</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tcloses it.  in apache|apxs mode apache</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tdoes that for us!  thies@thieso.net</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t20000419 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> ZTS</span></span><br><span class=\"line\">\ttsrm_startup(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t(<span class=\"keyword\">void</span>)ts_resource(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tZEND_TSRMLS_CACHE_UPDATE();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\tzend_signal_startup();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> PHP_WIN32</span></span><br><span class=\"line\">\t_fmode = _O_BINARY;\t\t\t<span class=\"comment\">/*sets default for file streams to binary */</span></span><br><span class=\"line\">\tsetmode(_fileno(<span class=\"built_in\">stdin</span>), O_BINARY);\t\t<span class=\"comment\">/* make the stdio mode be binary */</span></span><br><span class=\"line\">\tsetmode(_fileno(<span class=\"built_in\">stdout</span>), O_BINARY);\t\t<span class=\"comment\">/* make the stdio mode be binary */</span></span><br><span class=\"line\">\tsetmode(_fileno(<span class=\"built_in\">stderr</span>), O_BINARY);\t\t<span class=\"comment\">/* make the stdio mode be binary */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((c = php_getopt(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, <span class=\"number\">0</span>, <span class=\"number\">2</span>))!=<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'c'</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (ini_path_override) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">free</span>(ini_path_override);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"> \t\t\t\tini_path_override = strdup(php_optarg);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'n'</span>:</span><br><span class=\"line\">\t\t\t\tini_ignore = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'d'</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/* define ini entries on command line */</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> len = (<span class=\"keyword\">int</span>)<span class=\"built_in\">strlen</span>(php_optarg);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">char</span> *val;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((val = <span class=\"built_in\">strchr</span>(php_optarg, <span class=\"string\">'='</span>))) &#123;</span><br><span class=\"line\">\t\t\t\t\tval++;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">isalnum</span>(*val) &amp;&amp; *val != <span class=\"string\">'\"'</span> &amp;&amp; *val != <span class=\"string\">'\\''</span> &amp;&amp; *val != <span class=\"string\">'\\0'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tini_entries = <span class=\"built_in\">realloc</span>(ini_entries, ini_entries_len + len + <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"\\\"\\\"\\n\\0\"</span>));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len, php_optarg, (val - php_optarg));</span><br><span class=\"line\">\t\t\t\t\t\tini_entries_len += (<span class=\"keyword\">int</span>)(val - php_optarg);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len, <span class=\"string\">\"\\\"\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t\tini_entries_len++;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len, val, len - (val - php_optarg));</span><br><span class=\"line\">\t\t\t\t\t\tini_entries_len += len - (<span class=\"keyword\">int</span>)(val - php_optarg);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len, <span class=\"string\">\"\\\"\\n\\0\"</span>, <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"\\\"\\n\\0\"</span>));</span><br><span class=\"line\">\t\t\t\t\t\tini_entries_len += <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"\\n\\0\\\"\"</span>) - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tini_entries = <span class=\"built_in\">realloc</span>(ini_entries, ini_entries_len + len + <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"\\n\\0\"</span>));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len, php_optarg, len);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len + len, <span class=\"string\">\"\\n\\0\"</span>, <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"\\n\\0\"</span>));</span><br><span class=\"line\">\t\t\t\t\t\tini_entries_len += len + <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"\\n\\0\"</span>) - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tini_entries = <span class=\"built_in\">realloc</span>(ini_entries, ini_entries_len + len + <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"=1\\n\\0\"</span>));</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len, php_optarg, len);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len + len, <span class=\"string\">\"=1\\n\\0\"</span>, <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"=1\\n\\0\"</span>));</span><br><span class=\"line\">\t\t\t\t\tini_entries_len += len + <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"=1\\n\\0\"</span>) - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> PHP_CLI_WIN32_NO_CONSOLE</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'S'</span>:</span><br><span class=\"line\">\t\t\t\tsapi_module = &amp;cli_server_sapi_module;</span><br><span class=\"line\">\t\t\t\tcli_server_sapi_module.additional_functions = server_additional_functions;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'h'</span>: <span class=\"comment\">/* help &amp; quit */</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'?'</span>:</span><br><span class=\"line\">\t\t\t\tphp_cli_usage(argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'i'</span>: <span class=\"keyword\">case</span> <span class=\"string\">'v'</span>: <span class=\"keyword\">case</span> <span class=\"string\">'m'</span>:</span><br><span class=\"line\">\t\t\t\tsapi_module = &amp;cli_sapi_module;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> exit_loop;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'e'</span>: <span class=\"comment\">/* enable extended info output */</span></span><br><span class=\"line\">\t\t\t\tuse_extended_info = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">exit_loop:</span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_module-&gt;ini_defaults = sapi_cli_ini_defaults;</span><br><span class=\"line\">\tsapi_module-&gt;php_ini_path_override = ini_path_override;</span><br><span class=\"line\">\tsapi_module-&gt;phpinfo_as_text = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tsapi_module-&gt;php_ini_ignore_cwd = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tsapi_startup(sapi_module);</span><br><span class=\"line\">\tsapi_started = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_module-&gt;php_ini_ignore = ini_ignore;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_module-&gt;executable_location = argv[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sapi_module == &amp;cli_sapi_module) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ini_entries) &#123;</span><br><span class=\"line\">\t\t\tini_entries = <span class=\"built_in\">realloc</span>(ini_entries, ini_entries_len + <span class=\"keyword\">sizeof</span>(HARDCODED_INI));</span><br><span class=\"line\">\t\t\tmemmove(ini_entries + <span class=\"keyword\">sizeof</span>(HARDCODED_INI) - <span class=\"number\">2</span>, ini_entries, ini_entries_len + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries, HARDCODED_INI, <span class=\"keyword\">sizeof</span>(HARDCODED_INI) - <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tini_entries = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(HARDCODED_INI));</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries, HARDCODED_INI, <span class=\"keyword\">sizeof</span>(HARDCODED_INI));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tini_entries_len += <span class=\"keyword\">sizeof</span>(HARDCODED_INI) - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_module-&gt;ini_entries = ini_entries;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* startup after we get the above ini override se we get things right */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sapi_module-&gt;startup(sapi_module) == FAILURE) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* there is no way to see if we must call zend_ini_deactivate()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * since we cannot check if EG(ini_directives) has been initialised</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * because the executor's constructor does not set initialize it.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * Apart from that there seems no need for zend_ini_deactivate() yet.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * So we goto out_err.*/</span></span><br><span class=\"line\">\t\texit_status = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmodule_started = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(PHP_WIN32) &amp;&amp; !defined(PHP_CLI_WIN32_NO_CONSOLE)</span></span><br><span class=\"line\">\tphp_win32_cp_cli_setup();</span><br><span class=\"line\">\torig_cp = (php_win32_cp_get_orig())-&gt;id;</span><br><span class=\"line\">\t<span class=\"comment\">/* Ignore the delivered argv and argc, read from W API. This place</span></span><br><span class=\"line\"><span class=\"comment\">\t\tmight be too late though, but this is the earliest place ATW</span></span><br><span class=\"line\"><span class=\"comment\">\t\twe can access the internal charset information from PHP. */</span></span><br><span class=\"line\">\targv_wide = CommandLineToArgvW(GetCommandLineW(), &amp;num_args);</span><br><span class=\"line\">\tPHP_WIN32_CP_W_TO_ANY_ARRAY(argv_wide, num_args, argv, argc)</span><br><span class=\"line\">\tusing_wide_argv = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSetConsoleCtrlHandler(php_cli_win32_ctrl_handler, TRUE);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* -e option */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (use_extended_info) &#123;</span><br><span class=\"line\">\t\tCG(compiler_options) |= ZEND_COMPILE_EXTENDED_INFO;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tzend_first_try &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> PHP_CLI_WIN32_NO_CONSOLE</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sapi_module == &amp;cli_sapi_module) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t\t\texit_status = do_cli(argc, argv);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> PHP_CLI_WIN32_NO_CONSOLE</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\texit_status = do_cli_server(argc, argv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t&#125; zend_end_try();</span><br><span class=\"line\">out:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ini_path_override) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(ini_path_override);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ini_entries) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(ini_entries);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (module_started) &#123;</span><br><span class=\"line\">\t\tphp_module_shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sapi_started) &#123;</span><br><span class=\"line\">\t\tsapi_shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> ZTS</span></span><br><span class=\"line\">\ttsrm_shutdown();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(PHP_WIN32) &amp;&amp; !defined(PHP_CLI_WIN32_NO_CONSOLE)</span></span><br><span class=\"line\">\t(<span class=\"keyword\">void</span>)php_win32_cp_cli_restore();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (using_wide_argv) &#123;</span><br><span class=\"line\">\t\tPHP_WIN32_CP_FREE_ARRAY(argv, argc);</span><br><span class=\"line\">\t\tLocalFree(argv_wide);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\targv = argv_save;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Do not move this de-initialization. It needs to happen right before</span></span><br><span class=\"line\"><span class=\"comment\">\t * exiting.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tcleanup_ps_args(argv);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(exit_status);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>sapi_module_struct</code>:</li>\n</ul>\n<p><code>sapi_module_struct</code>类似于一个接口,所有的启动方式中,都需要实现这个结构体的内容.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">sapi_module_struct</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *pretty_name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*startup)(struct _sapi_module_struct *sapi_module);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*shutdown)(struct _sapi_module_struct *sapi_module);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*activate)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*deactivate)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> (*ub_write)(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str, <span class=\"keyword\">size_t</span> str_length);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*flush)(<span class=\"keyword\">void</span> *server_context);</span><br><span class=\"line\">\t<span class=\"keyword\">zend_stat_t</span> *(*get_stat)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *(*getenv)(<span class=\"keyword\">char</span> *name, <span class=\"keyword\">size_t</span> name_len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*sapi_error)(<span class=\"keyword\">int</span> type, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *error_msg, ...) ZEND_ATTRIBUTE_FORMAT(<span class=\"built_in\">printf</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*send_headers)(sapi_headers_struct *sapi_headers);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*send_header)(sapi_header_struct *sapi_header, <span class=\"keyword\">void</span> *server_context);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> (*read_post)(<span class=\"keyword\">char</span> *buffer, <span class=\"keyword\">size_t</span> count_bytes);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *(*read_cookies)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*register_server_variables)(zval *track_vars_array);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*log_message)(<span class=\"keyword\">char</span> *message, <span class=\"keyword\">int</span> syslog_type_int);</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> (*get_request_time)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*terminate_process)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *php_ini_path_override;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*default_post_reader)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*treat_data)(<span class=\"keyword\">int</span> arg, <span class=\"keyword\">char</span> *str, zval *destArray);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *executable_location;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> php_ini_ignore;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> php_ini_ignore_cwd; <span class=\"comment\">/* don't look for php.ini in the current directory */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*get_fd)(<span class=\"keyword\">int</span> *fd);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*force_http_10)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*get_target_uid)(<span class=\"keyword\">uid_t</span> *);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*get_target_gid)(<span class=\"keyword\">gid_t</span> *);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">int</span> <span class=\"params\">(*input_filter)</span><span class=\"params\">(<span class=\"keyword\">int</span> arg, <span class=\"keyword\">char</span> *var, <span class=\"keyword\">char</span> **val, <span class=\"keyword\">size_t</span> val_len, <span class=\"keyword\">size_t</span> *new_val_len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*ini_defaults)(HashTable *configuration_hash);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> phpinfo_as_text;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *ini_entries;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> zend_function_entry *additional_functions;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">int</span> <span class=\"params\">(*input_filter_init)</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> sapi_module_struct cli_sapi_module = &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"cli\"</span>,\t\t\t\t\t\t\t<span class=\"comment\">/* name */</span></span><br><span class=\"line\">\t<span class=\"string\">\"Command Line Interface\"</span>,    \t<span class=\"comment\">/* pretty name */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tphp_cli_startup,\t\t\t\t<span class=\"comment\">/* startup */</span></span><br><span class=\"line\">\tphp_module_shutdown_wrapper,\t<span class=\"comment\">/* shutdown */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,\t\t\t\t\t\t\t<span class=\"comment\">/* activate */</span></span><br><span class=\"line\">\tsapi_cli_deactivate,\t\t\t<span class=\"comment\">/* deactivate */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_cli_ub_write,\t\t    \t<span class=\"comment\">/* unbuffered write */</span></span><br><span class=\"line\">\tsapi_cli_flush,\t\t\t\t    <span class=\"comment\">/* flush */</span></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,\t\t\t\t\t\t\t<span class=\"comment\">/* get uid */</span></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,\t\t\t\t\t\t\t<span class=\"comment\">/* getenv */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tphp_error,\t\t\t\t\t\t<span class=\"comment\">/* error handler */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_cli_header_handler,\t\t<span class=\"comment\">/* header handler */</span></span><br><span class=\"line\">\tsapi_cli_send_headers,\t\t\t<span class=\"comment\">/* send headers handler */</span></span><br><span class=\"line\">\tsapi_cli_send_header,\t\t\t<span class=\"comment\">/* send header handler */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,\t\t\t\t            <span class=\"comment\">/* read POST data */</span></span><br><span class=\"line\">\tsapi_cli_read_cookies,          <span class=\"comment\">/* read Cookies */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_cli_register_variables,\t<span class=\"comment\">/* register server variables */</span></span><br><span class=\"line\">\tsapi_cli_log_message,\t\t\t<span class=\"comment\">/* Log message */</span></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,\t\t\t\t\t\t\t<span class=\"comment\">/* Get request time */</span></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,\t\t\t\t\t\t\t<span class=\"comment\">/* Child terminate */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tSTANDARD_SAPI_MODULE_PROPERTIES</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STANDARD_SAPI_MODULE_PROPERTIES \\</span></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* php_ini_path_override   */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* default_post_reader     */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* treat_data              */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* executable_location     */</span> \\</span><br><span class=\"line\">\t<span class=\"number\">0</span>,    <span class=\"comment\">/* php_ini_ignore          */</span> \\</span><br><span class=\"line\">\t<span class=\"number\">0</span>,    <span class=\"comment\">/* php_ini_ignore_cwd      */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* get_fd                  */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* force_http_10           */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* get_target_uid          */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* get_target_gid          */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* input_filter            */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* ini_defaults            */</span> \\</span><br><span class=\"line\">\t<span class=\"number\">0</span>,    <span class=\"comment\">/* phpinfo_as_text;        */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* ini_entries;            */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* additional_functions    */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>  <span class=\"comment\">/* input_filter_init       */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* SAPI_H */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>zend_module_entry</code></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_module_entry</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> size;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> zend_api;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> zend_debug;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> zts;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_ini_entry</span> *<span class=\"title\">ini_entry</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_module_dep</span> *<span class=\"title\">deps</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_function_entry</span> *<span class=\"title\">functions</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*module_startup_func)(INIT_FUNC_ARGS);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*request_startup_func)(INIT_FUNC_ARGS);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *version;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> globals_size;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> ZTS</span></span><br><span class=\"line\">\tts_rsrc_id* globals_id_ptr;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* globals_ptr;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*globals_ctor)(<span class=\"keyword\">void</span> *global);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*globals_dtor)(<span class=\"keyword\">void</span> *global);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*post_deactivate_func)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> module_started;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> type;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *handle;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> module_number;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *build_id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_ini_entry_def</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">\tZEND_INI_MH((*on_modify));</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *mh_arg1;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *mh_arg2;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *mh_arg3;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *value;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*displayer)(zend_ini_entry *ini_entry, <span class=\"keyword\">int</span> type);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> modifiable;</span><br><span class=\"line\"></span><br><span class=\"line\">\tuint name_length;</span><br><span class=\"line\">\tuint value_length;</span><br><span class=\"line\">&#125; zend_ini_entry_def;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_ini_entry</span> &#123;</span></span><br><span class=\"line\">\tzend_string *name;</span><br><span class=\"line\">\tZEND_INI_MH((*on_modify));</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *mh_arg1;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *mh_arg2;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *mh_arg3;</span><br><span class=\"line\">\tzend_string *value;</span><br><span class=\"line\">\tzend_string *orig_value;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*displayer)(zend_ini_entry *ini_entry, <span class=\"keyword\">int</span> type);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> modifiable;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> orig_modifiable;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> modified;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> module_number;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>首先是定义了一些变量(28-37)</p>\n</li>\n<li><p><code>sapi_startup()</code>:<code>sapi_started = 1</code></p>\n</li>\n</ul>\n<ul>\n<li><p><code>sapi_module-&gt;startup()</code> :<code>module_started = 1</code></p>\n</li>\n<li><p><code>do_cli()</code></p>\n</li>\n<li><p><code>php_module_shutdown()</code></p>\n</li>\n<li><p><code>sapi_shutdown()</code></p>\n</li>\n</ul>\n<h3 id=\"php扩展试验\"><a href=\"#php扩展试验\" class=\"headerlink\" title=\"php扩展试验\"></a>php扩展试验</h3><ul>\n<li>进入源码的<code>ext</code>目录,试试help,会有提示.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sawyer@thinkpad:/usr/local/src/php-7.1.20/ext$ ./ext_skel --extname=mytest</span><br><span class=\"line\">Creating directory mytest</span><br><span class=\"line\">Creating basic files: config.m4 config.w32 .gitignore mytest.c php_mytest.h CREDITS EXPERIMENTAL tests/001.phpt mytest.php [done].</span><br><span class=\"line\"></span><br><span class=\"line\">To use your new extension, you will have to execute the following steps:</span><br><span class=\"line\"></span><br><span class=\"line\">1.  $ cd ..</span><br><span class=\"line\">2.  $ vi ext/mytest/config.m4</span><br><span class=\"line\">3.  $ ./buildconf</span><br><span class=\"line\">4.  $ ./configure --[with|enable]-mytest</span><br><span class=\"line\">5.  $ make</span><br><span class=\"line\">6.  $ ./sapi/cli/php -f ext/mytest/mytest.php</span><br><span class=\"line\">7.  $ vi ext/mytest/mytest.c</span><br><span class=\"line\">8.  $ make</span><br><span class=\"line\"></span><br><span class=\"line\">Repeat steps 3-6 until you are satisfied with ext/mytest/config.m4 and</span><br><span class=\"line\">step 6 confirms that your module is compiled into PHP. Then, start writing</span><br><span class=\"line\">code and repeat the last two steps as often as necessary.</span><br></pre></td></tr></table></figure>\n<pre><code>1. 略过\n2. 需要修改`config.m4`,里面写了,不修改是没有效果的.这里解释了`enable`和`with`的区别.去掉`with`前面的`dnl`.\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnl If your extension references something external, use with:</span><br><span class=\"line\"></span><br><span class=\"line\">dnl PHP_ARG_WITH(mytest, for mytest support,</span><br><span class=\"line\">dnl Make sure that the comment is aligned:</span><br><span class=\"line\">dnl [  --with-mytest             Include mytest support])</span><br><span class=\"line\"></span><br><span class=\"line\">dnl Otherwise use enable:</span><br><span class=\"line\"></span><br><span class=\"line\">dnl PHP_ARG_ENABLE(mytest, whether to enable mytest support,</span><br><span class=\"line\">dnl Make sure that the comment is aligned:</span><br><span class=\"line\">dnl [  --enable-mytest           Enable mytest support])</span><br></pre></td></tr></table></figure>\n<pre><code>3. 给了一个提示.所以加了`--force`\n</code></pre><pre><code>You should not run buildconf in a release package.\nuse buildconf --force to override this check.\n</code></pre><pre><code>4. 成功提示 `Thank you for using PHP` \n5. make的时候放弃了...然后可以直接用安装`php`扩展的方式进行安装\n    - cd mytest\n    - phpize\n    - ./configure --with-php-config=/usr/bin/php7/bin/php-config\n    - sudo make &amp;&amp; sudo make install\n    - 修改`php.ini`发现有了这个`php`扩展\n6. 开始写代码了...\n7. 补充:第五步放弃的,是静态编译扩展到php里面.这个与使用`with`和`enable`没有必然的关系\n</code></pre>","site":{"data":{}},"excerpt":"<p>分析<code>php</code>执行流程,然后实现一个php扩展</p>","more":"<h3 id=\"php执行流程分析–cli为例\"><a href=\"#php执行流程分析–cli为例\" class=\"headerlink\" title=\"php执行流程分析–cli为例\"></a>php执行流程分析–<code>cli</code>为例</h3><p><code>php-src</code>目录中的<code>sapi</code>目录下面提供了<code>php</code>的多种执行方式,以<code>cli</code>来看<code>php</code>执行流程.</p>\n<p>为了简便起见,先不用分析不同平台条件编译和线程安全的代码.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> PHP_CLI_WIN32_NO_CONSOLE</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> WINAPI <span class=\"title\">WinMain</span><span class=\"params\">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class=\"keyword\">int</span> nShowCmd)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(PHP_WIN32)</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">ifdef</span> PHP_CLI_WIN32_NO_CONSOLE</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> argc = __argc;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> **argv = __argv;</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num_args;</span><br><span class=\"line\">\t<span class=\"keyword\">wchar_t</span> **argv_wide;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> **argv_save = argv;</span><br><span class=\"line\">\tBOOL using_wide_argv = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> exit_status = SUCCESS;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> module_started = <span class=\"number\">0</span>, sapi_started = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *php_optarg = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> php_optind = <span class=\"number\">1</span>, use_extended_info = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *ini_path_override = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *ini_entries = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ini_entries_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ini_ignore = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tsapi_module_struct *sapi_module = &amp;cli_sapi_module;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Do not move this initialization. It needs to happen before argv is used</span></span><br><span class=\"line\"><span class=\"comment\">\t * in any way.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\targv = save_ps_args(argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcli_sapi_module.additional_functions = additional_functions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(PHP_WIN32) &amp;&amp; defined(_DEBUG) &amp;&amp; defined(PHP_WIN32_DEBUG_HEAP)</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> tmp_flag;</span><br><span class=\"line\">\t\t_CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);</span><br><span class=\"line\">\t\t_CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDERR);</span><br><span class=\"line\">\t\t_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);</span><br><span class=\"line\">\t\t_CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDERR);</span><br><span class=\"line\">\t\t_CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE);</span><br><span class=\"line\">\t\t_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);</span><br><span class=\"line\">\t\ttmp_flag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);</span><br><span class=\"line\">\t\ttmp_flag |= _CRTDBG_DELAY_FREE_MEM_DF;</span><br><span class=\"line\">\t\ttmp_flag |= _CRTDBG_LEAK_CHECK_DF;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_CrtSetDbgFlag(tmp_flag);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_SIGNAL_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(SIGPIPE) &amp;&amp; defined(SIG_IGN)</span></span><br><span class=\"line\">\tsignal(SIGPIPE, SIG_IGN); <span class=\"comment\">/* ignore SIGPIPE in standalone mode so</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tthat sockets created via fsockopen()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tdon't kill PHP if the remote site</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tcloses it.  in apache|apxs mode apache</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\tdoes that for us!  thies@thieso.net</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t20000419 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> ZTS</span></span><br><span class=\"line\">\ttsrm_startup(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t(<span class=\"keyword\">void</span>)ts_resource(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tZEND_TSRMLS_CACHE_UPDATE();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\tzend_signal_startup();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> PHP_WIN32</span></span><br><span class=\"line\">\t_fmode = _O_BINARY;\t\t\t<span class=\"comment\">/*sets default for file streams to binary */</span></span><br><span class=\"line\">\tsetmode(_fileno(<span class=\"built_in\">stdin</span>), O_BINARY);\t\t<span class=\"comment\">/* make the stdio mode be binary */</span></span><br><span class=\"line\">\tsetmode(_fileno(<span class=\"built_in\">stdout</span>), O_BINARY);\t\t<span class=\"comment\">/* make the stdio mode be binary */</span></span><br><span class=\"line\">\tsetmode(_fileno(<span class=\"built_in\">stderr</span>), O_BINARY);\t\t<span class=\"comment\">/* make the stdio mode be binary */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((c = php_getopt(argc, argv, OPTIONS, &amp;php_optarg, &amp;php_optind, <span class=\"number\">0</span>, <span class=\"number\">2</span>))!=<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'c'</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (ini_path_override) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">free</span>(ini_path_override);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"> \t\t\t\tini_path_override = strdup(php_optarg);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'n'</span>:</span><br><span class=\"line\">\t\t\t\tini_ignore = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'d'</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/* define ini entries on command line */</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> len = (<span class=\"keyword\">int</span>)<span class=\"built_in\">strlen</span>(php_optarg);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">char</span> *val;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((val = <span class=\"built_in\">strchr</span>(php_optarg, <span class=\"string\">'='</span>))) &#123;</span><br><span class=\"line\">\t\t\t\t\tval++;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">isalnum</span>(*val) &amp;&amp; *val != <span class=\"string\">'\"'</span> &amp;&amp; *val != <span class=\"string\">'\\''</span> &amp;&amp; *val != <span class=\"string\">'\\0'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tini_entries = <span class=\"built_in\">realloc</span>(ini_entries, ini_entries_len + len + <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"\\\"\\\"\\n\\0\"</span>));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len, php_optarg, (val - php_optarg));</span><br><span class=\"line\">\t\t\t\t\t\tini_entries_len += (<span class=\"keyword\">int</span>)(val - php_optarg);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len, <span class=\"string\">\"\\\"\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t\tini_entries_len++;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len, val, len - (val - php_optarg));</span><br><span class=\"line\">\t\t\t\t\t\tini_entries_len += len - (<span class=\"keyword\">int</span>)(val - php_optarg);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len, <span class=\"string\">\"\\\"\\n\\0\"</span>, <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"\\\"\\n\\0\"</span>));</span><br><span class=\"line\">\t\t\t\t\t\tini_entries_len += <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"\\n\\0\\\"\"</span>) - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tini_entries = <span class=\"built_in\">realloc</span>(ini_entries, ini_entries_len + len + <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"\\n\\0\"</span>));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len, php_optarg, len);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len + len, <span class=\"string\">\"\\n\\0\"</span>, <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"\\n\\0\"</span>));</span><br><span class=\"line\">\t\t\t\t\t\tini_entries_len += len + <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"\\n\\0\"</span>) - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tini_entries = <span class=\"built_in\">realloc</span>(ini_entries, ini_entries_len + len + <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"=1\\n\\0\"</span>));</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len, php_optarg, len);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries + ini_entries_len + len, <span class=\"string\">\"=1\\n\\0\"</span>, <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"=1\\n\\0\"</span>));</span><br><span class=\"line\">\t\t\t\t\tini_entries_len += len + <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"=1\\n\\0\"</span>) - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> PHP_CLI_WIN32_NO_CONSOLE</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'S'</span>:</span><br><span class=\"line\">\t\t\t\tsapi_module = &amp;cli_server_sapi_module;</span><br><span class=\"line\">\t\t\t\tcli_server_sapi_module.additional_functions = server_additional_functions;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'h'</span>: <span class=\"comment\">/* help &amp; quit */</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'?'</span>:</span><br><span class=\"line\">\t\t\t\tphp_cli_usage(argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'i'</span>: <span class=\"keyword\">case</span> <span class=\"string\">'v'</span>: <span class=\"keyword\">case</span> <span class=\"string\">'m'</span>:</span><br><span class=\"line\">\t\t\t\tsapi_module = &amp;cli_sapi_module;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> exit_loop;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'e'</span>: <span class=\"comment\">/* enable extended info output */</span></span><br><span class=\"line\">\t\t\t\tuse_extended_info = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">exit_loop:</span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_module-&gt;ini_defaults = sapi_cli_ini_defaults;</span><br><span class=\"line\">\tsapi_module-&gt;php_ini_path_override = ini_path_override;</span><br><span class=\"line\">\tsapi_module-&gt;phpinfo_as_text = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tsapi_module-&gt;php_ini_ignore_cwd = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tsapi_startup(sapi_module);</span><br><span class=\"line\">\tsapi_started = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_module-&gt;php_ini_ignore = ini_ignore;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_module-&gt;executable_location = argv[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sapi_module == &amp;cli_sapi_module) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ini_entries) &#123;</span><br><span class=\"line\">\t\t\tini_entries = <span class=\"built_in\">realloc</span>(ini_entries, ini_entries_len + <span class=\"keyword\">sizeof</span>(HARDCODED_INI));</span><br><span class=\"line\">\t\t\tmemmove(ini_entries + <span class=\"keyword\">sizeof</span>(HARDCODED_INI) - <span class=\"number\">2</span>, ini_entries, ini_entries_len + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries, HARDCODED_INI, <span class=\"keyword\">sizeof</span>(HARDCODED_INI) - <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tini_entries = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(HARDCODED_INI));</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(ini_entries, HARDCODED_INI, <span class=\"keyword\">sizeof</span>(HARDCODED_INI));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tini_entries_len += <span class=\"keyword\">sizeof</span>(HARDCODED_INI) - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_module-&gt;ini_entries = ini_entries;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* startup after we get the above ini override se we get things right */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sapi_module-&gt;startup(sapi_module) == FAILURE) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* there is no way to see if we must call zend_ini_deactivate()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * since we cannot check if EG(ini_directives) has been initialised</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * because the executor's constructor does not set initialize it.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * Apart from that there seems no need for zend_ini_deactivate() yet.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * So we goto out_err.*/</span></span><br><span class=\"line\">\t\texit_status = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmodule_started = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(PHP_WIN32) &amp;&amp; !defined(PHP_CLI_WIN32_NO_CONSOLE)</span></span><br><span class=\"line\">\tphp_win32_cp_cli_setup();</span><br><span class=\"line\">\torig_cp = (php_win32_cp_get_orig())-&gt;id;</span><br><span class=\"line\">\t<span class=\"comment\">/* Ignore the delivered argv and argc, read from W API. This place</span></span><br><span class=\"line\"><span class=\"comment\">\t\tmight be too late though, but this is the earliest place ATW</span></span><br><span class=\"line\"><span class=\"comment\">\t\twe can access the internal charset information from PHP. */</span></span><br><span class=\"line\">\targv_wide = CommandLineToArgvW(GetCommandLineW(), &amp;num_args);</span><br><span class=\"line\">\tPHP_WIN32_CP_W_TO_ANY_ARRAY(argv_wide, num_args, argv, argc)</span><br><span class=\"line\">\tusing_wide_argv = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSetConsoleCtrlHandler(php_cli_win32_ctrl_handler, TRUE);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* -e option */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (use_extended_info) &#123;</span><br><span class=\"line\">\t\tCG(compiler_options) |= ZEND_COMPILE_EXTENDED_INFO;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tzend_first_try &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> PHP_CLI_WIN32_NO_CONSOLE</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sapi_module == &amp;cli_sapi_module) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t\t\texit_status = do_cli(argc, argv);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> PHP_CLI_WIN32_NO_CONSOLE</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\texit_status = do_cli_server(argc, argv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t&#125; zend_end_try();</span><br><span class=\"line\">out:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ini_path_override) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(ini_path_override);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ini_entries) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(ini_entries);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (module_started) &#123;</span><br><span class=\"line\">\t\tphp_module_shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sapi_started) &#123;</span><br><span class=\"line\">\t\tsapi_shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> ZTS</span></span><br><span class=\"line\">\ttsrm_shutdown();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(PHP_WIN32) &amp;&amp; !defined(PHP_CLI_WIN32_NO_CONSOLE)</span></span><br><span class=\"line\">\t(<span class=\"keyword\">void</span>)php_win32_cp_cli_restore();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (using_wide_argv) &#123;</span><br><span class=\"line\">\t\tPHP_WIN32_CP_FREE_ARRAY(argv, argc);</span><br><span class=\"line\">\t\tLocalFree(argv_wide);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\targv = argv_save;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Do not move this de-initialization. It needs to happen right before</span></span><br><span class=\"line\"><span class=\"comment\">\t * exiting.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tcleanup_ps_args(argv);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(exit_status);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>sapi_module_struct</code>:</li>\n</ul>\n<p><code>sapi_module_struct</code>类似于一个接口,所有的启动方式中,都需要实现这个结构体的内容.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">sapi_module_struct</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *pretty_name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*startup)(struct _sapi_module_struct *sapi_module);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*shutdown)(struct _sapi_module_struct *sapi_module);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*activate)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*deactivate)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> (*ub_write)(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str, <span class=\"keyword\">size_t</span> str_length);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*flush)(<span class=\"keyword\">void</span> *server_context);</span><br><span class=\"line\">\t<span class=\"keyword\">zend_stat_t</span> *(*get_stat)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *(*getenv)(<span class=\"keyword\">char</span> *name, <span class=\"keyword\">size_t</span> name_len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*sapi_error)(<span class=\"keyword\">int</span> type, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *error_msg, ...) ZEND_ATTRIBUTE_FORMAT(<span class=\"built_in\">printf</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*send_headers)(sapi_headers_struct *sapi_headers);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*send_header)(sapi_header_struct *sapi_header, <span class=\"keyword\">void</span> *server_context);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> (*read_post)(<span class=\"keyword\">char</span> *buffer, <span class=\"keyword\">size_t</span> count_bytes);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *(*read_cookies)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*register_server_variables)(zval *track_vars_array);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*log_message)(<span class=\"keyword\">char</span> *message, <span class=\"keyword\">int</span> syslog_type_int);</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> (*get_request_time)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*terminate_process)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *php_ini_path_override;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*default_post_reader)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*treat_data)(<span class=\"keyword\">int</span> arg, <span class=\"keyword\">char</span> *str, zval *destArray);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *executable_location;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> php_ini_ignore;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> php_ini_ignore_cwd; <span class=\"comment\">/* don't look for php.ini in the current directory */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*get_fd)(<span class=\"keyword\">int</span> *fd);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*force_http_10)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*get_target_uid)(<span class=\"keyword\">uid_t</span> *);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*get_target_gid)(<span class=\"keyword\">gid_t</span> *);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">int</span> <span class=\"params\">(*input_filter)</span><span class=\"params\">(<span class=\"keyword\">int</span> arg, <span class=\"keyword\">char</span> *var, <span class=\"keyword\">char</span> **val, <span class=\"keyword\">size_t</span> val_len, <span class=\"keyword\">size_t</span> *new_val_len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*ini_defaults)(HashTable *configuration_hash);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> phpinfo_as_text;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *ini_entries;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> zend_function_entry *additional_functions;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">int</span> <span class=\"params\">(*input_filter_init)</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> sapi_module_struct cli_sapi_module = &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"cli\"</span>,\t\t\t\t\t\t\t<span class=\"comment\">/* name */</span></span><br><span class=\"line\">\t<span class=\"string\">\"Command Line Interface\"</span>,    \t<span class=\"comment\">/* pretty name */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tphp_cli_startup,\t\t\t\t<span class=\"comment\">/* startup */</span></span><br><span class=\"line\">\tphp_module_shutdown_wrapper,\t<span class=\"comment\">/* shutdown */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,\t\t\t\t\t\t\t<span class=\"comment\">/* activate */</span></span><br><span class=\"line\">\tsapi_cli_deactivate,\t\t\t<span class=\"comment\">/* deactivate */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_cli_ub_write,\t\t    \t<span class=\"comment\">/* unbuffered write */</span></span><br><span class=\"line\">\tsapi_cli_flush,\t\t\t\t    <span class=\"comment\">/* flush */</span></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,\t\t\t\t\t\t\t<span class=\"comment\">/* get uid */</span></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,\t\t\t\t\t\t\t<span class=\"comment\">/* getenv */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tphp_error,\t\t\t\t\t\t<span class=\"comment\">/* error handler */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_cli_header_handler,\t\t<span class=\"comment\">/* header handler */</span></span><br><span class=\"line\">\tsapi_cli_send_headers,\t\t\t<span class=\"comment\">/* send headers handler */</span></span><br><span class=\"line\">\tsapi_cli_send_header,\t\t\t<span class=\"comment\">/* send header handler */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,\t\t\t\t            <span class=\"comment\">/* read POST data */</span></span><br><span class=\"line\">\tsapi_cli_read_cookies,          <span class=\"comment\">/* read Cookies */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsapi_cli_register_variables,\t<span class=\"comment\">/* register server variables */</span></span><br><span class=\"line\">\tsapi_cli_log_message,\t\t\t<span class=\"comment\">/* Log message */</span></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,\t\t\t\t\t\t\t<span class=\"comment\">/* Get request time */</span></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,\t\t\t\t\t\t\t<span class=\"comment\">/* Child terminate */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tSTANDARD_SAPI_MODULE_PROPERTIES</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STANDARD_SAPI_MODULE_PROPERTIES \\</span></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* php_ini_path_override   */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* default_post_reader     */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* treat_data              */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* executable_location     */</span> \\</span><br><span class=\"line\">\t<span class=\"number\">0</span>,    <span class=\"comment\">/* php_ini_ignore          */</span> \\</span><br><span class=\"line\">\t<span class=\"number\">0</span>,    <span class=\"comment\">/* php_ini_ignore_cwd      */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* get_fd                  */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* force_http_10           */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* get_target_uid          */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* get_target_gid          */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* input_filter            */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* ini_defaults            */</span> \\</span><br><span class=\"line\">\t<span class=\"number\">0</span>,    <span class=\"comment\">/* phpinfo_as_text;        */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* ini_entries;            */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>, <span class=\"comment\">/* additional_functions    */</span> \\</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>  <span class=\"comment\">/* input_filter_init       */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* SAPI_H */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>zend_module_entry</code></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_module_entry</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> size;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> zend_api;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> zend_debug;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> zts;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_ini_entry</span> *<span class=\"title\">ini_entry</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_module_dep</span> *<span class=\"title\">deps</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_function_entry</span> *<span class=\"title\">functions</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*module_startup_func)(INIT_FUNC_ARGS);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*request_startup_func)(INIT_FUNC_ARGS);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *version;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> globals_size;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> ZTS</span></span><br><span class=\"line\">\tts_rsrc_id* globals_id_ptr;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* globals_ptr;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*globals_ctor)(<span class=\"keyword\">void</span> *global);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*globals_dtor)(<span class=\"keyword\">void</span> *global);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*post_deactivate_func)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> module_started;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> type;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *handle;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> module_number;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *build_id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_ini_entry_def</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">\tZEND_INI_MH((*on_modify));</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *mh_arg1;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *mh_arg2;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *mh_arg3;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *value;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*displayer)(zend_ini_entry *ini_entry, <span class=\"keyword\">int</span> type);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> modifiable;</span><br><span class=\"line\"></span><br><span class=\"line\">\tuint name_length;</span><br><span class=\"line\">\tuint value_length;</span><br><span class=\"line\">&#125; zend_ini_entry_def;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_ini_entry</span> &#123;</span></span><br><span class=\"line\">\tzend_string *name;</span><br><span class=\"line\">\tZEND_INI_MH((*on_modify));</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *mh_arg1;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *mh_arg2;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *mh_arg3;</span><br><span class=\"line\">\tzend_string *value;</span><br><span class=\"line\">\tzend_string *orig_value;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*displayer)(zend_ini_entry *ini_entry, <span class=\"keyword\">int</span> type);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> modifiable;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> orig_modifiable;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> modified;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> module_number;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>首先是定义了一些变量(28-37)</p>\n</li>\n<li><p><code>sapi_startup()</code>:<code>sapi_started = 1</code></p>\n</li>\n</ul>\n<ul>\n<li><p><code>sapi_module-&gt;startup()</code> :<code>module_started = 1</code></p>\n</li>\n<li><p><code>do_cli()</code></p>\n</li>\n<li><p><code>php_module_shutdown()</code></p>\n</li>\n<li><p><code>sapi_shutdown()</code></p>\n</li>\n</ul>\n<h3 id=\"php扩展试验\"><a href=\"#php扩展试验\" class=\"headerlink\" title=\"php扩展试验\"></a>php扩展试验</h3><ul>\n<li>进入源码的<code>ext</code>目录,试试help,会有提示.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sawyer@thinkpad:/usr/local/src/php-7.1.20/ext$ ./ext_skel --extname=mytest</span><br><span class=\"line\">Creating directory mytest</span><br><span class=\"line\">Creating basic files: config.m4 config.w32 .gitignore mytest.c php_mytest.h CREDITS EXPERIMENTAL tests/001.phpt mytest.php [done].</span><br><span class=\"line\"></span><br><span class=\"line\">To use your new extension, you will have to execute the following steps:</span><br><span class=\"line\"></span><br><span class=\"line\">1.  $ cd ..</span><br><span class=\"line\">2.  $ vi ext/mytest/config.m4</span><br><span class=\"line\">3.  $ ./buildconf</span><br><span class=\"line\">4.  $ ./configure --[with|enable]-mytest</span><br><span class=\"line\">5.  $ make</span><br><span class=\"line\">6.  $ ./sapi/cli/php -f ext/mytest/mytest.php</span><br><span class=\"line\">7.  $ vi ext/mytest/mytest.c</span><br><span class=\"line\">8.  $ make</span><br><span class=\"line\"></span><br><span class=\"line\">Repeat steps 3-6 until you are satisfied with ext/mytest/config.m4 and</span><br><span class=\"line\">step 6 confirms that your module is compiled into PHP. Then, start writing</span><br><span class=\"line\">code and repeat the last two steps as often as necessary.</span><br></pre></td></tr></table></figure>\n<pre><code>1. 略过\n2. 需要修改`config.m4`,里面写了,不修改是没有效果的.这里解释了`enable`和`with`的区别.去掉`with`前面的`dnl`.\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnl If your extension references something external, use with:</span><br><span class=\"line\"></span><br><span class=\"line\">dnl PHP_ARG_WITH(mytest, for mytest support,</span><br><span class=\"line\">dnl Make sure that the comment is aligned:</span><br><span class=\"line\">dnl [  --with-mytest             Include mytest support])</span><br><span class=\"line\"></span><br><span class=\"line\">dnl Otherwise use enable:</span><br><span class=\"line\"></span><br><span class=\"line\">dnl PHP_ARG_ENABLE(mytest, whether to enable mytest support,</span><br><span class=\"line\">dnl Make sure that the comment is aligned:</span><br><span class=\"line\">dnl [  --enable-mytest           Enable mytest support])</span><br></pre></td></tr></table></figure>\n<pre><code>3. 给了一个提示.所以加了`--force`\n</code></pre><pre><code>You should not run buildconf in a release package.\nuse buildconf --force to override this check.\n</code></pre><pre><code>4. 成功提示 `Thank you for using PHP` \n5. make的时候放弃了...然后可以直接用安装`php`扩展的方式进行安装\n    - cd mytest\n    - phpize\n    - ./configure --with-php-config=/usr/bin/php7/bin/php-config\n    - sudo make &amp;&amp; sudo make install\n    - 修改`php.ini`发现有了这个`php`扩展\n6. 开始写代码了...\n7. 补充:第五步放弃的,是静态编译扩展到php里面.这个与使用`with`和`enable`没有必然的关系\n</code></pre>"},{"title":"一些php的概念","date":"2018-07-27T09:33:52.000Z","_content":"\nphp里面的一些概念,可能会忘的\n\n<!-- more -->\n\n### 目录\n* [static后期静态绑定](./一些php的概念.md#static-后期静态绑定/)\n* [Callback类型介绍](./一些php的概念.md#callback-类型/)\n* [Closure闭包](./一些php的概念.md#closure-闭包/)\n* [spl_autoload](./一些php的概念.md#spl_autoload/)\n* [Reflection](./一些php的概念.md#reflection/)\n* [declare](./一些php的概念.md#declare/)\n* [pcntl](./一些php的概念.md#pcntl/)\n* [posix](./一些php的概念.md#posix/)\n\n\n### static 后期静态绑定\n* 1.$this,self,static,parent 的一个例子 ,php手册里面例子也非常棒\n\n```php\n<?php\nclass GrandPa{\n\n    private function ta(){\n        echo __METHOD__ . str_repeat(\" \", 5);\n    }\n\n    public static function tb(){\n        echo __METHOD__ . str_repeat(\" \", 5);\n    }\n}\n\nclass Father extends GrandPa{\n\n    public function test(){\n        $this->ta();\n        static::tb();\n        self::tb();\n        parent::tb();\n        static::ta();\n    }\n\n    private function ta(){\n        echo __METHOD__ . str_repeat(\" \", 5);\n    }\n\n    public static function tb(){\n\n        echo __METHOD__ . str_repeat(\" \", 5);\n    }\n\n}\n\nclass Son extends Father{\n\n    private function ta(){\n        echo __METHOD__ . str_repeat(\" \", 5);\n    }\n\n    public static function tb(){\n        echo __METHOD__ . str_repeat(\" \", 5);\n    }\n}\n\n\n$obj = new Son();\n$obj->test();\n```\n\n* 输出:\n```php\nFather::ta \nSon::tb \nFather::tb \nGrandPa::tb  \n```\n* 2.结论:\n        \n  * a.static 调用静态方法:调用者对应的类的静态方法, self是自己,parent是父亲\n  * b.static 调用非静态方法:相当于在father 中调用son的ta私有方法 不能访问 因此最后一行报错\n  * c.static 转发和非转发调用:利用类名不会被转发,self,parent,static均会转发直到找到一个具体的类为止\n  * d.$this->ta() 中$this是object(son),但是由于ta是private方法,在father中不可见,于是调用的是father中的ta()\n\n* 3.[reference](http://php.net/manual/zh/language.oop5.late-static-bindings.php/)\n\n\n### Callback 类型\n* 1.栗子\n\n```php\n<?php\nfunction my_callback_function(){\n    echo __FUNCTION__;\n}\n\nclass MyClass{\n\n    static function myCallbackMethod(){\n        echo __METHOD__;\n    }\n\n    public function __invoke($echo ){\n        echo $echo;\n    }\n}\n\n$fun = function($echo){\n    echo $echo;\n};\n#1\ncall_user_func('my_callback_function');\n#2\ncall_user_func(array(MyClass::class,'myCallbackMethod'));\ncall_user_func(array('MyClass','myCallbackMethod'));\ncall_user_func('MyClass::myCallbackMethod');\n#3\n$obj = new MyClass();\ncall_user_func(array($obj,'myCallbackMethod'));\ncall_user_func($obj,'__invoke');\n#4\ncall_user_func($fun,\"hello \");\n```\n\n* 输出:\n```php\nmy_callback_function\nMyClass::myCallbackMethod\nMyClass::myCallbackMethod\nMyClass::myCallbackMethod\nMyClass::myCallbackMethod\n__invoke\nhello\n```\n* 2.结论:\n\n  * a.传递函数:传函数的名字字符串\n  * b.静态方法的传递: 1使用字符串 2使用array 3可使用call_user_func(array('B','parent::methodname'))\n  * c.成员方法的传递: 使用array($obj,str $method)\n  * d.闭包传递:直接传闭包\n\n* 3.[reference](http://php.net/manual/zh/language.types.callable.php/)\n\n\n### Closure 闭包\n\n* 1.Closure::bind($closure,$newObj [, $scope = 'static']);        \n\n```php\n<?php       \nclass A{\n    private $_m1 = 'm1';\n    public $m2 = 'm2';\n    public static $m3 = 'm3';\n    private static $_m4 = 'm4';\n}\n\n$f1 = function(){\n    var_dump($this->_m1);\n};\n\n$f2 = function(){\n    var_dump($this->m2);\n};\n\n$f3 = function(){\n    var_dump(self::$m3);\n};\n\n$f4 = function(){\n    var_dump(static::$_m4);\n};\n\n$f5 = function(){\n    var_dump('hello');\n    var_dump(A::$m3);\n};\n\n$c1 = Closure::bind($f1,new A(),A::class);\n$c2 = Closure::bind($f2,new A());\n$c3 = Closure::bind($f3,new A(),A::class);\n$c4 = Closure::bind($f4,null,new A);\n$c5 = Closure::bind($f5,null);\n$c1();\ncall_user_func($c2);\n$c3();\ncall_user_func($c4);\n$c5();\n```\n\n* 输出:\n```php\nstring(2) \"m1\" \nstring(2) \"m2\" \nstring(2) \"m3\" \nstring(2) \"m4\" \nstring(5) \"hello\"\nstring(2) \"m3\"\n```\n* 2.结论:\n\n  * a.参数意思: 1 closure 表示传入一个闭包 ,2 $newthis 这个闭包绑定在那个对象上面(可以为null) 3 $scope闭包的作用域,不传为'static'表示当前环境,new A() 和 'A' 和A::class 意思一样表示在A里面\n  * b.$c1 ,$c2 : 因为$f1中使用了$_m1是私有变量,因此在第三参数需要在A里面,所以$c1,$c2的第三参数不同\n  * c.$c3,$4,$5 :由于是静态调用,因此第二个参数可以为null,而c3,c4中使用了self和static,所以需要指定$scope来指明谁是self和static,而$f5中A::$m3在外部也可以调用,因此第三个参数为'static',如果是A::$_m4则不能调用成功\n* 3.[reference](http://php.net/manual/zh/closure.bind.php/)\n\n### spl_autoload\n* 1.例子\n```php\n<?php\nfunction my_autoload($class){\n    var_dump($class);\n    var_dump(\"my_autoload\");\n}\n$ret = spl_autoload_register('my_autoload');\nvar_dump(spl_autoload_functions());\n$a = new DDD();\n```\n\n* 输出:\n```php\narray(1) { [0]=> string(11) \"my_autoload\" } string(3) \"DDD\" string(11) \"my_autoload\"\n```\n* 2.结论:\n\n  * a.new 一个对象的时候 会先调用spl_autolad_register中注册的函数,最后找不到报了个错误\n\n* 3.[reference](http://php.net/manual/zh/function.spl-autoload.php/)\n\n### Reflection\n\n* 1.先看一些例子 大致了ReflectionClass , ReflectionMethod ,ReflectionParams 等等\n\n```php     \n<?php\n\nclass A{\n    public function __construct(B $b , C $c){\n\n    }\n}\n\nclass B{\n\n}\n\nclass C{\n    public function __construct(D $d){\n\n    }\n}\n\nclass D{\n\n}\n\n#reflectionclass \n$class = new ReflectionClass(A::class);\nvar_dump($class);\n\n#reflectionmethod 不存在构造方法返回null 本身没有但是父类有也算有\n$constructor = $class->getConstructor();\nvar_dump($constructor);\n\n#reflectionparams 组成的array\n$params = $constructor->getParameters();\n\nvar_dump($params);\n\nforeach ($params as $param) {\n    var_dump($param->getClass());\n}\n```\n\n* 输出:\n```php\nobject(ReflectionClass)#1 (1) { [\"name\"]=> string(1) \"A\" } \nobject(ReflectionMethod)#2 (2) { [\"name\"]=> string(11) \"__construct\" [\"class\"]=> string(1) \"A\" } \narray(2) { [0]=> object(ReflectionParameter)#3 (1) { [\"name\"]=> string(1) \"b\" } [1]=> object(ReflectionParameter)#4 (1) { [\"name\"]=> string(1) \"c\" } } \nobject(ReflectionClass)#5 (1) { [\"name\"]=> string(1) \"B\" }\nobject(ReflectionClass)#5 (1) { [\"name\"]=> string(1) \"C\" }\n```\n\n* 2.再看一个厉害一点的例子\n\n```php\nclass Build{\n\n    protected $buildStack = [];\n    protected $with = [];\n\n    public function make($class){\n        \n        $this->buildStack[] = $class;\n        \n        $reflectionCalss = new ReflectionClass($class);\n        \n        $constructor = $reflectionCalss->getConstructor();\n        #递归终点\n        if (is_null($constructor)) {\n           array_pop($this->buildStack);\n           return $reflectionCalss->newInstance();\n        }\n        #处理递归\n        $params = $constructor->getParameters();\n\n        foreach ($params as $param) {\n            $this->with[$class][] = $this->make($param->getClass()->name);\n        }\n        \n        $args = array_pop($this->with);\n        \n        return $reflectionCalss->newInstanceArgs($args);\n    }\n}\n\n$build = new Build;\n\nvar_dump($build->make(A::class));\n```\n\n* 输出:\n```php\nobject(A)#11 (0) { }\n```\n* 3说明:\n            \n  * a.正常实例化A需要实例话B,C,而实例化C之前需要实例化D... 等等! 这个只是个简单的例子,实际中的情况更复杂...一个依赖另外一个.所以我们需要简单的方式来实例化A\n  * b.有什么好的方式? 因为构造方法里面记录了它自己依赖的类,我们可以通过反射来获取这个类,并实例化,然后当作参数传给他.\n  * c.如何具体实现? 其实是一个递归! 递归的终点是没有依赖,即自己没有构造方法.直接实例化返回,递归的思路是利用实例化好的参数实例化当前对象.\n  * d.有什么值得学习的技巧? 利用buildStack成员记录当前正在实例化的对象保证实例化顺序不会错.利用with记录实例化该对象所需要的参数保证参数不会错\n  * e.代码有点眼熟? 是啊,最近看了laravel启动时候Container中的代码.然后模仿写的...哈哈哈.\n\n* 4.[reference](http://php.net/manual/zh/class.reflectionclass.php/)\n\n### declare\n\n有三个地方用到了declare语句:ticks, encoding, strict  \n\n* 1.ticks(时钟周期):\n    * 在declare代码段中解释器每执行N(用declare(ticks=N)指定)条可计时的低级语言就会发生的事件.事件有register_tick_function()来指定 . \n```php\n<?php\n\ndeclare(ticks=1);\n\n// A function called on each tick event\nfunction tick_handler()\n{\n    echo \"tick_handler() called\\n\";\n}\n\nregister_tick_function('tick_handler');\n\n$a = 1;\n\nif ($a > 0) {\n    $a += 2;\n    print($a);\n}\n```\n    * 用来检查pcntl_signal()使用ticks作为信号处理的回调机制\n```php\n<?php\n//使用ticks需要PHP 4.3.0以上版本\ndeclare(ticks = 1);\n\n//信号处理函数\nfunction sig_handler($signo)\n{\n\n     switch ($signo) {\n         case SIGTERM:\n             // 处理SIGTERM信号\n             exit;\n             break;\n         case SIGHUP:\n             //处理SIGHUP信号\n             break;\n         case SIGUSR1:\n             echo \"Caught SIGUSR1...\\n\";\n             break;\n         default:\n             // 处理所有其他信号\n     }\n\n}\n\necho \"Installing signal handler...\\n\";\n\n//安装信号处理器\npcntl_signal(SIGTERM, \"sig_handler\");\npcntl_signal(SIGHUP,  \"sig_handler\");\npcntl_signal(SIGUSR1, \"sig_handler\");\n\n// 或者在PHP 4.3.0以上版本可以使用对象方法\n// pcntl_signal(SIGUSR1, array($obj, \"do_something\");\n\necho \"Generating signal SIGTERM to self...\\n\";\n\n//向当前进程发送SIGUSR1信号\nposix_kill(posix_getpid(), SIGUSR1);\n\necho \"Done\\n\"\n```\n\n * 2.encoding: 用encoding指令来对每段脚本指定其编码方式\n```php\n<?php\ndeclare(encoding='ISO-8859-1');\n// code here\n?>\n```\n * 3.strict:用于strict_types\n```php\n<?php\ndeclare(strict_types=1);\n\nfunction sum(int $a, int $b) {\n    return $a + $b;\n}\n\nvar_dump(sum(1, 2));\nvar_dump(sum(1.5, 2.5)); //Uncaught TypeError\n?>\n```\n\n * 4.[reference](http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict/)\n\n### pcntl\nphp进程控制扩展支持实现了Unix方式的进程创建, 程序执行, 信号处理以及进程的中断。\n * 1.注意事项\n     * 不能被应用在web服务器环境\n     * 在Windows平台不可用\n * 2.一些常用的函数\n    * pcntl_fork() \n    * pcntl_wait()\n    * pcntl_signal()\n    * pcntl_exec()\n  * 3.例子\n```php\n<?php\n\n$ret  = pcntl_fork();\n\nif ($ret == -1) {\n    exit('fork error');\n}elseif ($ret == 0) {\n    echo('I am the child');\n    pcntl_exec('/bin/ls');\n}else{\n    echo $ret;\n    pcntl_wait($status);\n    echo $status;\n    sleep(60);\n}\n```\n * 4.[reference](http://php.net/manual/zh/ref.pcntl.php/)\n\n\n ### posix\n This module contains an interface to those functions defined in the IEEE 1003.1 (POSIX.1) standards document which are not accessible through other means.\n  * 1.注意事项. \n    * windows 下不能用\n  * 2.常用函数\n    * posix_getpid()\n    * posix_kill()\n    * posix_mkfifo()\n  * 3.[reference](http://php.net/manual/zh/book.posix.php/)\n","source":"_posts/一些php的概念.md","raw":"---\ntitle: 一些php的概念\ndate: 2018-07-27 17:33:52\ntags:\n- php\ncategories:\n- 计算机基础\n---\n\nphp里面的一些概念,可能会忘的\n\n<!-- more -->\n\n### 目录\n* [static后期静态绑定](./一些php的概念.md#static-后期静态绑定/)\n* [Callback类型介绍](./一些php的概念.md#callback-类型/)\n* [Closure闭包](./一些php的概念.md#closure-闭包/)\n* [spl_autoload](./一些php的概念.md#spl_autoload/)\n* [Reflection](./一些php的概念.md#reflection/)\n* [declare](./一些php的概念.md#declare/)\n* [pcntl](./一些php的概念.md#pcntl/)\n* [posix](./一些php的概念.md#posix/)\n\n\n### static 后期静态绑定\n* 1.$this,self,static,parent 的一个例子 ,php手册里面例子也非常棒\n\n```php\n<?php\nclass GrandPa{\n\n    private function ta(){\n        echo __METHOD__ . str_repeat(\" \", 5);\n    }\n\n    public static function tb(){\n        echo __METHOD__ . str_repeat(\" \", 5);\n    }\n}\n\nclass Father extends GrandPa{\n\n    public function test(){\n        $this->ta();\n        static::tb();\n        self::tb();\n        parent::tb();\n        static::ta();\n    }\n\n    private function ta(){\n        echo __METHOD__ . str_repeat(\" \", 5);\n    }\n\n    public static function tb(){\n\n        echo __METHOD__ . str_repeat(\" \", 5);\n    }\n\n}\n\nclass Son extends Father{\n\n    private function ta(){\n        echo __METHOD__ . str_repeat(\" \", 5);\n    }\n\n    public static function tb(){\n        echo __METHOD__ . str_repeat(\" \", 5);\n    }\n}\n\n\n$obj = new Son();\n$obj->test();\n```\n\n* 输出:\n```php\nFather::ta \nSon::tb \nFather::tb \nGrandPa::tb  \n```\n* 2.结论:\n        \n  * a.static 调用静态方法:调用者对应的类的静态方法, self是自己,parent是父亲\n  * b.static 调用非静态方法:相当于在father 中调用son的ta私有方法 不能访问 因此最后一行报错\n  * c.static 转发和非转发调用:利用类名不会被转发,self,parent,static均会转发直到找到一个具体的类为止\n  * d.$this->ta() 中$this是object(son),但是由于ta是private方法,在father中不可见,于是调用的是father中的ta()\n\n* 3.[reference](http://php.net/manual/zh/language.oop5.late-static-bindings.php/)\n\n\n### Callback 类型\n* 1.栗子\n\n```php\n<?php\nfunction my_callback_function(){\n    echo __FUNCTION__;\n}\n\nclass MyClass{\n\n    static function myCallbackMethod(){\n        echo __METHOD__;\n    }\n\n    public function __invoke($echo ){\n        echo $echo;\n    }\n}\n\n$fun = function($echo){\n    echo $echo;\n};\n#1\ncall_user_func('my_callback_function');\n#2\ncall_user_func(array(MyClass::class,'myCallbackMethod'));\ncall_user_func(array('MyClass','myCallbackMethod'));\ncall_user_func('MyClass::myCallbackMethod');\n#3\n$obj = new MyClass();\ncall_user_func(array($obj,'myCallbackMethod'));\ncall_user_func($obj,'__invoke');\n#4\ncall_user_func($fun,\"hello \");\n```\n\n* 输出:\n```php\nmy_callback_function\nMyClass::myCallbackMethod\nMyClass::myCallbackMethod\nMyClass::myCallbackMethod\nMyClass::myCallbackMethod\n__invoke\nhello\n```\n* 2.结论:\n\n  * a.传递函数:传函数的名字字符串\n  * b.静态方法的传递: 1使用字符串 2使用array 3可使用call_user_func(array('B','parent::methodname'))\n  * c.成员方法的传递: 使用array($obj,str $method)\n  * d.闭包传递:直接传闭包\n\n* 3.[reference](http://php.net/manual/zh/language.types.callable.php/)\n\n\n### Closure 闭包\n\n* 1.Closure::bind($closure,$newObj [, $scope = 'static']);        \n\n```php\n<?php       \nclass A{\n    private $_m1 = 'm1';\n    public $m2 = 'm2';\n    public static $m3 = 'm3';\n    private static $_m4 = 'm4';\n}\n\n$f1 = function(){\n    var_dump($this->_m1);\n};\n\n$f2 = function(){\n    var_dump($this->m2);\n};\n\n$f3 = function(){\n    var_dump(self::$m3);\n};\n\n$f4 = function(){\n    var_dump(static::$_m4);\n};\n\n$f5 = function(){\n    var_dump('hello');\n    var_dump(A::$m3);\n};\n\n$c1 = Closure::bind($f1,new A(),A::class);\n$c2 = Closure::bind($f2,new A());\n$c3 = Closure::bind($f3,new A(),A::class);\n$c4 = Closure::bind($f4,null,new A);\n$c5 = Closure::bind($f5,null);\n$c1();\ncall_user_func($c2);\n$c3();\ncall_user_func($c4);\n$c5();\n```\n\n* 输出:\n```php\nstring(2) \"m1\" \nstring(2) \"m2\" \nstring(2) \"m3\" \nstring(2) \"m4\" \nstring(5) \"hello\"\nstring(2) \"m3\"\n```\n* 2.结论:\n\n  * a.参数意思: 1 closure 表示传入一个闭包 ,2 $newthis 这个闭包绑定在那个对象上面(可以为null) 3 $scope闭包的作用域,不传为'static'表示当前环境,new A() 和 'A' 和A::class 意思一样表示在A里面\n  * b.$c1 ,$c2 : 因为$f1中使用了$_m1是私有变量,因此在第三参数需要在A里面,所以$c1,$c2的第三参数不同\n  * c.$c3,$4,$5 :由于是静态调用,因此第二个参数可以为null,而c3,c4中使用了self和static,所以需要指定$scope来指明谁是self和static,而$f5中A::$m3在外部也可以调用,因此第三个参数为'static',如果是A::$_m4则不能调用成功\n* 3.[reference](http://php.net/manual/zh/closure.bind.php/)\n\n### spl_autoload\n* 1.例子\n```php\n<?php\nfunction my_autoload($class){\n    var_dump($class);\n    var_dump(\"my_autoload\");\n}\n$ret = spl_autoload_register('my_autoload');\nvar_dump(spl_autoload_functions());\n$a = new DDD();\n```\n\n* 输出:\n```php\narray(1) { [0]=> string(11) \"my_autoload\" } string(3) \"DDD\" string(11) \"my_autoload\"\n```\n* 2.结论:\n\n  * a.new 一个对象的时候 会先调用spl_autolad_register中注册的函数,最后找不到报了个错误\n\n* 3.[reference](http://php.net/manual/zh/function.spl-autoload.php/)\n\n### Reflection\n\n* 1.先看一些例子 大致了ReflectionClass , ReflectionMethod ,ReflectionParams 等等\n\n```php     \n<?php\n\nclass A{\n    public function __construct(B $b , C $c){\n\n    }\n}\n\nclass B{\n\n}\n\nclass C{\n    public function __construct(D $d){\n\n    }\n}\n\nclass D{\n\n}\n\n#reflectionclass \n$class = new ReflectionClass(A::class);\nvar_dump($class);\n\n#reflectionmethod 不存在构造方法返回null 本身没有但是父类有也算有\n$constructor = $class->getConstructor();\nvar_dump($constructor);\n\n#reflectionparams 组成的array\n$params = $constructor->getParameters();\n\nvar_dump($params);\n\nforeach ($params as $param) {\n    var_dump($param->getClass());\n}\n```\n\n* 输出:\n```php\nobject(ReflectionClass)#1 (1) { [\"name\"]=> string(1) \"A\" } \nobject(ReflectionMethod)#2 (2) { [\"name\"]=> string(11) \"__construct\" [\"class\"]=> string(1) \"A\" } \narray(2) { [0]=> object(ReflectionParameter)#3 (1) { [\"name\"]=> string(1) \"b\" } [1]=> object(ReflectionParameter)#4 (1) { [\"name\"]=> string(1) \"c\" } } \nobject(ReflectionClass)#5 (1) { [\"name\"]=> string(1) \"B\" }\nobject(ReflectionClass)#5 (1) { [\"name\"]=> string(1) \"C\" }\n```\n\n* 2.再看一个厉害一点的例子\n\n```php\nclass Build{\n\n    protected $buildStack = [];\n    protected $with = [];\n\n    public function make($class){\n        \n        $this->buildStack[] = $class;\n        \n        $reflectionCalss = new ReflectionClass($class);\n        \n        $constructor = $reflectionCalss->getConstructor();\n        #递归终点\n        if (is_null($constructor)) {\n           array_pop($this->buildStack);\n           return $reflectionCalss->newInstance();\n        }\n        #处理递归\n        $params = $constructor->getParameters();\n\n        foreach ($params as $param) {\n            $this->with[$class][] = $this->make($param->getClass()->name);\n        }\n        \n        $args = array_pop($this->with);\n        \n        return $reflectionCalss->newInstanceArgs($args);\n    }\n}\n\n$build = new Build;\n\nvar_dump($build->make(A::class));\n```\n\n* 输出:\n```php\nobject(A)#11 (0) { }\n```\n* 3说明:\n            \n  * a.正常实例化A需要实例话B,C,而实例化C之前需要实例化D... 等等! 这个只是个简单的例子,实际中的情况更复杂...一个依赖另外一个.所以我们需要简单的方式来实例化A\n  * b.有什么好的方式? 因为构造方法里面记录了它自己依赖的类,我们可以通过反射来获取这个类,并实例化,然后当作参数传给他.\n  * c.如何具体实现? 其实是一个递归! 递归的终点是没有依赖,即自己没有构造方法.直接实例化返回,递归的思路是利用实例化好的参数实例化当前对象.\n  * d.有什么值得学习的技巧? 利用buildStack成员记录当前正在实例化的对象保证实例化顺序不会错.利用with记录实例化该对象所需要的参数保证参数不会错\n  * e.代码有点眼熟? 是啊,最近看了laravel启动时候Container中的代码.然后模仿写的...哈哈哈.\n\n* 4.[reference](http://php.net/manual/zh/class.reflectionclass.php/)\n\n### declare\n\n有三个地方用到了declare语句:ticks, encoding, strict  \n\n* 1.ticks(时钟周期):\n    * 在declare代码段中解释器每执行N(用declare(ticks=N)指定)条可计时的低级语言就会发生的事件.事件有register_tick_function()来指定 . \n```php\n<?php\n\ndeclare(ticks=1);\n\n// A function called on each tick event\nfunction tick_handler()\n{\n    echo \"tick_handler() called\\n\";\n}\n\nregister_tick_function('tick_handler');\n\n$a = 1;\n\nif ($a > 0) {\n    $a += 2;\n    print($a);\n}\n```\n    * 用来检查pcntl_signal()使用ticks作为信号处理的回调机制\n```php\n<?php\n//使用ticks需要PHP 4.3.0以上版本\ndeclare(ticks = 1);\n\n//信号处理函数\nfunction sig_handler($signo)\n{\n\n     switch ($signo) {\n         case SIGTERM:\n             // 处理SIGTERM信号\n             exit;\n             break;\n         case SIGHUP:\n             //处理SIGHUP信号\n             break;\n         case SIGUSR1:\n             echo \"Caught SIGUSR1...\\n\";\n             break;\n         default:\n             // 处理所有其他信号\n     }\n\n}\n\necho \"Installing signal handler...\\n\";\n\n//安装信号处理器\npcntl_signal(SIGTERM, \"sig_handler\");\npcntl_signal(SIGHUP,  \"sig_handler\");\npcntl_signal(SIGUSR1, \"sig_handler\");\n\n// 或者在PHP 4.3.0以上版本可以使用对象方法\n// pcntl_signal(SIGUSR1, array($obj, \"do_something\");\n\necho \"Generating signal SIGTERM to self...\\n\";\n\n//向当前进程发送SIGUSR1信号\nposix_kill(posix_getpid(), SIGUSR1);\n\necho \"Done\\n\"\n```\n\n * 2.encoding: 用encoding指令来对每段脚本指定其编码方式\n```php\n<?php\ndeclare(encoding='ISO-8859-1');\n// code here\n?>\n```\n * 3.strict:用于strict_types\n```php\n<?php\ndeclare(strict_types=1);\n\nfunction sum(int $a, int $b) {\n    return $a + $b;\n}\n\nvar_dump(sum(1, 2));\nvar_dump(sum(1.5, 2.5)); //Uncaught TypeError\n?>\n```\n\n * 4.[reference](http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict/)\n\n### pcntl\nphp进程控制扩展支持实现了Unix方式的进程创建, 程序执行, 信号处理以及进程的中断。\n * 1.注意事项\n     * 不能被应用在web服务器环境\n     * 在Windows平台不可用\n * 2.一些常用的函数\n    * pcntl_fork() \n    * pcntl_wait()\n    * pcntl_signal()\n    * pcntl_exec()\n  * 3.例子\n```php\n<?php\n\n$ret  = pcntl_fork();\n\nif ($ret == -1) {\n    exit('fork error');\n}elseif ($ret == 0) {\n    echo('I am the child');\n    pcntl_exec('/bin/ls');\n}else{\n    echo $ret;\n    pcntl_wait($status);\n    echo $status;\n    sleep(60);\n}\n```\n * 4.[reference](http://php.net/manual/zh/ref.pcntl.php/)\n\n\n ### posix\n This module contains an interface to those functions defined in the IEEE 1003.1 (POSIX.1) standards document which are not accessible through other means.\n  * 1.注意事项. \n    * windows 下不能用\n  * 2.常用函数\n    * posix_getpid()\n    * posix_kill()\n    * posix_mkfifo()\n  * 3.[reference](http://php.net/manual/zh/book.posix.php/)\n","slug":"一些php的概念","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhgt0031zbovebnlle8y","content":"<p>php里面的一些概念,可能会忘的</p>\n<a id=\"more\"></a>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"./一些php的概念.md#static-后期静态绑定/\">static后期静态绑定</a></li>\n<li><a href=\"./一些php的概念.md#callback-类型/\">Callback类型介绍</a></li>\n<li><a href=\"./一些php的概念.md#closure-闭包/\">Closure闭包</a></li>\n<li><a href=\"./一些php的概念.md#spl_autoload/\">spl_autoload</a></li>\n<li><a href=\"./一些php的概念.md#reflection/\">Reflection</a></li>\n<li><a href=\"./一些php的概念.md#declare/\">declare</a></li>\n<li><a href=\"./一些php的概念.md#pcntl/\">pcntl</a></li>\n<li><a href=\"./一些php的概念.md#posix/\">posix</a></li>\n</ul>\n<h3 id=\"static-后期静态绑定\"><a href=\"#static-后期静态绑定\" class=\"headerlink\" title=\"static 后期静态绑定\"></a>static 后期静态绑定</h3><ul>\n<li>1.$this,self,static,parent 的一个例子 ,php手册里面例子也非常棒</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GrandPa</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ta</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span> . str_repeat(<span class=\"string\">\" \"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span> . str_repeat(<span class=\"string\">\" \"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> <span class=\"keyword\">extends</span> <span class=\"title\">GrandPa</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;ta();</span><br><span class=\"line\">        <span class=\"keyword\">static</span>::tb();</span><br><span class=\"line\">        <span class=\"keyword\">self</span>::tb();</span><br><span class=\"line\">        <span class=\"keyword\">parent</span>::tb();</span><br><span class=\"line\">        <span class=\"keyword\">static</span>::ta();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ta</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span> . str_repeat(<span class=\"string\">\" \"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span> . str_repeat(<span class=\"string\">\" \"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ta</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span> . str_repeat(<span class=\"string\">\" \"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span> . str_repeat(<span class=\"string\">\" \"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">$obj-&gt;test();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Father::ta </span><br><span class=\"line\">Son::tb </span><br><span class=\"line\">Father::tb </span><br><span class=\"line\">GrandPa::tb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.结论:</p>\n<ul>\n<li>a.static 调用静态方法:调用者对应的类的静态方法, self是自己,parent是父亲</li>\n<li>b.static 调用非静态方法:相当于在father 中调用son的ta私有方法 不能访问 因此最后一行报错</li>\n<li>c.static 转发和非转发调用:利用类名不会被转发,self,parent,static均会转发直到找到一个具体的类为止</li>\n<li>d.$this-&gt;ta() 中$this是object(son),但是由于ta是private方法,在father中不可见,于是调用的是father中的ta()</li>\n</ul>\n</li>\n<li><p>3.<a href=\"http://php.net/manual/zh/language.oop5.late-static-bindings.php/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n</li>\n</ul>\n<h3 id=\"Callback-类型\"><a href=\"#Callback-类型\" class=\"headerlink\" title=\"Callback 类型\"></a>Callback 类型</h3><ul>\n<li>1.栗子</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">my_callback_function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"keyword\">__FUNCTION__</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myCallbackMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span><span class=\"params\">($echo )</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $echo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$fun = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($echo)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $echo;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">#1</span></span><br><span class=\"line\">call_user_func(<span class=\"string\">'my_callback_function'</span>);</span><br><span class=\"line\"><span class=\"comment\">#2</span></span><br><span class=\"line\">call_user_func(<span class=\"keyword\">array</span>(MyClass::class,<span class=\"string\">'myCallbackMethod'</span>));</span><br><span class=\"line\">call_user_func(<span class=\"keyword\">array</span>(<span class=\"string\">'MyClass'</span>,<span class=\"string\">'myCallbackMethod'</span>));</span><br><span class=\"line\">call_user_func(<span class=\"string\">'MyClass::myCallbackMethod'</span>);</span><br><span class=\"line\"><span class=\"comment\">#3</span></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">call_user_func(<span class=\"keyword\">array</span>($obj,<span class=\"string\">'myCallbackMethod'</span>));</span><br><span class=\"line\">call_user_func($obj,<span class=\"string\">'__invoke'</span>);</span><br><span class=\"line\"><span class=\"comment\">#4</span></span><br><span class=\"line\">call_user_func($fun,<span class=\"string\">\"hello \"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_callback_function</span><br><span class=\"line\">MyClass::myCallbackMethod</span><br><span class=\"line\">MyClass::myCallbackMethod</span><br><span class=\"line\">MyClass::myCallbackMethod</span><br><span class=\"line\">MyClass::myCallbackMethod</span><br><span class=\"line\">__invoke</span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.结论:</p>\n<ul>\n<li>a.传递函数:传函数的名字字符串</li>\n<li>b.静态方法的传递: 1使用字符串 2使用array 3可使用call_user_func(array(‘B’,’parent::methodname’))</li>\n<li>c.成员方法的传递: 使用array($obj,str $method)</li>\n<li>d.闭包传递:直接传闭包</li>\n</ul>\n</li>\n<li><p>3.<a href=\"http://php.net/manual/zh/language.types.callable.php/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n</li>\n</ul>\n<h3 id=\"Closure-闭包\"><a href=\"#Closure-闭包\" class=\"headerlink\" title=\"Closure 闭包\"></a>Closure 闭包</h3><ul>\n<li>1.Closure::bind($closure,$newObj [, $scope = ‘static’]);        </li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>       </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_m1 = <span class=\"string\">'m1'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $m2 = <span class=\"string\">'m2'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $m3 = <span class=\"string\">'m3'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_m4 = <span class=\"string\">'m4'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$f1 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    var_dump(<span class=\"keyword\">$this</span>-&gt;_m1);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$f2 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    var_dump(<span class=\"keyword\">$this</span>-&gt;m2);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$f3 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    var_dump(<span class=\"keyword\">self</span>::$m3);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$f4 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    var_dump(<span class=\"keyword\">static</span>::$_m4);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$f5 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    var_dump(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">    var_dump(A::$m3);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$c1 = Closure::bind($f1,<span class=\"keyword\">new</span> A(),A::class);</span><br><span class=\"line\">$c2 = Closure::bind($f2,<span class=\"keyword\">new</span> A());</span><br><span class=\"line\">$c3 = Closure::bind($f3,<span class=\"keyword\">new</span> A(),A::class);</span><br><span class=\"line\">$c4 = Closure::bind($f4,<span class=\"keyword\">null</span>,<span class=\"keyword\">new</span> A);</span><br><span class=\"line\">$c5 = Closure::bind($f5,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">$c1();</span><br><span class=\"line\">call_user_func($c2);</span><br><span class=\"line\">$c3();</span><br><span class=\"line\">call_user_func($c4);</span><br><span class=\"line\">$c5();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string(<span class=\"number\">2</span>) <span class=\"string\">\"m1\"</span> </span><br><span class=\"line\">string(<span class=\"number\">2</span>) <span class=\"string\">\"m2\"</span> </span><br><span class=\"line\">string(<span class=\"number\">2</span>) <span class=\"string\">\"m3\"</span> </span><br><span class=\"line\">string(<span class=\"number\">2</span>) <span class=\"string\">\"m4\"</span> </span><br><span class=\"line\">string(<span class=\"number\">5</span>) <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">string(<span class=\"number\">2</span>) <span class=\"string\">\"m3\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.结论:</p>\n<ul>\n<li>a.参数意思: 1 closure 表示传入一个闭包 ,2 $newthis 这个闭包绑定在那个对象上面(可以为null) 3 $scope闭包的作用域,不传为’static’表示当前环境,new A() 和 ‘A’ 和A::class 意思一样表示在A里面</li>\n<li>b.$c1 ,$c2 : 因为$f1中使用了$_m1是私有变量,因此在第三参数需要在A里面,所以$c1,$c2的第三参数不同</li>\n<li>c.$c3,$4,$5 :由于是静态调用,因此第二个参数可以为null,而c3,c4中使用了self和static,所以需要指定$scope来指明谁是self和static,而$f5中A::$m3在外部也可以调用,因此第三个参数为’static’,如果是A::$_m4则不能调用成功</li>\n</ul>\n</li>\n<li>3.<a href=\"http://php.net/manual/zh/closure.bind.php/\" target=\"_blank\" rel=\"noopener\">reference</a></li>\n</ul>\n<h3 id=\"spl-autoload\"><a href=\"#spl-autoload\" class=\"headerlink\" title=\"spl_autoload\"></a>spl_autoload</h3><ul>\n<li><p>1.例子</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">my_autoload</span><span class=\"params\">($class)</span></span>&#123;</span><br><span class=\"line\">    var_dump($class);</span><br><span class=\"line\">    var_dump(<span class=\"string\">\"my_autoload\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ret = spl_autoload_register(<span class=\"string\">'my_autoload'</span>);</span><br><span class=\"line\">var_dump(spl_autoload_functions());</span><br><span class=\"line\">$a = <span class=\"keyword\">new</span> DDD();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">1</span>) &#123; [<span class=\"number\">0</span>]=&gt; string(<span class=\"number\">11</span>) <span class=\"string\">\"my_autoload\"</span> &#125; string(<span class=\"number\">3</span>) <span class=\"string\">\"DDD\"</span> string(<span class=\"number\">11</span>) <span class=\"string\">\"my_autoload\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.结论:</p>\n<ul>\n<li>a.new 一个对象的时候 会先调用spl_autolad_register中注册的函数,最后找不到报了个错误</li>\n</ul>\n</li>\n<li><p>3.<a href=\"http://php.net/manual/zh/function.spl-autoload.php/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n</li>\n</ul>\n<h3 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection\"></a>Reflection</h3><ul>\n<li>1.先看一些例子 大致了ReflectionClass , ReflectionMethod ,ReflectionParams 等等</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(B $b , C $c)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(D $d)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#reflectionclass </span></span><br><span class=\"line\">$class = <span class=\"keyword\">new</span> ReflectionClass(A::class);</span><br><span class=\"line\">var_dump($class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#reflectionmethod 不存在构造方法返回null 本身没有但是父类有也算有</span></span><br><span class=\"line\">$constructor = $class-&gt;getConstructor();</span><br><span class=\"line\">var_dump($constructor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#reflectionparams 组成的array</span></span><br><span class=\"line\">$params = $constructor-&gt;getParameters();</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($params);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($params <span class=\"keyword\">as</span> $param) &#123;</span><br><span class=\"line\">    var_dump($param-&gt;getClass());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object(ReflectionClass)<span class=\"comment\">#1 (1) &#123; [\"name\"]=&gt; string(1) \"A\" &#125; </span></span><br><span class=\"line\">object(ReflectionMethod)<span class=\"comment\">#2 (2) &#123; [\"name\"]=&gt; string(11) \"__construct\" [\"class\"]=&gt; string(1) \"A\" &#125; </span></span><br><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">2</span>) &#123; [<span class=\"number\">0</span>]=&gt; object(ReflectionParameter)<span class=\"comment\">#3 (1) &#123; [\"name\"]=&gt; string(1) \"b\" &#125; [1]=&gt; object(ReflectionParameter)#4 (1) &#123; [\"name\"]=&gt; string(1) \"c\" &#125; &#125; </span></span><br><span class=\"line\">object(ReflectionClass)<span class=\"comment\">#5 (1) &#123; [\"name\"]=&gt; string(1) \"B\" &#125;</span></span><br><span class=\"line\">object(ReflectionClass)<span class=\"comment\">#5 (1) &#123; [\"name\"]=&gt; string(1) \"C\" &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.再看一个厉害一点的例子</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $buildStack = [];</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $with = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make</span><span class=\"params\">($class)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;buildStack[] = $class;</span><br><span class=\"line\">        </span><br><span class=\"line\">        $reflectionCalss = <span class=\"keyword\">new</span> ReflectionClass($class);</span><br><span class=\"line\">        </span><br><span class=\"line\">        $constructor = $reflectionCalss-&gt;getConstructor();</span><br><span class=\"line\">        <span class=\"comment\">#递归终点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_null($constructor)) &#123;</span><br><span class=\"line\">           array_pop(<span class=\"keyword\">$this</span>-&gt;buildStack);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> $reflectionCalss-&gt;newInstance();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">#处理递归</span></span><br><span class=\"line\">        $params = $constructor-&gt;getParameters();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($params <span class=\"keyword\">as</span> $param) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;with[$class][] = <span class=\"keyword\">$this</span>-&gt;make($param-&gt;getClass()-&gt;name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        $args = array_pop(<span class=\"keyword\">$this</span>-&gt;with);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> $reflectionCalss-&gt;newInstanceArgs($args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$build = <span class=\"keyword\">new</span> Build;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($build-&gt;make(A::class));</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object(A)<span class=\"comment\">#11 (0) &#123; &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3说明:</p>\n<ul>\n<li>a.正常实例化A需要实例话B,C,而实例化C之前需要实例化D… 等等! 这个只是个简单的例子,实际中的情况更复杂…一个依赖另外一个.所以我们需要简单的方式来实例化A</li>\n<li>b.有什么好的方式? 因为构造方法里面记录了它自己依赖的类,我们可以通过反射来获取这个类,并实例化,然后当作参数传给他.</li>\n<li>c.如何具体实现? 其实是一个递归! 递归的终点是没有依赖,即自己没有构造方法.直接实例化返回,递归的思路是利用实例化好的参数实例化当前对象.</li>\n<li>d.有什么值得学习的技巧? 利用buildStack成员记录当前正在实例化的对象保证实例化顺序不会错.利用with记录实例化该对象所需要的参数保证参数不会错</li>\n<li>e.代码有点眼熟? 是啊,最近看了laravel启动时候Container中的代码.然后模仿写的…哈哈哈.</li>\n</ul>\n</li>\n<li><p>4.<a href=\"http://php.net/manual/zh/class.reflectionclass.php/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n</li>\n</ul>\n<h3 id=\"declare\"><a href=\"#declare\" class=\"headerlink\" title=\"declare\"></a>declare</h3><p>有三个地方用到了declare语句:ticks, encoding, strict  </p>\n<ul>\n<li><p>1.ticks(时钟周期):</p>\n<ul>\n<li><p>在declare代码段中解释器每执行N(用declare(ticks=N)指定)条可计时的低级语言就会发生的事件.事件有register_tick_function()来指定 . </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span>(ticks=<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A function called on each tick event</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tick_handler</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"tick_handler() called\\n\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">register_tick_function(<span class=\"string\">'tick_handler'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($a &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    $a += <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">print</span>($a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用来检查pcntl_signal()使用ticks作为信号处理的回调机制</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//使用ticks需要PHP 4.3.0以上版本</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span>(ticks = <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//信号处理函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sig_handler</span><span class=\"params\">($signo)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">switch</span> ($signo) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> SIGTERM:</span><br><span class=\"line\">             <span class=\"comment\">// 处理SIGTERM信号</span></span><br><span class=\"line\">             <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> SIGHUP:</span><br><span class=\"line\">             <span class=\"comment\">//处理SIGHUP信号</span></span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> SIGUSR1:</span><br><span class=\"line\">             <span class=\"keyword\">echo</span> <span class=\"string\">\"Caught SIGUSR1...\\n\"</span>;</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">             <span class=\"comment\">// 处理所有其他信号</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Installing signal handler...\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//安装信号处理器</span></span><br><span class=\"line\">pcntl_signal(SIGTERM, <span class=\"string\">\"sig_handler\"</span>);</span><br><span class=\"line\">pcntl_signal(SIGHUP,  <span class=\"string\">\"sig_handler\"</span>);</span><br><span class=\"line\">pcntl_signal(SIGUSR1, <span class=\"string\">\"sig_handler\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者在PHP 4.3.0以上版本可以使用对象方法</span></span><br><span class=\"line\"><span class=\"comment\">// pcntl_signal(SIGUSR1, array($obj, \"do_something\");</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Generating signal SIGTERM to self...\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//向当前进程发送SIGUSR1信号</span></span><br><span class=\"line\">posix_kill(posix_getpid(), SIGUSR1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Done\\n\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>2.encoding: 用encoding指令来对每段脚本指定其编码方式</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span>(encoding=<span class=\"string\">'ISO-8859-1'</span>);</span><br><span class=\"line\"><span class=\"comment\">// code here</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.strict:用于strict_types</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span>(strict_types=<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span><span class=\"params\">(int $a, int $b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $a + $b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">var_dump(sum(<span class=\"number\">1.5</span>, <span class=\"number\">2.5</span>)); <span class=\"comment\">//Uncaught TypeError</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.<a href=\"http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"pcntl\"><a href=\"#pcntl\" class=\"headerlink\" title=\"pcntl\"></a>pcntl</h3><p>php进程控制扩展支持实现了Unix方式的进程创建, 程序执行, 信号处理以及进程的中断。</p>\n<ul>\n<li>1.注意事项<ul>\n<li>不能被应用在web服务器环境</li>\n<li>在Windows平台不可用</li>\n</ul>\n</li>\n<li><p>2.一些常用的函数</p>\n<ul>\n<li>pcntl_fork() </li>\n<li>pcntl_wait()</li>\n<li>pcntl_signal()</li>\n<li>pcntl_exec()<ul>\n<li>3.例子<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ret  = pcntl_fork();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"string\">'fork error'</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">elseif</span> ($ret == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span>(<span class=\"string\">'I am the child'</span>);</span><br><span class=\"line\">    pcntl_exec(<span class=\"string\">'/bin/ls'</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $ret;</span><br><span class=\"line\">    pcntl_wait($status);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $status;</span><br><span class=\"line\">    sleep(<span class=\"number\">60</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.<a href=\"http://php.net/manual/zh/ref.pcntl.php/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n</li>\n</ul>\n<h3 id=\"posix\"><a href=\"#posix\" class=\"headerlink\" title=\"posix\"></a>posix</h3><p> This module contains an interface to those functions defined in the IEEE 1003.1 (POSIX.1) standards document which are not accessible through other means.</p>\n<ul>\n<li>1.注意事项. <ul>\n<li>windows 下不能用</li>\n</ul>\n</li>\n<li>2.常用函数<ul>\n<li>posix_getpid()</li>\n<li>posix_kill()</li>\n<li>posix_mkfifo()</li>\n</ul>\n</li>\n<li>3.<a href=\"http://php.net/manual/zh/book.posix.php/\" target=\"_blank\" rel=\"noopener\">reference</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>php里面的一些概念,可能会忘的</p>","more":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"./一些php的概念.md#static-后期静态绑定/\">static后期静态绑定</a></li>\n<li><a href=\"./一些php的概念.md#callback-类型/\">Callback类型介绍</a></li>\n<li><a href=\"./一些php的概念.md#closure-闭包/\">Closure闭包</a></li>\n<li><a href=\"./一些php的概念.md#spl_autoload/\">spl_autoload</a></li>\n<li><a href=\"./一些php的概念.md#reflection/\">Reflection</a></li>\n<li><a href=\"./一些php的概念.md#declare/\">declare</a></li>\n<li><a href=\"./一些php的概念.md#pcntl/\">pcntl</a></li>\n<li><a href=\"./一些php的概念.md#posix/\">posix</a></li>\n</ul>\n<h3 id=\"static-后期静态绑定\"><a href=\"#static-后期静态绑定\" class=\"headerlink\" title=\"static 后期静态绑定\"></a>static 后期静态绑定</h3><ul>\n<li>1.$this,self,static,parent 的一个例子 ,php手册里面例子也非常棒</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GrandPa</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ta</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span> . str_repeat(<span class=\"string\">\" \"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span> . str_repeat(<span class=\"string\">\" \"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> <span class=\"keyword\">extends</span> <span class=\"title\">GrandPa</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;ta();</span><br><span class=\"line\">        <span class=\"keyword\">static</span>::tb();</span><br><span class=\"line\">        <span class=\"keyword\">self</span>::tb();</span><br><span class=\"line\">        <span class=\"keyword\">parent</span>::tb();</span><br><span class=\"line\">        <span class=\"keyword\">static</span>::ta();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ta</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span> . str_repeat(<span class=\"string\">\" \"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span> . str_repeat(<span class=\"string\">\" \"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ta</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span> . str_repeat(<span class=\"string\">\" \"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tb</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span> . str_repeat(<span class=\"string\">\" \"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">$obj-&gt;test();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Father::ta </span><br><span class=\"line\">Son::tb </span><br><span class=\"line\">Father::tb </span><br><span class=\"line\">GrandPa::tb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.结论:</p>\n<ul>\n<li>a.static 调用静态方法:调用者对应的类的静态方法, self是自己,parent是父亲</li>\n<li>b.static 调用非静态方法:相当于在father 中调用son的ta私有方法 不能访问 因此最后一行报错</li>\n<li>c.static 转发和非转发调用:利用类名不会被转发,self,parent,static均会转发直到找到一个具体的类为止</li>\n<li>d.$this-&gt;ta() 中$this是object(son),但是由于ta是private方法,在father中不可见,于是调用的是father中的ta()</li>\n</ul>\n</li>\n<li><p>3.<a href=\"http://php.net/manual/zh/language.oop5.late-static-bindings.php/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n</li>\n</ul>\n<h3 id=\"Callback-类型\"><a href=\"#Callback-类型\" class=\"headerlink\" title=\"Callback 类型\"></a>Callback 类型</h3><ul>\n<li>1.栗子</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">my_callback_function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"keyword\">__FUNCTION__</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myCallbackMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">__METHOD__</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span><span class=\"params\">($echo )</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $echo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$fun = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($echo)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $echo;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">#1</span></span><br><span class=\"line\">call_user_func(<span class=\"string\">'my_callback_function'</span>);</span><br><span class=\"line\"><span class=\"comment\">#2</span></span><br><span class=\"line\">call_user_func(<span class=\"keyword\">array</span>(MyClass::class,<span class=\"string\">'myCallbackMethod'</span>));</span><br><span class=\"line\">call_user_func(<span class=\"keyword\">array</span>(<span class=\"string\">'MyClass'</span>,<span class=\"string\">'myCallbackMethod'</span>));</span><br><span class=\"line\">call_user_func(<span class=\"string\">'MyClass::myCallbackMethod'</span>);</span><br><span class=\"line\"><span class=\"comment\">#3</span></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">call_user_func(<span class=\"keyword\">array</span>($obj,<span class=\"string\">'myCallbackMethod'</span>));</span><br><span class=\"line\">call_user_func($obj,<span class=\"string\">'__invoke'</span>);</span><br><span class=\"line\"><span class=\"comment\">#4</span></span><br><span class=\"line\">call_user_func($fun,<span class=\"string\">\"hello \"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_callback_function</span><br><span class=\"line\">MyClass::myCallbackMethod</span><br><span class=\"line\">MyClass::myCallbackMethod</span><br><span class=\"line\">MyClass::myCallbackMethod</span><br><span class=\"line\">MyClass::myCallbackMethod</span><br><span class=\"line\">__invoke</span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.结论:</p>\n<ul>\n<li>a.传递函数:传函数的名字字符串</li>\n<li>b.静态方法的传递: 1使用字符串 2使用array 3可使用call_user_func(array(‘B’,’parent::methodname’))</li>\n<li>c.成员方法的传递: 使用array($obj,str $method)</li>\n<li>d.闭包传递:直接传闭包</li>\n</ul>\n</li>\n<li><p>3.<a href=\"http://php.net/manual/zh/language.types.callable.php/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n</li>\n</ul>\n<h3 id=\"Closure-闭包\"><a href=\"#Closure-闭包\" class=\"headerlink\" title=\"Closure 闭包\"></a>Closure 闭包</h3><ul>\n<li>1.Closure::bind($closure,$newObj [, $scope = ‘static’]);        </li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>       </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_m1 = <span class=\"string\">'m1'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $m2 = <span class=\"string\">'m2'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $m3 = <span class=\"string\">'m3'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_m4 = <span class=\"string\">'m4'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$f1 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    var_dump(<span class=\"keyword\">$this</span>-&gt;_m1);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$f2 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    var_dump(<span class=\"keyword\">$this</span>-&gt;m2);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$f3 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    var_dump(<span class=\"keyword\">self</span>::$m3);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$f4 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    var_dump(<span class=\"keyword\">static</span>::$_m4);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$f5 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    var_dump(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">    var_dump(A::$m3);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$c1 = Closure::bind($f1,<span class=\"keyword\">new</span> A(),A::class);</span><br><span class=\"line\">$c2 = Closure::bind($f2,<span class=\"keyword\">new</span> A());</span><br><span class=\"line\">$c3 = Closure::bind($f3,<span class=\"keyword\">new</span> A(),A::class);</span><br><span class=\"line\">$c4 = Closure::bind($f4,<span class=\"keyword\">null</span>,<span class=\"keyword\">new</span> A);</span><br><span class=\"line\">$c5 = Closure::bind($f5,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">$c1();</span><br><span class=\"line\">call_user_func($c2);</span><br><span class=\"line\">$c3();</span><br><span class=\"line\">call_user_func($c4);</span><br><span class=\"line\">$c5();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string(<span class=\"number\">2</span>) <span class=\"string\">\"m1\"</span> </span><br><span class=\"line\">string(<span class=\"number\">2</span>) <span class=\"string\">\"m2\"</span> </span><br><span class=\"line\">string(<span class=\"number\">2</span>) <span class=\"string\">\"m3\"</span> </span><br><span class=\"line\">string(<span class=\"number\">2</span>) <span class=\"string\">\"m4\"</span> </span><br><span class=\"line\">string(<span class=\"number\">5</span>) <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">string(<span class=\"number\">2</span>) <span class=\"string\">\"m3\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.结论:</p>\n<ul>\n<li>a.参数意思: 1 closure 表示传入一个闭包 ,2 $newthis 这个闭包绑定在那个对象上面(可以为null) 3 $scope闭包的作用域,不传为’static’表示当前环境,new A() 和 ‘A’ 和A::class 意思一样表示在A里面</li>\n<li>b.$c1 ,$c2 : 因为$f1中使用了$_m1是私有变量,因此在第三参数需要在A里面,所以$c1,$c2的第三参数不同</li>\n<li>c.$c3,$4,$5 :由于是静态调用,因此第二个参数可以为null,而c3,c4中使用了self和static,所以需要指定$scope来指明谁是self和static,而$f5中A::$m3在外部也可以调用,因此第三个参数为’static’,如果是A::$_m4则不能调用成功</li>\n</ul>\n</li>\n<li>3.<a href=\"http://php.net/manual/zh/closure.bind.php/\" target=\"_blank\" rel=\"noopener\">reference</a></li>\n</ul>\n<h3 id=\"spl-autoload\"><a href=\"#spl-autoload\" class=\"headerlink\" title=\"spl_autoload\"></a>spl_autoload</h3><ul>\n<li><p>1.例子</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">my_autoload</span><span class=\"params\">($class)</span></span>&#123;</span><br><span class=\"line\">    var_dump($class);</span><br><span class=\"line\">    var_dump(<span class=\"string\">\"my_autoload\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ret = spl_autoload_register(<span class=\"string\">'my_autoload'</span>);</span><br><span class=\"line\">var_dump(spl_autoload_functions());</span><br><span class=\"line\">$a = <span class=\"keyword\">new</span> DDD();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">1</span>) &#123; [<span class=\"number\">0</span>]=&gt; string(<span class=\"number\">11</span>) <span class=\"string\">\"my_autoload\"</span> &#125; string(<span class=\"number\">3</span>) <span class=\"string\">\"DDD\"</span> string(<span class=\"number\">11</span>) <span class=\"string\">\"my_autoload\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.结论:</p>\n<ul>\n<li>a.new 一个对象的时候 会先调用spl_autolad_register中注册的函数,最后找不到报了个错误</li>\n</ul>\n</li>\n<li><p>3.<a href=\"http://php.net/manual/zh/function.spl-autoload.php/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n</li>\n</ul>\n<h3 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection\"></a>Reflection</h3><ul>\n<li>1.先看一些例子 大致了ReflectionClass , ReflectionMethod ,ReflectionParams 等等</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(B $b , C $c)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(D $d)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#reflectionclass </span></span><br><span class=\"line\">$class = <span class=\"keyword\">new</span> ReflectionClass(A::class);</span><br><span class=\"line\">var_dump($class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#reflectionmethod 不存在构造方法返回null 本身没有但是父类有也算有</span></span><br><span class=\"line\">$constructor = $class-&gt;getConstructor();</span><br><span class=\"line\">var_dump($constructor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#reflectionparams 组成的array</span></span><br><span class=\"line\">$params = $constructor-&gt;getParameters();</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($params);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($params <span class=\"keyword\">as</span> $param) &#123;</span><br><span class=\"line\">    var_dump($param-&gt;getClass());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object(ReflectionClass)<span class=\"comment\">#1 (1) &#123; [\"name\"]=&gt; string(1) \"A\" &#125; </span></span><br><span class=\"line\">object(ReflectionMethod)<span class=\"comment\">#2 (2) &#123; [\"name\"]=&gt; string(11) \"__construct\" [\"class\"]=&gt; string(1) \"A\" &#125; </span></span><br><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">2</span>) &#123; [<span class=\"number\">0</span>]=&gt; object(ReflectionParameter)<span class=\"comment\">#3 (1) &#123; [\"name\"]=&gt; string(1) \"b\" &#125; [1]=&gt; object(ReflectionParameter)#4 (1) &#123; [\"name\"]=&gt; string(1) \"c\" &#125; &#125; </span></span><br><span class=\"line\">object(ReflectionClass)<span class=\"comment\">#5 (1) &#123; [\"name\"]=&gt; string(1) \"B\" &#125;</span></span><br><span class=\"line\">object(ReflectionClass)<span class=\"comment\">#5 (1) &#123; [\"name\"]=&gt; string(1) \"C\" &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.再看一个厉害一点的例子</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Build</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $buildStack = [];</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $with = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make</span><span class=\"params\">($class)</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;buildStack[] = $class;</span><br><span class=\"line\">        </span><br><span class=\"line\">        $reflectionCalss = <span class=\"keyword\">new</span> ReflectionClass($class);</span><br><span class=\"line\">        </span><br><span class=\"line\">        $constructor = $reflectionCalss-&gt;getConstructor();</span><br><span class=\"line\">        <span class=\"comment\">#递归终点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_null($constructor)) &#123;</span><br><span class=\"line\">           array_pop(<span class=\"keyword\">$this</span>-&gt;buildStack);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> $reflectionCalss-&gt;newInstance();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">#处理递归</span></span><br><span class=\"line\">        $params = $constructor-&gt;getParameters();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($params <span class=\"keyword\">as</span> $param) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;with[$class][] = <span class=\"keyword\">$this</span>-&gt;make($param-&gt;getClass()-&gt;name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        $args = array_pop(<span class=\"keyword\">$this</span>-&gt;with);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> $reflectionCalss-&gt;newInstanceArgs($args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$build = <span class=\"keyword\">new</span> Build;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($build-&gt;make(A::class));</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object(A)<span class=\"comment\">#11 (0) &#123; &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3说明:</p>\n<ul>\n<li>a.正常实例化A需要实例话B,C,而实例化C之前需要实例化D… 等等! 这个只是个简单的例子,实际中的情况更复杂…一个依赖另外一个.所以我们需要简单的方式来实例化A</li>\n<li>b.有什么好的方式? 因为构造方法里面记录了它自己依赖的类,我们可以通过反射来获取这个类,并实例化,然后当作参数传给他.</li>\n<li>c.如何具体实现? 其实是一个递归! 递归的终点是没有依赖,即自己没有构造方法.直接实例化返回,递归的思路是利用实例化好的参数实例化当前对象.</li>\n<li>d.有什么值得学习的技巧? 利用buildStack成员记录当前正在实例化的对象保证实例化顺序不会错.利用with记录实例化该对象所需要的参数保证参数不会错</li>\n<li>e.代码有点眼熟? 是啊,最近看了laravel启动时候Container中的代码.然后模仿写的…哈哈哈.</li>\n</ul>\n</li>\n<li><p>4.<a href=\"http://php.net/manual/zh/class.reflectionclass.php/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n</li>\n</ul>\n<h3 id=\"declare\"><a href=\"#declare\" class=\"headerlink\" title=\"declare\"></a>declare</h3><p>有三个地方用到了declare语句:ticks, encoding, strict  </p>\n<ul>\n<li><p>1.ticks(时钟周期):</p>\n<ul>\n<li><p>在declare代码段中解释器每执行N(用declare(ticks=N)指定)条可计时的低级语言就会发生的事件.事件有register_tick_function()来指定 . </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span>(ticks=<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A function called on each tick event</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tick_handler</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"tick_handler() called\\n\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">register_tick_function(<span class=\"string\">'tick_handler'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($a &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    $a += <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">print</span>($a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用来检查pcntl_signal()使用ticks作为信号处理的回调机制</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//使用ticks需要PHP 4.3.0以上版本</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span>(ticks = <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//信号处理函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sig_handler</span><span class=\"params\">($signo)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">switch</span> ($signo) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> SIGTERM:</span><br><span class=\"line\">             <span class=\"comment\">// 处理SIGTERM信号</span></span><br><span class=\"line\">             <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> SIGHUP:</span><br><span class=\"line\">             <span class=\"comment\">//处理SIGHUP信号</span></span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> SIGUSR1:</span><br><span class=\"line\">             <span class=\"keyword\">echo</span> <span class=\"string\">\"Caught SIGUSR1...\\n\"</span>;</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">             <span class=\"comment\">// 处理所有其他信号</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Installing signal handler...\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//安装信号处理器</span></span><br><span class=\"line\">pcntl_signal(SIGTERM, <span class=\"string\">\"sig_handler\"</span>);</span><br><span class=\"line\">pcntl_signal(SIGHUP,  <span class=\"string\">\"sig_handler\"</span>);</span><br><span class=\"line\">pcntl_signal(SIGUSR1, <span class=\"string\">\"sig_handler\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者在PHP 4.3.0以上版本可以使用对象方法</span></span><br><span class=\"line\"><span class=\"comment\">// pcntl_signal(SIGUSR1, array($obj, \"do_something\");</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Generating signal SIGTERM to self...\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//向当前进程发送SIGUSR1信号</span></span><br><span class=\"line\">posix_kill(posix_getpid(), SIGUSR1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Done\\n\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>2.encoding: 用encoding指令来对每段脚本指定其编码方式</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span>(encoding=<span class=\"string\">'ISO-8859-1'</span>);</span><br><span class=\"line\"><span class=\"comment\">// code here</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.strict:用于strict_types</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span>(strict_types=<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span><span class=\"params\">(int $a, int $b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $a + $b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">var_dump(sum(<span class=\"number\">1.5</span>, <span class=\"number\">2.5</span>)); <span class=\"comment\">//Uncaught TypeError</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.<a href=\"http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"pcntl\"><a href=\"#pcntl\" class=\"headerlink\" title=\"pcntl\"></a>pcntl</h3><p>php进程控制扩展支持实现了Unix方式的进程创建, 程序执行, 信号处理以及进程的中断。</p>\n<ul>\n<li>1.注意事项<ul>\n<li>不能被应用在web服务器环境</li>\n<li>在Windows平台不可用</li>\n</ul>\n</li>\n<li><p>2.一些常用的函数</p>\n<ul>\n<li>pcntl_fork() </li>\n<li>pcntl_wait()</li>\n<li>pcntl_signal()</li>\n<li>pcntl_exec()<ul>\n<li>3.例子<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ret  = pcntl_fork();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"string\">'fork error'</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">elseif</span> ($ret == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span>(<span class=\"string\">'I am the child'</span>);</span><br><span class=\"line\">    pcntl_exec(<span class=\"string\">'/bin/ls'</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $ret;</span><br><span class=\"line\">    pcntl_wait($status);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $status;</span><br><span class=\"line\">    sleep(<span class=\"number\">60</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.<a href=\"http://php.net/manual/zh/ref.pcntl.php/\" target=\"_blank\" rel=\"noopener\">reference</a></p>\n</li>\n</ul>\n<h3 id=\"posix\"><a href=\"#posix\" class=\"headerlink\" title=\"posix\"></a>posix</h3><p> This module contains an interface to those functions defined in the IEEE 1003.1 (POSIX.1) standards document which are not accessible through other means.</p>\n<ul>\n<li>1.注意事项. <ul>\n<li>windows 下不能用</li>\n</ul>\n</li>\n<li>2.常用函数<ul>\n<li>posix_getpid()</li>\n<li>posix_kill()</li>\n<li>posix_mkfifo()</li>\n</ul>\n</li>\n<li>3.<a href=\"http://php.net/manual/zh/book.posix.php/\" target=\"_blank\" rel=\"noopener\">reference</a></li>\n</ul>"},{"title":"一些排序算法","date":"2018-07-27T09:33:52.000Z","_content":"\n之前总是刻意去记住写法,现在换一个思路. 按照自己的理解用`php`实现.\n\n<!-- more -->\n\n### 目录\n* [冒泡排序](./一些排序算法.md#冒泡排序/)\n* [选择排序](./一些排序算法.md#选择排序/)\n* [插入排序](./一些排序算法.md#插入排序/)\n* [归并排序](./一些排序算法.md#归并排序/)\n* [快排](./一些排序算法.md#快排/)\n* [堆排序](./一些排序算法.md#堆排序/)\n\n### 冒泡排序\n* 总是记不住两层for循环里面的下标? 等等! 冒泡法不就是两两比较,然后找到最大一个或者最小的一个数吗?那在一个数组里面找最大如何实现?\n```php\n <?php\n \n $array = array(6,5,3,1,8,7,2,4);\n   \n function bubbleSort($array){\n     while ($array) {\n         find_max($array);\n         $ret[]  = array_pop($array);\n     }\n     return $ret;\n }\n \n #找最大,把最大的排到最后面\n function find_max(&$array){\n     for ($i=0; $i < sizeof($array) -1; $i++) { \n         if ($array[$i] > $array[$i+1]) {\n             $tmp = $array[$i];\n             $array[$i] = $array[$i+1];\n             $array[$i+1] = $tmp;\n         }\n     }   \n }\n \n var_dump(bubbleSort($array));  \n```\n* 输出:\n```php\narray(8) { [0]=> int(8) [1]=> int(7) [2]=> int(6) [3]=> int(5) [4]=> int(4) [5]=> int(3) [6]=> int(2) [7]=> int(1) }\n```\n* 结论:\n  \n  * 双重循环下标总是傻傻分不清,那就按照自己的理解去实现吧!\n\n\n### 选择排序\n* 选择排序即选择最大或者最小元素的下标.之前也是记的,用双重循环,下标也容易搞错.\n```php\n<?php\n\n$array = array(6,5,3,1,8,7,2,4);\n\nfunction selectSort($array){\n    while ($array) {\n        $idx = selectMax($array);\n        $ret[] = $array[$idx];\n        array_splice($array, $idx,1);\n     }\n     return $ret;\n}\n\nfunction selectMax($array){\n    $maxIdx = 0;\n    for ($i=1; $i <sizeof($array) ; $i++) { \n        if ($array[$maxIdx] < $array[$i]) {\n            $maxIdx = $i;\n        }\n    }\n    return $maxIdx;\n}\n\nvar_dump(selectSort($array));\n```\n\n* 输出:\n```php\narray(8) { [0]=> int(8) [1]=> int(7) [2]=> int(6) [3]=> int(5) [4]=> int(4) [5]=> int(3) [6]=> int(2) [7]=> int(1) }\n```\n* 结论:\n\n  * 和冒泡排序差别:冒泡排序两两交换,把最大/小的冒出来.而选择排序没有交换,只记录了最大/小的位置\n\n\n### 插入排序\n* 想象一下把一个数字插入到一个有序数组里面,整个数组的插入排序,就是不断把数组中元素取出来,往另外一个数组插入的过程\n```php\n<?php\n\n$array = array(6,5,3,1,8,7,2,4);\n\nfunction insertionSort($array){\n    while ($array) {\n        $needle = array_pop($array);\n        insert($needle,$ret);\n    }\n    return $ret;\n}\n\nfunction insert($needle,&$haystack){\n    for ($i=0; $i <sizeof($haystack) ; $i++) { \n        if ($needle > $haystack[$i]) {\n            break;\n        }\n    }\n\n    for ($j=sizeof($haystack); $j >$i ; $j--) { \n        $haystack[$j] = $haystack[$j-1]; \n    }\n\n    $haystack[$i] =$needle;\n}\n\nvar_dump(insertionSort($array));\n```\n* 输出:\n```php\narray(8) { [0]=> int(8) [1]=> int(7) [2]=> int(6) [3]=> int(5) [4]=> int(4) [5]=> int(3) [6]=> int(2) [7]=> int(1) }\n```\n* 结论:\n\n  * 把看起来很杂乱的工作抽象出来,封装成一个方法,使思路更加清晰\n\n### 归并排序\n* 归并排序采用的是分治算法.分的过程是递归的过程,并的过程是把两个有序数组合并成一个数组的过程\n```php\n<?php\n$array = array(6, 5, 3, 1, 8, 7, 2, 4);\n\nfunction mergeSort($array)\n{\n    if (sizeof($array) <= 1) {\n        return $array;\n    }\n\n    $mid = intval(sizeof($array) / 2);\n    $left = mergeSort(array_slice($array, 0, $mid));\n    $right = mergeSort(array_slice($array, $mid));\n    return merge($left, $right);\n}\n\nfunction merge($left, $right)\n{\n    $i = $j = 0;\n    while ($i < sizeof($left) && $j < sizeof($right)) {\n        if ($left[$i] > $right[$j]) {\n            $ret[] = $left[$i];\n            $i++;\n        } else {\n            $ret[] = $right[$j];\n            $j++;\n        }\n    }\n\n    if ($i == sizeof($left)) {\n        for ($k = $j; $k < sizeof($right); $k++) {\n            $ret[] = $right[$k];\n        }\n    }\n\n    if ($j == sizeof($right)) {\n        for ($k = $i; $k < sizeof($left); $k++) {\n            $ret[] = $left[$k];\n        }\n    }\n    return $ret;\n}\n\nvar_dump(mergeSort($array));        \n```\n* 输出:\n```php\narray(8) { [0]=> int(8) [1]=> int(7) [2]=> int(6) [3]=> int(5) [4]=> int(4) [5]=> int(3) [6]=> int(2) [7]=> int(1) }\n```\n* 结论:\n\n  * 递归思路:考虑递归终点,考虑在第i次条件成立的情况下如何得到第i+1次的结果\n\n### 快排\n* 选一个数,把比他大的放到左边,比他小的放在右边,然后递归进行下去\n```php       \n<?php\n$array = array(6, 5, 3, 1, 8, 7, 2, 4);\n\nfunction quickSort($array)\n{\n    if (sizeof($array) <= 1) {\n        return $array;\n    }\n    $pivot = array_pop($array);\n    foreach ($array as $item) {\n        if ($item > $pivot) {\n            $left[] = $item;\n        } else {\n            $right[] = $item;\n        }\n    }\n    return array_merge((array) quickSort($left), (array) $pivot, (array) quickSort($right));\n}\n\nvar_dump(quickSort($array));  \n```\n* 输出:\n```php\narray(8) { [0]=> int(8) [1]=> int(7) [2]=> int(6) [3]=> int(5) [4]=> int(4) [5]=> int(3) [6]=> int(2) [7]=> int(1) }\n```\n* 结论:\n\n  * 也是用到了递归\n\n### 堆排序\n* 利用堆的性质进行排序.以大顶堆为例,父节点大于等于子节点,由此可知根节点为最大值.是完全二叉树,父节点索引为i,则子节点索引为2i+1 和2i+2.根据这两个特性写出堆排序的算法\n\n* 给出两个版本:\n  * 1 \n```php\n<?php\n\n$array = array(6, 5, 3, 1, 8, 7, 2, 4);\n\nfunction heapSort($array)\n{\n    while ($array) {\n        buildHeap($array);\n        $ret[] = array_shift($array);\n    }\n    return $ret;\n}\n\n# 构建一个堆\nfunction buildHeap(&$array){\n    $firstParent = $i = floor(sizeof($array) /2 ) -1;\n    while ($i >=0) {\n        ajustHeap($array,$i);\n        $i--;\n    }\n}\n\n# 交换节点 i 使其满足堆的特性\nfunction ajustHeap(&$array,$i)\n{\n    if ($array[2 * $i + 1] < $array[2 * $i + 2]) {\n        if ($array[$i] < $array[2 * $i + 2]) {\n            swap($array[$i], $array[2 * $i + 2]);\n        }\n    } else {\n        if ($array[$i] < $array[2 * $i + 1]) {\n            swap($array[$i], $array[2 * $i + 1]);\n        }\n    }\n}\n\nfunction swap(&$a, &$b)\n{\n    $tmp = $a;\n    $a = $b;\n    $b = $tmp;\n}\n\nvar_dump(heapSort($array));     \n```\n  * 2\n```php\n<?php\n  \n$array = array(6,5,3,1,8,7,2,4);\n\nfunction heapSort($array){\n    buildHeap($array);\n    while ($array) {\n        swap($array[0] , $array[sizeof($array) -1 ]);\n        $ret[] = array_pop($array);\n        adjust($array,0);\n    }\n    return $ret;\n}\n\n# 递归调整 根的位置可能不对的情况\nfunction adjust(&$array,$i){\n    $lastParent =  floor(sizeof($array) / 2) -1;\n    if( $i > $lastParent) {\n        return;\n    }\n    \n    if ($array[2 * $i + 1] < $array[2 * $i + 2]) {\n        if ($array[$i] < $array[2 * $i + 2]) {\n            swap($array[$i], $array[2 * $i + 2]);\n            adjust($array,2 * $i + 2);\n        }\n    } else {\n        if ($array[$i] < $array[2 * $i + 1]) {\n            swap($array[$i], $array[2 * $i + 1]);\n            adjust($array,2 * $i + 1);\n        }\n    }\n}\n\nfunction buildHeap(&$array){\n    $firstParent = $i =  floor(sizeof($array) / 2) -1;\n    while ($i >= 0) {\n        adjustHeap($array,$i);\n        $i --;      \n    }\n}\n\nfunction adjustHeap(&$array,$i)\n{\n    if ($array[2 * $i + 1] < $array[2 * $i + 2]) {\n        if ($array[$i] < $array[2 * $i + 2]) {\n            swap($array[$i], $array[2 * $i + 2]);\n        }\n    } else {\n        if ($array[$i] < $array[2 * $i + 1]) {\n            swap($array[$i], $array[2 * $i + 1]);\n        }\n    }\n}\n\nfunction swap(&$a, &$b)\n{\n    $tmp = $a;\n    $a = $b;\n    $b = $tmp;\n}\n\nvar_dump(heapSort($array));     \n```\n* 结论:\n\n  * 方法1:直接构建一个堆,取出最大元素,然后将后面的元素重新构建一个堆.思路清晰,但是发现每次建堆的时候都会遍历所有的父节点, n/2 -1 , (n-1)/2 -1 ,... , 所有加起来应该就是O(n^2)\n  * 方法2:先采用方法1建立一个大顶堆, 然后把顶和最后一个元素交换弹出最后一个元素,这样交换并没有改变堆其他元素的相对位置,所以只需要把最顶上的元素依次向下调整即可\n  * 调整思路:利用递归,把根的位置和左边或者右边孩子交换,则以这个孩子为根的子树又变成了刚才的情况,而递归的终点则是这个节点已经没有孩子了.显然这样调整最多也就调整了树的高度的次数,所以应该是O(nlogn)\n","source":"_posts/一些排序算法.md","raw":"---\ntitle: 一些排序算法\ndate: 2018-07-27 17:33:52\ntags:\n- 排序\n- php\ncategories:\n- 数据结构与算法\n---\n\n之前总是刻意去记住写法,现在换一个思路. 按照自己的理解用`php`实现.\n\n<!-- more -->\n\n### 目录\n* [冒泡排序](./一些排序算法.md#冒泡排序/)\n* [选择排序](./一些排序算法.md#选择排序/)\n* [插入排序](./一些排序算法.md#插入排序/)\n* [归并排序](./一些排序算法.md#归并排序/)\n* [快排](./一些排序算法.md#快排/)\n* [堆排序](./一些排序算法.md#堆排序/)\n\n### 冒泡排序\n* 总是记不住两层for循环里面的下标? 等等! 冒泡法不就是两两比较,然后找到最大一个或者最小的一个数吗?那在一个数组里面找最大如何实现?\n```php\n <?php\n \n $array = array(6,5,3,1,8,7,2,4);\n   \n function bubbleSort($array){\n     while ($array) {\n         find_max($array);\n         $ret[]  = array_pop($array);\n     }\n     return $ret;\n }\n \n #找最大,把最大的排到最后面\n function find_max(&$array){\n     for ($i=0; $i < sizeof($array) -1; $i++) { \n         if ($array[$i] > $array[$i+1]) {\n             $tmp = $array[$i];\n             $array[$i] = $array[$i+1];\n             $array[$i+1] = $tmp;\n         }\n     }   \n }\n \n var_dump(bubbleSort($array));  \n```\n* 输出:\n```php\narray(8) { [0]=> int(8) [1]=> int(7) [2]=> int(6) [3]=> int(5) [4]=> int(4) [5]=> int(3) [6]=> int(2) [7]=> int(1) }\n```\n* 结论:\n  \n  * 双重循环下标总是傻傻分不清,那就按照自己的理解去实现吧!\n\n\n### 选择排序\n* 选择排序即选择最大或者最小元素的下标.之前也是记的,用双重循环,下标也容易搞错.\n```php\n<?php\n\n$array = array(6,5,3,1,8,7,2,4);\n\nfunction selectSort($array){\n    while ($array) {\n        $idx = selectMax($array);\n        $ret[] = $array[$idx];\n        array_splice($array, $idx,1);\n     }\n     return $ret;\n}\n\nfunction selectMax($array){\n    $maxIdx = 0;\n    for ($i=1; $i <sizeof($array) ; $i++) { \n        if ($array[$maxIdx] < $array[$i]) {\n            $maxIdx = $i;\n        }\n    }\n    return $maxIdx;\n}\n\nvar_dump(selectSort($array));\n```\n\n* 输出:\n```php\narray(8) { [0]=> int(8) [1]=> int(7) [2]=> int(6) [3]=> int(5) [4]=> int(4) [5]=> int(3) [6]=> int(2) [7]=> int(1) }\n```\n* 结论:\n\n  * 和冒泡排序差别:冒泡排序两两交换,把最大/小的冒出来.而选择排序没有交换,只记录了最大/小的位置\n\n\n### 插入排序\n* 想象一下把一个数字插入到一个有序数组里面,整个数组的插入排序,就是不断把数组中元素取出来,往另外一个数组插入的过程\n```php\n<?php\n\n$array = array(6,5,3,1,8,7,2,4);\n\nfunction insertionSort($array){\n    while ($array) {\n        $needle = array_pop($array);\n        insert($needle,$ret);\n    }\n    return $ret;\n}\n\nfunction insert($needle,&$haystack){\n    for ($i=0; $i <sizeof($haystack) ; $i++) { \n        if ($needle > $haystack[$i]) {\n            break;\n        }\n    }\n\n    for ($j=sizeof($haystack); $j >$i ; $j--) { \n        $haystack[$j] = $haystack[$j-1]; \n    }\n\n    $haystack[$i] =$needle;\n}\n\nvar_dump(insertionSort($array));\n```\n* 输出:\n```php\narray(8) { [0]=> int(8) [1]=> int(7) [2]=> int(6) [3]=> int(5) [4]=> int(4) [5]=> int(3) [6]=> int(2) [7]=> int(1) }\n```\n* 结论:\n\n  * 把看起来很杂乱的工作抽象出来,封装成一个方法,使思路更加清晰\n\n### 归并排序\n* 归并排序采用的是分治算法.分的过程是递归的过程,并的过程是把两个有序数组合并成一个数组的过程\n```php\n<?php\n$array = array(6, 5, 3, 1, 8, 7, 2, 4);\n\nfunction mergeSort($array)\n{\n    if (sizeof($array) <= 1) {\n        return $array;\n    }\n\n    $mid = intval(sizeof($array) / 2);\n    $left = mergeSort(array_slice($array, 0, $mid));\n    $right = mergeSort(array_slice($array, $mid));\n    return merge($left, $right);\n}\n\nfunction merge($left, $right)\n{\n    $i = $j = 0;\n    while ($i < sizeof($left) && $j < sizeof($right)) {\n        if ($left[$i] > $right[$j]) {\n            $ret[] = $left[$i];\n            $i++;\n        } else {\n            $ret[] = $right[$j];\n            $j++;\n        }\n    }\n\n    if ($i == sizeof($left)) {\n        for ($k = $j; $k < sizeof($right); $k++) {\n            $ret[] = $right[$k];\n        }\n    }\n\n    if ($j == sizeof($right)) {\n        for ($k = $i; $k < sizeof($left); $k++) {\n            $ret[] = $left[$k];\n        }\n    }\n    return $ret;\n}\n\nvar_dump(mergeSort($array));        \n```\n* 输出:\n```php\narray(8) { [0]=> int(8) [1]=> int(7) [2]=> int(6) [3]=> int(5) [4]=> int(4) [5]=> int(3) [6]=> int(2) [7]=> int(1) }\n```\n* 结论:\n\n  * 递归思路:考虑递归终点,考虑在第i次条件成立的情况下如何得到第i+1次的结果\n\n### 快排\n* 选一个数,把比他大的放到左边,比他小的放在右边,然后递归进行下去\n```php       \n<?php\n$array = array(6, 5, 3, 1, 8, 7, 2, 4);\n\nfunction quickSort($array)\n{\n    if (sizeof($array) <= 1) {\n        return $array;\n    }\n    $pivot = array_pop($array);\n    foreach ($array as $item) {\n        if ($item > $pivot) {\n            $left[] = $item;\n        } else {\n            $right[] = $item;\n        }\n    }\n    return array_merge((array) quickSort($left), (array) $pivot, (array) quickSort($right));\n}\n\nvar_dump(quickSort($array));  \n```\n* 输出:\n```php\narray(8) { [0]=> int(8) [1]=> int(7) [2]=> int(6) [3]=> int(5) [4]=> int(4) [5]=> int(3) [6]=> int(2) [7]=> int(1) }\n```\n* 结论:\n\n  * 也是用到了递归\n\n### 堆排序\n* 利用堆的性质进行排序.以大顶堆为例,父节点大于等于子节点,由此可知根节点为最大值.是完全二叉树,父节点索引为i,则子节点索引为2i+1 和2i+2.根据这两个特性写出堆排序的算法\n\n* 给出两个版本:\n  * 1 \n```php\n<?php\n\n$array = array(6, 5, 3, 1, 8, 7, 2, 4);\n\nfunction heapSort($array)\n{\n    while ($array) {\n        buildHeap($array);\n        $ret[] = array_shift($array);\n    }\n    return $ret;\n}\n\n# 构建一个堆\nfunction buildHeap(&$array){\n    $firstParent = $i = floor(sizeof($array) /2 ) -1;\n    while ($i >=0) {\n        ajustHeap($array,$i);\n        $i--;\n    }\n}\n\n# 交换节点 i 使其满足堆的特性\nfunction ajustHeap(&$array,$i)\n{\n    if ($array[2 * $i + 1] < $array[2 * $i + 2]) {\n        if ($array[$i] < $array[2 * $i + 2]) {\n            swap($array[$i], $array[2 * $i + 2]);\n        }\n    } else {\n        if ($array[$i] < $array[2 * $i + 1]) {\n            swap($array[$i], $array[2 * $i + 1]);\n        }\n    }\n}\n\nfunction swap(&$a, &$b)\n{\n    $tmp = $a;\n    $a = $b;\n    $b = $tmp;\n}\n\nvar_dump(heapSort($array));     \n```\n  * 2\n```php\n<?php\n  \n$array = array(6,5,3,1,8,7,2,4);\n\nfunction heapSort($array){\n    buildHeap($array);\n    while ($array) {\n        swap($array[0] , $array[sizeof($array) -1 ]);\n        $ret[] = array_pop($array);\n        adjust($array,0);\n    }\n    return $ret;\n}\n\n# 递归调整 根的位置可能不对的情况\nfunction adjust(&$array,$i){\n    $lastParent =  floor(sizeof($array) / 2) -1;\n    if( $i > $lastParent) {\n        return;\n    }\n    \n    if ($array[2 * $i + 1] < $array[2 * $i + 2]) {\n        if ($array[$i] < $array[2 * $i + 2]) {\n            swap($array[$i], $array[2 * $i + 2]);\n            adjust($array,2 * $i + 2);\n        }\n    } else {\n        if ($array[$i] < $array[2 * $i + 1]) {\n            swap($array[$i], $array[2 * $i + 1]);\n            adjust($array,2 * $i + 1);\n        }\n    }\n}\n\nfunction buildHeap(&$array){\n    $firstParent = $i =  floor(sizeof($array) / 2) -1;\n    while ($i >= 0) {\n        adjustHeap($array,$i);\n        $i --;      \n    }\n}\n\nfunction adjustHeap(&$array,$i)\n{\n    if ($array[2 * $i + 1] < $array[2 * $i + 2]) {\n        if ($array[$i] < $array[2 * $i + 2]) {\n            swap($array[$i], $array[2 * $i + 2]);\n        }\n    } else {\n        if ($array[$i] < $array[2 * $i + 1]) {\n            swap($array[$i], $array[2 * $i + 1]);\n        }\n    }\n}\n\nfunction swap(&$a, &$b)\n{\n    $tmp = $a;\n    $a = $b;\n    $b = $tmp;\n}\n\nvar_dump(heapSort($array));     \n```\n* 结论:\n\n  * 方法1:直接构建一个堆,取出最大元素,然后将后面的元素重新构建一个堆.思路清晰,但是发现每次建堆的时候都会遍历所有的父节点, n/2 -1 , (n-1)/2 -1 ,... , 所有加起来应该就是O(n^2)\n  * 方法2:先采用方法1建立一个大顶堆, 然后把顶和最后一个元素交换弹出最后一个元素,这样交换并没有改变堆其他元素的相对位置,所以只需要把最顶上的元素依次向下调整即可\n  * 调整思路:利用递归,把根的位置和左边或者右边孩子交换,则以这个孩子为根的子树又变成了刚才的情况,而递归的终点则是这个节点已经没有孩子了.显然这样调整最多也就调整了树的高度的次数,所以应该是O(nlogn)\n","slug":"一些排序算法","published":1,"updated":"2019-01-12T16:26:25.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqvpvhgv0034zbovcr1c3aql","content":"<p>之前总是刻意去记住写法,现在换一个思路. 按照自己的理解用<code>php</code>实现.</p>\n<a id=\"more\"></a>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"./一些排序算法.md#冒泡排序/\">冒泡排序</a></li>\n<li><a href=\"./一些排序算法.md#选择排序/\">选择排序</a></li>\n<li><a href=\"./一些排序算法.md#插入排序/\">插入排序</a></li>\n<li><a href=\"./一些排序算法.md#归并排序/\">归并排序</a></li>\n<li><a href=\"./一些排序算法.md#快排/\">快排</a></li>\n<li><a href=\"./一些排序算法.md#堆排序/\">堆排序</a></li>\n</ul>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><ul>\n<li><p>总是记不住两层for循环里面的下标? 等等! 冒泡法不就是两两比较,然后找到最大一个或者最小的一个数吗?那在一个数组里面找最大如何实现?</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span><span class=\"params\">($array)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($array) &#123;</span><br><span class=\"line\">        find_max($array);</span><br><span class=\"line\">        $ret[]  = array_pop($array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#找最大,把最大的排到最后面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find_max</span><span class=\"params\">(&amp;$array)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i &lt; sizeof($array) <span class=\"number\">-1</span>; $i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &gt; $array[$i+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            $tmp = $array[$i];</span><br><span class=\"line\">            $array[$i] = $array[$i+<span class=\"number\">1</span>];</span><br><span class=\"line\">            $array[$i+<span class=\"number\">1</span>] = $tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(bubbleSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">8</span>) &#123; [<span class=\"number\">0</span>]=&gt; int(<span class=\"number\">8</span>) [<span class=\"number\">1</span>]=&gt; int(<span class=\"number\">7</span>) [<span class=\"number\">2</span>]=&gt; int(<span class=\"number\">6</span>) [<span class=\"number\">3</span>]=&gt; int(<span class=\"number\">5</span>) [<span class=\"number\">4</span>]=&gt; int(<span class=\"number\">4</span>) [<span class=\"number\">5</span>]=&gt; int(<span class=\"number\">3</span>) [<span class=\"number\">6</span>]=&gt; int(<span class=\"number\">2</span>) [<span class=\"number\">7</span>]=&gt; int(<span class=\"number\">1</span>) &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论:</p>\n<ul>\n<li>双重循环下标总是傻傻分不清,那就按照自己的理解去实现吧!</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><ul>\n<li><p>选择排序即选择最大或者最小元素的下标.之前也是记的,用双重循环,下标也容易搞错.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectSort</span><span class=\"params\">($array)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($array) &#123;</span><br><span class=\"line\">        $idx = selectMax($array);</span><br><span class=\"line\">        $ret[] = $array[$idx];</span><br><span class=\"line\">        array_splice($array, $idx,<span class=\"number\">1</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectMax</span><span class=\"params\">($array)</span></span>&#123;</span><br><span class=\"line\">    $maxIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i=<span class=\"number\">1</span>; $i &lt;sizeof($array) ; $i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$maxIdx] &lt; $array[$i]) &#123;</span><br><span class=\"line\">            $maxIdx = $i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $maxIdx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(selectSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">8</span>) &#123; [<span class=\"number\">0</span>]=&gt; int(<span class=\"number\">8</span>) [<span class=\"number\">1</span>]=&gt; int(<span class=\"number\">7</span>) [<span class=\"number\">2</span>]=&gt; int(<span class=\"number\">6</span>) [<span class=\"number\">3</span>]=&gt; int(<span class=\"number\">5</span>) [<span class=\"number\">4</span>]=&gt; int(<span class=\"number\">4</span>) [<span class=\"number\">5</span>]=&gt; int(<span class=\"number\">3</span>) [<span class=\"number\">6</span>]=&gt; int(<span class=\"number\">2</span>) [<span class=\"number\">7</span>]=&gt; int(<span class=\"number\">1</span>) &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论:</p>\n<ul>\n<li>和冒泡排序差别:冒泡排序两两交换,把最大/小的冒出来.而选择排序没有交换,只记录了最大/小的位置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><ul>\n<li><p>想象一下把一个数字插入到一个有序数组里面,整个数组的插入排序,就是不断把数组中元素取出来,往另外一个数组插入的过程</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span><span class=\"params\">($array)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($array) &#123;</span><br><span class=\"line\">        $needle = array_pop($array);</span><br><span class=\"line\">        insert($needle,$ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span><span class=\"params\">($needle,&amp;$haystack)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i &lt;sizeof($haystack) ; $i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($needle &gt; $haystack[$i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($j=sizeof($haystack); $j &gt;$i ; $j--) &#123; </span><br><span class=\"line\">        $haystack[$j] = $haystack[$j<span class=\"number\">-1</span>]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $haystack[$i] =$needle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(insertionSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">8</span>) &#123; [<span class=\"number\">0</span>]=&gt; int(<span class=\"number\">8</span>) [<span class=\"number\">1</span>]=&gt; int(<span class=\"number\">7</span>) [<span class=\"number\">2</span>]=&gt; int(<span class=\"number\">6</span>) [<span class=\"number\">3</span>]=&gt; int(<span class=\"number\">5</span>) [<span class=\"number\">4</span>]=&gt; int(<span class=\"number\">4</span>) [<span class=\"number\">5</span>]=&gt; int(<span class=\"number\">3</span>) [<span class=\"number\">6</span>]=&gt; int(<span class=\"number\">2</span>) [<span class=\"number\">7</span>]=&gt; int(<span class=\"number\">1</span>) &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论:</p>\n<ul>\n<li>把看起来很杂乱的工作抽象出来,封装成一个方法,使思路更加清晰</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><ul>\n<li><p>归并排序采用的是分治算法.分的过程是递归的过程,并的过程是把两个有序数组合并成一个数组的过程</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span><span class=\"params\">($array)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sizeof($array) &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $mid = intval(sizeof($array) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    $left = mergeSort(array_slice($array, <span class=\"number\">0</span>, $mid));</span><br><span class=\"line\">    $right = mergeSort(array_slice($array, $mid));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge($left, $right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span><span class=\"params\">($left, $right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $i = $j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($i &lt; sizeof($left) &amp;&amp; $j &lt; sizeof($right)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($left[$i] &gt; $right[$j]) &#123;</span><br><span class=\"line\">            $ret[] = $left[$i];</span><br><span class=\"line\">            $i++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $ret[] = $right[$j];</span><br><span class=\"line\">            $j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($i == sizeof($left)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($k = $j; $k &lt; sizeof($right); $k++) &#123;</span><br><span class=\"line\">            $ret[] = $right[$k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($j == sizeof($right)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($k = $i; $k &lt; sizeof($left); $k++) &#123;</span><br><span class=\"line\">            $ret[] = $left[$k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(mergeSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">8</span>) &#123; [<span class=\"number\">0</span>]=&gt; int(<span class=\"number\">8</span>) [<span class=\"number\">1</span>]=&gt; int(<span class=\"number\">7</span>) [<span class=\"number\">2</span>]=&gt; int(<span class=\"number\">6</span>) [<span class=\"number\">3</span>]=&gt; int(<span class=\"number\">5</span>) [<span class=\"number\">4</span>]=&gt; int(<span class=\"number\">4</span>) [<span class=\"number\">5</span>]=&gt; int(<span class=\"number\">3</span>) [<span class=\"number\">6</span>]=&gt; int(<span class=\"number\">2</span>) [<span class=\"number\">7</span>]=&gt; int(<span class=\"number\">1</span>) &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论:</p>\n<ul>\n<li>递归思路:考虑递归终点,考虑在第i次条件成立的情况下如何得到第i+1次的结果</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h3><ul>\n<li><p>选一个数,把比他大的放到左边,比他小的放在右边,然后递归进行下去</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span><span class=\"params\">($array)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sizeof($array) &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $pivot = array_pop($array);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($array <span class=\"keyword\">as</span> $item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($item &gt; $pivot) &#123;</span><br><span class=\"line\">            $left[] = $item;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $right[] = $item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array_merge((<span class=\"keyword\">array</span>) quickSort($left), (<span class=\"keyword\">array</span>) $pivot, (<span class=\"keyword\">array</span>) quickSort($right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(quickSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">8</span>) &#123; [<span class=\"number\">0</span>]=&gt; int(<span class=\"number\">8</span>) [<span class=\"number\">1</span>]=&gt; int(<span class=\"number\">7</span>) [<span class=\"number\">2</span>]=&gt; int(<span class=\"number\">6</span>) [<span class=\"number\">3</span>]=&gt; int(<span class=\"number\">5</span>) [<span class=\"number\">4</span>]=&gt; int(<span class=\"number\">4</span>) [<span class=\"number\">5</span>]=&gt; int(<span class=\"number\">3</span>) [<span class=\"number\">6</span>]=&gt; int(<span class=\"number\">2</span>) [<span class=\"number\">7</span>]=&gt; int(<span class=\"number\">1</span>) &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论:</p>\n<ul>\n<li>也是用到了递归</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><ul>\n<li><p>利用堆的性质进行排序.以大顶堆为例,父节点大于等于子节点,由此可知根节点为最大值.是完全二叉树,父节点索引为i,则子节点索引为2i+1 和2i+2.根据这两个特性写出堆排序的算法</p>\n</li>\n<li><p>给出两个版本:</p>\n<ul>\n<li><p>1 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span><span class=\"params\">($array)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($array) &#123;</span><br><span class=\"line\">        buildHeap($array);</span><br><span class=\"line\">        $ret[] = array_shift($array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建一个堆</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildHeap</span><span class=\"params\">(&amp;$array)</span></span>&#123;</span><br><span class=\"line\">    $firstParent = $i = floor(sizeof($array) /<span class=\"number\">2</span> ) <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($i &gt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ajustHeap($array,$i);</span><br><span class=\"line\">        $i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 交换节点 i 使其满足堆的特性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajustHeap</span><span class=\"params\">(&amp;$array,$i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">            swap($array[$i], $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            swap($array[$i], $array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span><span class=\"params\">(&amp;$a, &amp;$b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $tmp = $a;</span><br><span class=\"line\">    $a = $b;</span><br><span class=\"line\">    $b = $tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(heapSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">  </span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span><span class=\"params\">($array)</span></span>&#123;</span><br><span class=\"line\">    buildHeap($array);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($array) &#123;</span><br><span class=\"line\">        swap($array[<span class=\"number\">0</span>] , $array[sizeof($array) <span class=\"number\">-1</span> ]);</span><br><span class=\"line\">        $ret[] = array_pop($array);</span><br><span class=\"line\">        adjust($array,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归调整 根的位置可能不对的情况</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">adjust</span><span class=\"params\">(&amp;$array,$i)</span></span>&#123;</span><br><span class=\"line\">    $lastParent =  floor(sizeof($array) / <span class=\"number\">2</span>) <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( $i &gt; $lastParent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">            swap($array[$i], $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]);</span><br><span class=\"line\">            adjust($array,<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            swap($array[$i], $array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">            adjust($array,<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildHeap</span><span class=\"params\">(&amp;$array)</span></span>&#123;</span><br><span class=\"line\">    $firstParent = $i =  floor(sizeof($array) / <span class=\"number\">2</span>) <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        adjustHeap($array,$i);</span><br><span class=\"line\">        $i --;      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">adjustHeap</span><span class=\"params\">(&amp;$array,$i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">            swap($array[$i], $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            swap($array[$i], $array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span><span class=\"params\">(&amp;$a, &amp;$b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $tmp = $a;</span><br><span class=\"line\">    $a = $b;</span><br><span class=\"line\">    $b = $tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(heapSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>结论:</p>\n<ul>\n<li>方法1:直接构建一个堆,取出最大元素,然后将后面的元素重新构建一个堆.思路清晰,但是发现每次建堆的时候都会遍历所有的父节点, n/2 -1 , (n-1)/2 -1 ,… , 所有加起来应该就是O(n^2)</li>\n<li>方法2:先采用方法1建立一个大顶堆, 然后把顶和最后一个元素交换弹出最后一个元素,这样交换并没有改变堆其他元素的相对位置,所以只需要把最顶上的元素依次向下调整即可</li>\n<li>调整思路:利用递归,把根的位置和左边或者右边孩子交换,则以这个孩子为根的子树又变成了刚才的情况,而递归的终点则是这个节点已经没有孩子了.显然这样调整最多也就调整了树的高度的次数,所以应该是O(nlogn)</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>之前总是刻意去记住写法,现在换一个思路. 按照自己的理解用<code>php</code>实现.</p>","more":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"./一些排序算法.md#冒泡排序/\">冒泡排序</a></li>\n<li><a href=\"./一些排序算法.md#选择排序/\">选择排序</a></li>\n<li><a href=\"./一些排序算法.md#插入排序/\">插入排序</a></li>\n<li><a href=\"./一些排序算法.md#归并排序/\">归并排序</a></li>\n<li><a href=\"./一些排序算法.md#快排/\">快排</a></li>\n<li><a href=\"./一些排序算法.md#堆排序/\">堆排序</a></li>\n</ul>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><ul>\n<li><p>总是记不住两层for循环里面的下标? 等等! 冒泡法不就是两两比较,然后找到最大一个或者最小的一个数吗?那在一个数组里面找最大如何实现?</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span><span class=\"params\">($array)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($array) &#123;</span><br><span class=\"line\">        find_max($array);</span><br><span class=\"line\">        $ret[]  = array_pop($array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#找最大,把最大的排到最后面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find_max</span><span class=\"params\">(&amp;$array)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i &lt; sizeof($array) <span class=\"number\">-1</span>; $i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &gt; $array[$i+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            $tmp = $array[$i];</span><br><span class=\"line\">            $array[$i] = $array[$i+<span class=\"number\">1</span>];</span><br><span class=\"line\">            $array[$i+<span class=\"number\">1</span>] = $tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(bubbleSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">8</span>) &#123; [<span class=\"number\">0</span>]=&gt; int(<span class=\"number\">8</span>) [<span class=\"number\">1</span>]=&gt; int(<span class=\"number\">7</span>) [<span class=\"number\">2</span>]=&gt; int(<span class=\"number\">6</span>) [<span class=\"number\">3</span>]=&gt; int(<span class=\"number\">5</span>) [<span class=\"number\">4</span>]=&gt; int(<span class=\"number\">4</span>) [<span class=\"number\">5</span>]=&gt; int(<span class=\"number\">3</span>) [<span class=\"number\">6</span>]=&gt; int(<span class=\"number\">2</span>) [<span class=\"number\">7</span>]=&gt; int(<span class=\"number\">1</span>) &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论:</p>\n<ul>\n<li>双重循环下标总是傻傻分不清,那就按照自己的理解去实现吧!</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><ul>\n<li><p>选择排序即选择最大或者最小元素的下标.之前也是记的,用双重循环,下标也容易搞错.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectSort</span><span class=\"params\">($array)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($array) &#123;</span><br><span class=\"line\">        $idx = selectMax($array);</span><br><span class=\"line\">        $ret[] = $array[$idx];</span><br><span class=\"line\">        array_splice($array, $idx,<span class=\"number\">1</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectMax</span><span class=\"params\">($array)</span></span>&#123;</span><br><span class=\"line\">    $maxIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i=<span class=\"number\">1</span>; $i &lt;sizeof($array) ; $i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$maxIdx] &lt; $array[$i]) &#123;</span><br><span class=\"line\">            $maxIdx = $i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $maxIdx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(selectSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">8</span>) &#123; [<span class=\"number\">0</span>]=&gt; int(<span class=\"number\">8</span>) [<span class=\"number\">1</span>]=&gt; int(<span class=\"number\">7</span>) [<span class=\"number\">2</span>]=&gt; int(<span class=\"number\">6</span>) [<span class=\"number\">3</span>]=&gt; int(<span class=\"number\">5</span>) [<span class=\"number\">4</span>]=&gt; int(<span class=\"number\">4</span>) [<span class=\"number\">5</span>]=&gt; int(<span class=\"number\">3</span>) [<span class=\"number\">6</span>]=&gt; int(<span class=\"number\">2</span>) [<span class=\"number\">7</span>]=&gt; int(<span class=\"number\">1</span>) &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论:</p>\n<ul>\n<li>和冒泡排序差别:冒泡排序两两交换,把最大/小的冒出来.而选择排序没有交换,只记录了最大/小的位置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><ul>\n<li><p>想象一下把一个数字插入到一个有序数组里面,整个数组的插入排序,就是不断把数组中元素取出来,往另外一个数组插入的过程</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span><span class=\"params\">($array)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($array) &#123;</span><br><span class=\"line\">        $needle = array_pop($array);</span><br><span class=\"line\">        insert($needle,$ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span><span class=\"params\">($needle,&amp;$haystack)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i &lt;sizeof($haystack) ; $i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($needle &gt; $haystack[$i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($j=sizeof($haystack); $j &gt;$i ; $j--) &#123; </span><br><span class=\"line\">        $haystack[$j] = $haystack[$j<span class=\"number\">-1</span>]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $haystack[$i] =$needle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(insertionSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">8</span>) &#123; [<span class=\"number\">0</span>]=&gt; int(<span class=\"number\">8</span>) [<span class=\"number\">1</span>]=&gt; int(<span class=\"number\">7</span>) [<span class=\"number\">2</span>]=&gt; int(<span class=\"number\">6</span>) [<span class=\"number\">3</span>]=&gt; int(<span class=\"number\">5</span>) [<span class=\"number\">4</span>]=&gt; int(<span class=\"number\">4</span>) [<span class=\"number\">5</span>]=&gt; int(<span class=\"number\">3</span>) [<span class=\"number\">6</span>]=&gt; int(<span class=\"number\">2</span>) [<span class=\"number\">7</span>]=&gt; int(<span class=\"number\">1</span>) &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论:</p>\n<ul>\n<li>把看起来很杂乱的工作抽象出来,封装成一个方法,使思路更加清晰</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><ul>\n<li><p>归并排序采用的是分治算法.分的过程是递归的过程,并的过程是把两个有序数组合并成一个数组的过程</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span><span class=\"params\">($array)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sizeof($array) &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $mid = intval(sizeof($array) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    $left = mergeSort(array_slice($array, <span class=\"number\">0</span>, $mid));</span><br><span class=\"line\">    $right = mergeSort(array_slice($array, $mid));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge($left, $right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span><span class=\"params\">($left, $right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $i = $j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($i &lt; sizeof($left) &amp;&amp; $j &lt; sizeof($right)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($left[$i] &gt; $right[$j]) &#123;</span><br><span class=\"line\">            $ret[] = $left[$i];</span><br><span class=\"line\">            $i++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $ret[] = $right[$j];</span><br><span class=\"line\">            $j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($i == sizeof($left)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($k = $j; $k &lt; sizeof($right); $k++) &#123;</span><br><span class=\"line\">            $ret[] = $right[$k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($j == sizeof($right)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($k = $i; $k &lt; sizeof($left); $k++) &#123;</span><br><span class=\"line\">            $ret[] = $left[$k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(mergeSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">8</span>) &#123; [<span class=\"number\">0</span>]=&gt; int(<span class=\"number\">8</span>) [<span class=\"number\">1</span>]=&gt; int(<span class=\"number\">7</span>) [<span class=\"number\">2</span>]=&gt; int(<span class=\"number\">6</span>) [<span class=\"number\">3</span>]=&gt; int(<span class=\"number\">5</span>) [<span class=\"number\">4</span>]=&gt; int(<span class=\"number\">4</span>) [<span class=\"number\">5</span>]=&gt; int(<span class=\"number\">3</span>) [<span class=\"number\">6</span>]=&gt; int(<span class=\"number\">2</span>) [<span class=\"number\">7</span>]=&gt; int(<span class=\"number\">1</span>) &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论:</p>\n<ul>\n<li>递归思路:考虑递归终点,考虑在第i次条件成立的情况下如何得到第i+1次的结果</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h3><ul>\n<li><p>选一个数,把比他大的放到左边,比他小的放在右边,然后递归进行下去</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span><span class=\"params\">($array)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sizeof($array) &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $pivot = array_pop($array);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($array <span class=\"keyword\">as</span> $item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($item &gt; $pivot) &#123;</span><br><span class=\"line\">            $left[] = $item;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $right[] = $item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array_merge((<span class=\"keyword\">array</span>) quickSort($left), (<span class=\"keyword\">array</span>) $pivot, (<span class=\"keyword\">array</span>) quickSort($right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(quickSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">8</span>) &#123; [<span class=\"number\">0</span>]=&gt; int(<span class=\"number\">8</span>) [<span class=\"number\">1</span>]=&gt; int(<span class=\"number\">7</span>) [<span class=\"number\">2</span>]=&gt; int(<span class=\"number\">6</span>) [<span class=\"number\">3</span>]=&gt; int(<span class=\"number\">5</span>) [<span class=\"number\">4</span>]=&gt; int(<span class=\"number\">4</span>) [<span class=\"number\">5</span>]=&gt; int(<span class=\"number\">3</span>) [<span class=\"number\">6</span>]=&gt; int(<span class=\"number\">2</span>) [<span class=\"number\">7</span>]=&gt; int(<span class=\"number\">1</span>) &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结论:</p>\n<ul>\n<li>也是用到了递归</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><ul>\n<li><p>利用堆的性质进行排序.以大顶堆为例,父节点大于等于子节点,由此可知根节点为最大值.是完全二叉树,父节点索引为i,则子节点索引为2i+1 和2i+2.根据这两个特性写出堆排序的算法</p>\n</li>\n<li><p>给出两个版本:</p>\n<ul>\n<li><p>1 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span><span class=\"params\">($array)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($array) &#123;</span><br><span class=\"line\">        buildHeap($array);</span><br><span class=\"line\">        $ret[] = array_shift($array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建一个堆</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildHeap</span><span class=\"params\">(&amp;$array)</span></span>&#123;</span><br><span class=\"line\">    $firstParent = $i = floor(sizeof($array) /<span class=\"number\">2</span> ) <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($i &gt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ajustHeap($array,$i);</span><br><span class=\"line\">        $i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 交换节点 i 使其满足堆的特性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajustHeap</span><span class=\"params\">(&amp;$array,$i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">            swap($array[$i], $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            swap($array[$i], $array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span><span class=\"params\">(&amp;$a, &amp;$b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $tmp = $a;</span><br><span class=\"line\">    $a = $b;</span><br><span class=\"line\">    $b = $tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(heapSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">  </span><br><span class=\"line\">$array = <span class=\"keyword\">array</span>(<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span><span class=\"params\">($array)</span></span>&#123;</span><br><span class=\"line\">    buildHeap($array);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($array) &#123;</span><br><span class=\"line\">        swap($array[<span class=\"number\">0</span>] , $array[sizeof($array) <span class=\"number\">-1</span> ]);</span><br><span class=\"line\">        $ret[] = array_pop($array);</span><br><span class=\"line\">        adjust($array,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归调整 根的位置可能不对的情况</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">adjust</span><span class=\"params\">(&amp;$array,$i)</span></span>&#123;</span><br><span class=\"line\">    $lastParent =  floor(sizeof($array) / <span class=\"number\">2</span>) <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( $i &gt; $lastParent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">            swap($array[$i], $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]);</span><br><span class=\"line\">            adjust($array,<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            swap($array[$i], $array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">            adjust($array,<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildHeap</span><span class=\"params\">(&amp;$array)</span></span>&#123;</span><br><span class=\"line\">    $firstParent = $i =  floor(sizeof($array) / <span class=\"number\">2</span>) <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        adjustHeap($array,$i);</span><br><span class=\"line\">        $i --;      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">adjustHeap</span><span class=\"params\">(&amp;$array,$i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">            swap($array[$i], $array[<span class=\"number\">2</span> * $i + <span class=\"number\">2</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($array[$i] &lt; $array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            swap($array[$i], $array[<span class=\"number\">2</span> * $i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span><span class=\"params\">(&amp;$a, &amp;$b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $tmp = $a;</span><br><span class=\"line\">    $a = $b;</span><br><span class=\"line\">    $b = $tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(heapSort($array));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>结论:</p>\n<ul>\n<li>方法1:直接构建一个堆,取出最大元素,然后将后面的元素重新构建一个堆.思路清晰,但是发现每次建堆的时候都会遍历所有的父节点, n/2 -1 , (n-1)/2 -1 ,… , 所有加起来应该就是O(n^2)</li>\n<li>方法2:先采用方法1建立一个大顶堆, 然后把顶和最后一个元素交换弹出最后一个元素,这样交换并没有改变堆其他元素的相对位置,所以只需要把最顶上的元素依次向下调整即可</li>\n<li>调整思路:利用递归,把根的位置和左边或者右边孩子交换,则以这个孩子为根的子树又变成了刚才的情况,而递归的终点则是这个节点已经没有孩子了.显然这样调整最多也就调整了树的高度的次数,所以应该是O(nlogn)</li>\n</ul>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjqvpvhbn0008zbovmfql41cb","category_id":"cjqvpvhbk0004zbovymdyj4q6","_id":"cjqvpvhbv000fzbovnqb1bwxo"},{"post_id":"cjqvpvhbd0000zbovp76m1xqz","category_id":"cjqvpvhbk0004zbovymdyj4q6","_id":"cjqvpvhbw000jzbovbxxg5szp"},{"post_id":"cjqvpvhbh0002zbov30jpu7zm","category_id":"cjqvpvhbk0004zbovymdyj4q6","_id":"cjqvpvhby000nzbovq1gc9iia"},{"post_id":"cjqvpvhbw000izbovpi0rffdt","category_id":"cjqvpvhbk0004zbovymdyj4q6","_id":"cjqvpvhc0000szbovx8wbppgo"},{"post_id":"cjqvpvhbl0006zbovszbag3xk","category_id":"cjqvpvhbk0004zbovymdyj4q6","_id":"cjqvpvhc1000wzbovdvayvi1m"},{"post_id":"cjqvpvhby000pzbovqkau3gre","category_id":"cjqvpvhbk0004zbovymdyj4q6","_id":"cjqvpvhc1000yzbov019k6i6f"},{"post_id":"cjqvpvhbo0009zbovfsh3p2xz","category_id":"cjqvpvhbx000mzbovte38tjyj","_id":"cjqvpvhc30011zbov7q80nyxp"},{"post_id":"cjqvpvhbz000rzbov05pe6yy8","category_id":"cjqvpvhbk0004zbovymdyj4q6","_id":"cjqvpvhc40015zbovjnwnohxz"},{"post_id":"cjqvpvhc0000vzbovxlhldwwv","category_id":"cjqvpvhc0000tzbov4xy5ofpl","_id":"cjqvpvhc50018zbovcgi6p54x"},{"post_id":"cjqvpvhbs000dzbov1fwqr6lr","category_id":"cjqvpvhc0000tzbov4xy5ofpl","_id":"cjqvpvhc6001bzbovwph9burd"},{"post_id":"cjqvpvhc20010zbov7h2w23ii","category_id":"cjqvpvhbk0004zbovymdyj4q6","_id":"cjqvpvhc7001ezbovgavfqvyo"},{"post_id":"cjqvpvhbx000lzbovyr9p7z6z","category_id":"cjqvpvhc0000tzbov4xy5ofpl","_id":"cjqvpvhc8001hzbovb0159469"},{"post_id":"cjqvpvhc40014zbovfw8c9pff","category_id":"cjqvpvhc0000tzbov4xy5ofpl","_id":"cjqvpvhc9001kzbovkhcvztnu"},{"post_id":"cjqvpvhc7001gzbovl447uqkp","category_id":"cjqvpvhbk0004zbovymdyj4q6","_id":"cjqvpvhc9001nzbovmyjnrboa"},{"post_id":"cjqvpvhc50017zbov1zreewmz","category_id":"cjqvpvhc6001czbov1x28qjfb","_id":"cjqvpvhca001pzbovn29dvx2v"},{"post_id":"cjqvpvhc6001azbovylujrhlp","category_id":"cjqvpvhc9001jzboveoetgqsk","_id":"cjqvpvhca001szbovjeseahj5"},{"post_id":"cjqvpvhc7001dzbovx5cpkupw","category_id":"cjqvpvhc6001czbov1x28qjfb","_id":"cjqvpvhcb001wzbovz88twsrq"},{"post_id":"cjqvpvhgq002yzbovgaxmehjo","category_id":"cjqvpvhc0000tzbov4xy5ofpl","_id":"cjqvpvhgw0035zbovvtpng4ss"},{"post_id":"cjqvpvhgr002zzbovmy328sl2","category_id":"cjqvpvhc0000tzbov4xy5ofpl","_id":"cjqvpvhgx0037zbovrrctuinh"},{"post_id":"cjqvpvhgt0031zbovebnlle8y","category_id":"cjqvpvhbk0004zbovymdyj4q6","_id":"cjqvpvhgx0039zbovk7v187v0"},{"post_id":"cjqvpvhgv0034zbovcr1c3aql","category_id":"cjqvpvhbx000mzbovte38tjyj","_id":"cjqvpvhgy003azbovs1yout88"}],"PostTag":[{"post_id":"cjqvpvhbd0000zbovp76m1xqz","tag_id":"cjqvpvhbl0005zbov1lsgpqwn","_id":"cjqvpvhbr000czbovfnc6xd44"},{"post_id":"cjqvpvhbh0002zbov30jpu7zm","tag_id":"cjqvpvhbp000bzbov6v7k8oqr","_id":"cjqvpvhbw000kzbovtuhxty8x"},{"post_id":"cjqvpvhbl0006zbovszbag3xk","tag_id":"cjqvpvhbv000hzbovxkwjvo3g","_id":"cjqvpvhbz000qzbovw51roeix"},{"post_id":"cjqvpvhbn0008zbovmfql41cb","tag_id":"cjqvpvhby000ozbovrct3asay","_id":"cjqvpvhc40013zbovdr0nol2p"},{"post_id":"cjqvpvhbn0008zbovmfql41cb","tag_id":"cjqvpvhc0000uzbov62fizcfz","_id":"cjqvpvhc50016zbovv7xr5gbe"},{"post_id":"cjqvpvhbo0009zbovfsh3p2xz","tag_id":"cjqvpvhc30012zbovnfa1lj1c","_id":"cjqvpvhc8001izbov1bcf9ts8"},{"post_id":"cjqvpvhbo0009zbovfsh3p2xz","tag_id":"cjqvpvhc50019zbovy2zgajq2","_id":"cjqvpvhc9001lzbovw1j9zt6r"},{"post_id":"cjqvpvhbs000dzbov1fwqr6lr","tag_id":"cjqvpvhc7001fzbovcu7texwe","_id":"cjqvpvhca001rzbovklrs1sdl"},{"post_id":"cjqvpvhbs000dzbov1fwqr6lr","tag_id":"cjqvpvhc9001mzbovo22hf5wl","_id":"cjqvpvhca001tzbovcxldkctx"},{"post_id":"cjqvpvhbw000izbovpi0rffdt","tag_id":"cjqvpvhca001qzbovieq7ft7c","_id":"cjqvpvhcb001vzbovy5mj8jzz"},{"post_id":"cjqvpvhbx000lzbovyr9p7z6z","tag_id":"cjqvpvhc7001fzbovcu7texwe","_id":"cjqvpvhcb001zzbov18lnw07z"},{"post_id":"cjqvpvhbx000lzbovyr9p7z6z","tag_id":"cjqvpvhc9001mzbovo22hf5wl","_id":"cjqvpvhcc0020zbov283cuywq"},{"post_id":"cjqvpvhby000pzbovqkau3gre","tag_id":"cjqvpvhca001qzbovieq7ft7c","_id":"cjqvpvhcc0022zbov560f1i4g"},{"post_id":"cjqvpvhbz000rzbov05pe6yy8","tag_id":"cjqvpvhcc0021zbovipwoy9ya","_id":"cjqvpvhcc0024zbovipyeprku"},{"post_id":"cjqvpvhc0000vzbovxlhldwwv","tag_id":"cjqvpvhc9001mzbovo22hf5wl","_id":"cjqvpvhcd0027zbov3xqb8tnz"},{"post_id":"cjqvpvhc0000vzbovxlhldwwv","tag_id":"cjqvpvhcc0025zbov5x9uny1x","_id":"cjqvpvhcd0028zbovl1xhkz4k"},{"post_id":"cjqvpvhc20010zbov7h2w23ii","tag_id":"cjqvpvhcd0026zbovuqg4d4r7","_id":"cjqvpvhcd002azbovu2l5dhs6"},{"post_id":"cjqvpvhc40014zbovfw8c9pff","tag_id":"cjqvpvhc9001mzbovo22hf5wl","_id":"cjqvpvhce002ezbovy4fzw84c"},{"post_id":"cjqvpvhc40014zbovfw8c9pff","tag_id":"cjqvpvhc7001fzbovcu7texwe","_id":"cjqvpvhcf002fzbovvtld1wle"},{"post_id":"cjqvpvhc40014zbovfw8c9pff","tag_id":"cjqvpvhce002czbov8tn2bzf4","_id":"cjqvpvhcf002hzbovrpvmwc82"},{"post_id":"cjqvpvhc50017zbov1zreewmz","tag_id":"cjqvpvhce002dzbovr3zdgrpo","_id":"cjqvpvhcf002kzbovmzyvv4mf"},{"post_id":"cjqvpvhc50017zbov1zreewmz","tag_id":"cjqvpvhcf002gzbovq9pf3htk","_id":"cjqvpvhcf002lzbovbg3fja5e"},{"post_id":"cjqvpvhc50017zbov1zreewmz","tag_id":"cjqvpvhcf002izbovbbwrnbra","_id":"cjqvpvhcg002nzbovkk4pvsx6"},{"post_id":"cjqvpvhc6001azbovylujrhlp","tag_id":"cjqvpvhcf002jzbovfr132xi4","_id":"cjqvpvhcg002ozbov7bayejry"},{"post_id":"cjqvpvhc7001dzbovx5cpkupw","tag_id":"cjqvpvhca001qzbovieq7ft7c","_id":"cjqvpvhch002tzbovndtrsyee"},{"post_id":"cjqvpvhc7001dzbovx5cpkupw","tag_id":"cjqvpvhce002dzbovr3zdgrpo","_id":"cjqvpvhch002uzbov85fs1bki"},{"post_id":"cjqvpvhc7001dzbovx5cpkupw","tag_id":"cjqvpvhcf002gzbovq9pf3htk","_id":"cjqvpvhch002vzbovf0fm540l"},{"post_id":"cjqvpvhc7001dzbovx5cpkupw","tag_id":"cjqvpvhch002rzbovmmo17q58","_id":"cjqvpvhch002wzbovhy08vusg"},{"post_id":"cjqvpvhc7001gzbovl447uqkp","tag_id":"cjqvpvhch002szbov0fb3anbm","_id":"cjqvpvhch002xzbovyq0er21b"},{"post_id":"cjqvpvhgq002yzbovgaxmehjo","tag_id":"cjqvpvhc7001fzbovcu7texwe","_id":"cjqvpvhgt0030zbov4hfuesd6"},{"post_id":"cjqvpvhgq002yzbovgaxmehjo","tag_id":"cjqvpvhc9001mzbovo22hf5wl","_id":"cjqvpvhgv0033zbovpkyorzt0"},{"post_id":"cjqvpvhgt0031zbovebnlle8y","tag_id":"cjqvpvhc9001mzbovo22hf5wl","_id":"cjqvpvhgx0036zbovnniigbno"},{"post_id":"cjqvpvhgr002zzbovmy328sl2","tag_id":"cjqvpvhc9001mzbovo22hf5wl","_id":"cjqvpvhgy003czbovkuy9otpx"},{"post_id":"cjqvpvhgr002zzbovmy328sl2","tag_id":"cjqvpvhgv0032zbovmn4ixgf5","_id":"cjqvpvhgy003dzbov3jv5c35i"},{"post_id":"cjqvpvhgr002zzbovmy328sl2","tag_id":"cjqvpvhgx0038zbovtnt57sd7","_id":"cjqvpvhgz003ezbovxd96juxj"},{"post_id":"cjqvpvhgv0034zbovcr1c3aql","tag_id":"cjqvpvhgy003bzbovzpsk2sxj","_id":"cjqvpvhgz003fzbovl8ejpqvj"},{"post_id":"cjqvpvhgv0034zbovcr1c3aql","tag_id":"cjqvpvhc9001mzbovo22hf5wl","_id":"cjqvpvhgz003gzbovbk72ytko"}],"Tag":[{"name":"C语言","_id":"cjqvpvhbl0005zbov1lsgpqwn"},{"name":"javascript","_id":"cjqvpvhbp000bzbov6v7k8oqr"},{"name":"vim","_id":"cjqvpvhbv000hzbovxkwjvo3g"},{"name":"计算机基础","_id":"cjqvpvhby000ozbovrct3asay"},{"name":"汇编","_id":"cjqvpvhc0000uzbov62fizcfz"},{"name":"动态规划","_id":"cjqvpvhc30012zbovnfa1lj1c"},{"name":"dp","_id":"cjqvpvhc50019zbovy2zgajq2"},{"name":"laravel","_id":"cjqvpvhc7001fzbovcu7texwe"},{"name":"php","_id":"cjqvpvhc9001mzbovo22hf5wl"},{"name":"linux","_id":"cjqvpvhca001qzbovieq7ft7c"},{"name":"mongo","_id":"cjqvpvhcc0021zbovipwoy9ya"},{"name":"php文件操作","_id":"cjqvpvhcc0025zbov5x9uny1x"},{"name":"sql","_id":"cjqvpvhcd0026zbovuqg4d4r7"},{"name":"pipeline","_id":"cjqvpvhce002czbov8tn2bzf4"},{"name":"Android","_id":"cjqvpvhce002dzbovr3zdgrpo"},{"name":"信号量","_id":"cjqvpvhcf002gzbovq9pf3htk"},{"name":"socket","_id":"cjqvpvhcf002izbovbbwrnbra"},{"name":"增长黑客","_id":"cjqvpvhcf002jzbovfr132xi4"},{"name":"轮询","_id":"cjqvpvhch002rzbovmmo17q58"},{"name":"mysql","_id":"cjqvpvhch002szbov0fb3anbm"},{"name":"php扩展","_id":"cjqvpvhgv0032zbovmn4ixgf5"},{"name":"php实现","_id":"cjqvpvhgx0038zbovtnt57sd7"},{"name":"排序","_id":"cjqvpvhgy003bzbovzpsk2sxj"}]}}